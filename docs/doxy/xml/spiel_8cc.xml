<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="spiel_8cc" kind="file" language="C++">
    <compoundname>spiel.cc</compoundname>
    <includes refid="spiel_8h" local="yes">open_spiel/spiel.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">functional</includes>
    <includes local="no">iostream</includes>
    <includes local="no">map</includes>
    <includes local="no">memory</includes>
    <includes local="no">sstream</includes>
    <includes local="no">string</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includes local="yes">open_spiel/abseil-cpp/absl/algorithm/container.h</includes>
    <includes local="yes">open_spiel/abseil-cpp/absl/container/btree_map.h</includes>
    <includes local="yes">open_spiel/abseil-cpp/absl/random/bit_gen_ref.h</includes>
    <includes local="yes">open_spiel/abseil-cpp/absl/random/distributions.h</includes>
    <includes local="yes">open_spiel/abseil-cpp/absl/strings/ascii.h</includes>
    <includes local="yes">open_spiel/abseil-cpp/absl/strings/match.h</includes>
    <includes local="yes">open_spiel/abseil-cpp/absl/strings/numbers.h</includes>
    <includes local="yes">open_spiel/abseil-cpp/absl/strings/str_cat.h</includes>
    <includes local="yes">open_spiel/abseil-cpp/absl/strings/str_format.h</includes>
    <includes local="yes">open_spiel/abseil-cpp/absl/strings/str_join.h</includes>
    <includes local="yes">open_spiel/abseil-cpp/absl/strings/str_split.h</includes>
    <includes local="yes">open_spiel/abseil-cpp/absl/types/span.h</includes>
    <includes refid="game__parameters_8h" local="yes">open_spiel/game_parameters.h</includes>
    <includes refid="spiel__globals_8h" local="yes">open_spiel/spiel_globals.h</includes>
    <includes refid="spiel__utils_8h" local="yes">open_spiel/spiel_utils.h</includes>
    <includes local="yes">open_spiel/utils/usage_logging.h</includes>
    <incdepgraph>
      <node id="19">
        <label>open_spiel/game_parameters.h</label>
        <link refid="game__parameters_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>open_spiel/observer.h</label>
        <link refid="observer_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>open_spiel/spiel.cc</label>
        <link refid="spiel_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>open_spiel/spiel.h</label>
        <link refid="spiel_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>open_spiel/spiel_globals.h</label>
        <link refid="spiel__globals_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>open_spiel/spiel_utils.h</label>
        <link refid="spiel__utils_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>algorithm</label>
      </node>
      <node id="22">
        <label>array</label>
      </node>
      <node id="23">
        <label>cmath</label>
      </node>
      <node id="24">
        <label>cstddef</label>
      </node>
      <node id="25">
        <label>cstdint</label>
      </node>
      <node id="3">
        <label>functional</label>
      </node>
      <node id="4">
        <label>iostream</label>
      </node>
      <node id="5">
        <label>map</label>
      </node>
      <node id="6">
        <label>memory</label>
      </node>
      <node id="7">
        <label>numeric</label>
      </node>
      <node id="32">
        <label>open_spiel/abseil-cpp/absl/algorithm/container.h</label>
      </node>
      <node id="33">
        <label>open_spiel/abseil-cpp/absl/base/attributes.h</label>
      </node>
      <node id="38">
        <label>open_spiel/abseil-cpp/absl/container/btree_map.h</label>
      </node>
      <node id="34">
        <label>open_spiel/abseil-cpp/absl/container/flat_hash_set.h</label>
      </node>
      <node id="35">
        <label>open_spiel/abseil-cpp/absl/container/inlined_vector.h</label>
      </node>
      <node id="14">
        <label>open_spiel/abseil-cpp/absl/random/bit_gen_ref.h</label>
      </node>
      <node id="39">
        <label>open_spiel/abseil-cpp/absl/random/distributions.h</label>
      </node>
      <node id="27">
        <label>open_spiel/abseil-cpp/absl/random/uniform_real_distribution.h</label>
      </node>
      <node id="40">
        <label>open_spiel/abseil-cpp/absl/strings/ascii.h</label>
      </node>
      <node id="41">
        <label>open_spiel/abseil-cpp/absl/strings/match.h</label>
      </node>
      <node id="42">
        <label>open_spiel/abseil-cpp/absl/strings/numbers.h</label>
      </node>
      <node id="28">
        <label>open_spiel/abseil-cpp/absl/strings/str_cat.h</label>
      </node>
      <node id="43">
        <label>open_spiel/abseil-cpp/absl/strings/str_format.h</label>
      </node>
      <node id="15">
        <label>open_spiel/abseil-cpp/absl/strings/str_join.h</label>
      </node>
      <node id="44">
        <label>open_spiel/abseil-cpp/absl/strings/str_split.h</label>
      </node>
      <node id="36">
        <label>open_spiel/abseil-cpp/absl/strings/string_view.h</label>
      </node>
      <node id="16">
        <label>open_spiel/abseil-cpp/absl/synchronization/mutex.h</label>
      </node>
      <node id="29">
        <label>open_spiel/abseil-cpp/absl/time/clock.h</label>
      </node>
      <node id="30">
        <label>open_spiel/abseil-cpp/absl/time/time.h</label>
      </node>
      <node id="17">
        <label>open_spiel/abseil-cpp/absl/types/optional.h</label>
      </node>
      <node id="18">
        <label>open_spiel/abseil-cpp/absl/types/span.h</label>
      </node>
      <node id="45">
        <label>open_spiel/utils/usage_logging.h</label>
      </node>
      <node id="8">
        <label>random</label>
      </node>
      <node id="9">
        <label>sstream</label>
      </node>
      <node id="10">
        <label>string</label>
      </node>
      <node id="26">
        <label>type_traits</label>
      </node>
      <node id="11">
        <label>unordered_map</label>
      </node>
      <node id="12">
        <label>utility</label>
      </node>
      <node id="13">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceopen__spiel">open_spiel</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2021<sp/>DeepMind<sp/>Technologies<sp/>Limited</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="spiel_8h" kindref="compound">open_spiel/spiel.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;open_spiel/abseil-cpp/absl/algorithm/container.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;open_spiel/abseil-cpp/absl/container/btree_map.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;open_spiel/abseil-cpp/absl/random/bit_gen_ref.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;open_spiel/abseil-cpp/absl/random/distributions.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;open_spiel/abseil-cpp/absl/strings/ascii.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;open_spiel/abseil-cpp/absl/strings/match.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;open_spiel/abseil-cpp/absl/strings/numbers.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;open_spiel/abseil-cpp/absl/strings/str_cat.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;open_spiel/abseil-cpp/absl/strings/str_format.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;open_spiel/abseil-cpp/absl/strings/str_join.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;open_spiel/abseil-cpp/absl/strings/str_split.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;open_spiel/abseil-cpp/absl/types/span.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="game__parameters_8h" kindref="compound">open_spiel/game_parameters.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="spiel__globals_8h" kindref="compound">open_spiel/spiel_globals.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="spiel__utils_8h" kindref="compound">open_spiel/spiel_utils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;open_spiel/utils/usage_logging.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceopen__spiel" kindref="compound">open_spiel</ref><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kSerializationVersion<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>kSerializeMetaSectionHeader<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;[Meta]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>kSerializeGameSectionHeader<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;[Game]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>kSerializeGameRNGStateSectionHeader<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;[GameRNGState]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>kSerializeStateSectionHeader<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;[State]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>available<sp/>parameter<sp/>keys,<sp/>to<sp/>be<sp/>used<sp/>as<sp/>a<sp/>utility<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal">std::string<sp/>ListValidParameters(</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1ad7c4d931669b5e357cb5c7f84a6de094" kindref="member">GameParameters</ref>&amp;<sp/>param_spec)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>available_keys;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>available_keys.reserve(param_spec.size());</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>item<sp/>:<sp/>param_spec)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>available_keys.push_back(item.first);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>std::sort(available_keys.begin(),<sp/>available_keys.end());</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>absl::StrJoin(available_keys,<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Check<sp/>on<sp/>supplied<sp/>parameters<sp/>for<sp/>game<sp/>creation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Issues<sp/>a<sp/>SpielFatalError<sp/>if<sp/>any<sp/>are<sp/>missing,<sp/>of<sp/>the<sp/>wrong<sp/>type,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/>unexpectedly<sp/>present.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ValidateParams(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1ad7c4d931669b5e357cb5c7f84a6de094" kindref="member">GameParameters</ref>&amp;<sp/>params,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1ad7c4d931669b5e357cb5c7f84a6de094" kindref="member">GameParameters</ref>&amp;<sp/>param_spec)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>all<sp/>supplied<sp/>parameters<sp/>are<sp/>supported<sp/>and<sp/>of<sp/>the<sp/>right<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>param<sp/>:<sp/>params)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>param_spec.find(param.first);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>param_spec.end())<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(absl::StrCat(</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>parameter<sp/>&apos;&quot;</highlight><highlight class="normal">,<sp/>param.first,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&apos;.<sp/>Available<sp/>parameters<sp/>are:<sp/>&quot;</highlight><highlight class="normal">,<sp/>ListValidParameters(param_spec)));</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.type()<sp/>!=<sp/>param.second.type())<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(absl::StrCat(</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Wrong<sp/>type<sp/>for<sp/>parameter<sp/>&quot;</highlight><highlight class="normal">,<sp/>param.first,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;.<sp/>Expected<sp/>type:<sp/>&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespaceopen__spiel_1a9bc31aee9bea953807b92aa4399d1d10" kindref="member">GameParameterTypeToString</ref>(it-&gt;second.type()),</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;,<sp/>got<sp/>&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespaceopen__spiel_1a9bc31aee9bea953807b92aa4399d1d10" kindref="member">GameParameterTypeToString</ref>(param.second.type()),<sp/></highlight><highlight class="stringliteral">&quot;<sp/>with<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param.second.ToString()));</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>we<sp/>aren&apos;t<sp/>missing<sp/>any<sp/>mandatory<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>param<sp/>:<sp/>param_spec)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(param.second.is_mandatory()<sp/>&amp;&amp;<sp/>!params.count(param.first))<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(absl::StrCat(</highlight><highlight class="stringliteral">&quot;Missing<sp/>parameter<sp/>&quot;</highlight><highlight class="normal">,<sp/>param.first));</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="namespaceopen__spiel_1a7a4f3573ff9d467ce5c64eecbe5ea8b9" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="namespaceopen__spiel_1a7a4f3573ff9d467ce5c64eecbe5ea8b9" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1a236dc05d070fca4a27a4344aea799332" kindref="member">StateType</ref>&amp;<sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1a236dc05d070fca4a27a4344aea799332a6a40bb1d52ea6251e5ce3b9e7d3577bd" kindref="member">StateType::kMeanField</ref>:<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;MEAN_FIELD&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1a236dc05d070fca4a27a4344aea799332add0bd69a737669b5dd8d6e357971e2dd" kindref="member">StateType::kChance</ref>:<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;CHANCE&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1a236dc05d070fca4a27a4344aea799332a81d16d84af3281936e1b3a437b2d7385" kindref="member">StateType::kDecision</ref>:<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;DECISION&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1a236dc05d070fca4a27a4344aea799332a217dd2f6ef26065693bb5043fce241ea" kindref="member">StateType::kTerminal</ref>:<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;TERMINAL&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="classopen__spiel_1_1_state_1a85fe23e126a3c9f263b4e87922a01b0f" refkind="member"><highlight class="normal"><ref refid="namespaceopen__spiel_1a236dc05d070fca4a27a4344aea799332" kindref="member">StateType</ref><sp/><ref refid="classopen__spiel_1_1_state_1a85fe23e126a3c9f263b4e87922a01b0f" kindref="member">State::GetType</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classopen__spiel_1_1_state_1a8289468cf01f3a8c53b3848957905ec8" kindref="member">IsChanceNode</ref>())<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1a236dc05d070fca4a27a4344aea799332add0bd69a737669b5dd8d6e357971e2dd" kindref="member">StateType::kChance</ref>;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classopen__spiel_1_1_state_1ab5b84abeb1ec44715b11690b8acc284c" kindref="member">IsTerminal</ref>())<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1a236dc05d070fca4a27a4344aea799332a217dd2f6ef26065693bb5043fce241ea" kindref="member">StateType::kTerminal</ref>;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classopen__spiel_1_1_state_1a229614eafbf9978cbc4109347e5f9efa" kindref="member">CurrentPlayer</ref>()<sp/>==<sp/><ref refid="namespaceopen__spiel_1a5677cc0bb3f0c3d54e59c5df948718d6a53f92239d341173f9b7a13d6eb2776f9" kindref="member">kMeanFieldPlayerId</ref>)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1a236dc05d070fca4a27a4344aea799332a6a40bb1d52ea6251e5ce3b9e7d3577bd" kindref="member">StateType::kMeanField</ref>;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1a236dc05d070fca4a27a4344aea799332a81d16d84af3281936e1b3a437b2d7385" kindref="member">StateType::kDecision</ref>;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="structopen__spiel_1_1_game_type_1a3478a4e3b97e7b14ac147d3d996a0e35" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_type_1a3478a4e3b97e7b14ac147d3d996a0e35" kindref="member">GameType::ContainsRequiredParameters</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>key_val<sp/>:<sp/><ref refid="structopen__spiel_1_1_game_type_1a2d265bb0c5d0be4d64222ac322bf3510" kindref="member">parameter_specification</ref>)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key_val.second.is_mandatory())<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="classopen__spiel_1_1_game_registerer_1ab27bd0cfcf8b9cd0425627751749c384" refkind="member"><highlight class="normal"><ref refid="classopen__spiel_1_1_game_registerer_1ab27bd0cfcf8b9cd0425627751749c384" kindref="member">GameRegisterer::GameRegisterer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_type" kindref="compound">GameType</ref>&amp;<sp/>game_type,<sp/><ref refid="classopen__spiel_1_1_game_registerer_1ab80c0c1ef72439db9a7a5fbf28a03435" kindref="member">CreateFunc</ref><sp/>creator)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><ref refid="classopen__spiel_1_1_game_registerer_1a9087e5af855f413241a8ff7fba0dadeb" kindref="member">RegisterGame</ref>(game_type,<sp/>creator);</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143" refid="classopen__spiel_1_1_game_registerer_1a6e6f8091b1e3c521af50e71b0dce5717" refkind="member"><highlight class="normal">std::shared_ptr&lt;const<sp/>Game&gt;<sp/><ref refid="classopen__spiel_1_1_game_registerer_1a6e6f8091b1e3c521af50e71b0dce5717" kindref="member">GameRegisterer::CreateByName</ref>(</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>short_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1ad7c4d931669b5e357cb5c7f84a6de094" kindref="member">GameParameters</ref>&amp;<sp/>params)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>it&apos;s<sp/>a<sp/>game<sp/>with<sp/>a<sp/>known<sp/>issue.<sp/>If<sp/>so,<sp/>output<sp/>a<sp/>warning.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(absl::c_linear_search(<ref refid="classopen__spiel_1_1_game_registerer_1a6a640935af5f3b93cf4a3ed2168b81d6" kindref="member">GamesWithKnownIssues</ref>(),<sp/>short_name))<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Warning!<sp/>This<sp/>game<sp/>has<sp/>known<sp/>issues.<sp/>Please<sp/>see<sp/>the<sp/>games<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;list<sp/>on<sp/>github<sp/>or<sp/>the<sp/>code<sp/>for<sp/>details.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>factory<sp/>for<sp/>this<sp/>game<sp/>and<sp/>load<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>iter<sp/>=<sp/>factories().find(short_name);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter<sp/>==<sp/>factories().end())<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(absl::StrCat(</highlight><highlight class="stringliteral">&quot;Unknown<sp/>game<sp/>&apos;&quot;</highlight><highlight class="normal">,<sp/>short_name,</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&apos;.<sp/>Available<sp/>games<sp/>are:\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>absl::StrJoin(<ref refid="classopen__spiel_1_1_game_registerer_1a2dd29263f74ac828f1c9c4ee0161b04f" kindref="member">RegisteredNames</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>ValidateParams(params,<sp/>iter-&gt;second.first.parameter_specification);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(iter-&gt;second.second)(params);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164" refid="classopen__spiel_1_1_game_registerer_1a2dd29263f74ac828f1c9c4ee0161b04f" refkind="member"><highlight class="normal">std::vector&lt;std::string&gt;<sp/><ref refid="classopen__spiel_1_1_game_registerer_1a2dd29263f74ac828f1c9c4ee0161b04f" kindref="member">GameRegisterer::RegisteredNames</ref>()<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>names;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>key_val<sp/>:<sp/>factories())<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>names.push_back(key_val.first);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>names;</highlight></codeline>
<codeline lineno="170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172" refid="classopen__spiel_1_1_game_registerer_1a6a640935af5f3b93cf4a3ed2168b81d6" refkind="member"><highlight class="normal">std::vector&lt;std::string&gt;<sp/><ref refid="classopen__spiel_1_1_game_registerer_1a6a640935af5f3b93cf4a3ed2168b81d6" kindref="member">GameRegisterer::GamesWithKnownIssues</ref>()<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{</highlight><highlight class="stringliteral">&quot;quoridor&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;rbc&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176" refid="classopen__spiel_1_1_game_registerer_1ab0c87d50dfa049e12c70c2a665def26c" refkind="member"><highlight class="normal">std::vector&lt;GameType&gt;<sp/><ref refid="classopen__spiel_1_1_game_registerer_1ab0c87d50dfa049e12c70c2a665def26c" kindref="member">GameRegisterer::RegisteredGames</ref>()<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>std::vector&lt;GameType&gt;<sp/>games;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>key_val<sp/>:<sp/>factories())<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>games.push_back(key_val.second.first);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>games;</highlight></codeline>
<codeline lineno="182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184" refid="classopen__spiel_1_1_game_registerer_1a656bdcb02ce81779bb05dda3fb2e7936" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_game_registerer_1a656bdcb02ce81779bb05dda3fb2e7936" kindref="member">GameRegisterer::IsValidName</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>short_name)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>factories().find(short_name)<sp/>!=<sp/>factories().end();</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188" refid="classopen__spiel_1_1_game_registerer_1a9087e5af855f413241a8ff7fba0dadeb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_game_registerer_1a9087e5af855f413241a8ff7fba0dadeb" kindref="member">GameRegisterer::RegisterGame</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_type" kindref="compound">GameType</ref>&amp;<sp/>game_type,</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classopen__spiel_1_1_game_registerer_1ab80c0c1ef72439db9a7a5fbf28a03435" kindref="member">GameRegisterer::CreateFunc</ref><sp/>creator)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>factories()[game_type.<ref refid="structopen__spiel_1_1_game_type_1a7dc97c2b88971ea7c5180d3c2fe29cf1" kindref="member">short_name</ref>]<sp/>=<sp/>std::make_pair(game_type,<sp/>creator);</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193" refid="namespaceopen__spiel_1adbb556e9d12546dd17acfe8c3887b869" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1adbb556e9d12546dd17acfe8c3887b869" kindref="member">IsGameRegistered</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>short_name)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_game_registerer_1a656bdcb02ce81779bb05dda3fb2e7936" kindref="member">GameRegisterer::IsValidName</ref>(short_name);</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197" refid="namespaceopen__spiel_1a5fc96e037a90ad323529c4f55d7d2cce" refkind="member"><highlight class="normal">std::vector&lt;std::string&gt;<sp/><ref refid="namespaceopen__spiel_1a5fc96e037a90ad323529c4f55d7d2cce" kindref="member">RegisteredGames</ref>()<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_game_registerer_1a2dd29263f74ac828f1c9c4ee0161b04f" kindref="member">GameRegisterer::RegisteredNames</ref>();</highlight></codeline>
<codeline lineno="199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201" refid="namespaceopen__spiel_1a79f969c1807e578a2090d314ab71bf68" refkind="member"><highlight class="normal">std::vector&lt;GameType&gt;<sp/><ref refid="namespaceopen__spiel_1a79f969c1807e578a2090d314ab71bf68" kindref="member">RegisteredGameTypes</ref>()<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_game_registerer_1ab0c87d50dfa049e12c70c2a665def26c" kindref="member">GameRegisterer::RegisteredGames</ref>();</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205" refid="namespaceopen__spiel_1a46be5ac78a1c87daeef36b4b8dd67c3c" refkind="member"><highlight class="normal">std::shared_ptr&lt;const<sp/>Game&gt;<sp/><ref refid="namespaceopen__spiel_1a46be5ac78a1c87daeef36b4b8dd67c3c" kindref="member">DeserializeGame</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>serialized)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>std::pair&lt;std::string,<sp/>std::string&gt;<sp/>game_and_rng_state<sp/>=</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>absl::StrSplit(serialized,<sp/>kSerializeGameRNGStateSectionHeader);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>the<sp/>trailing<sp/>&quot;\n&quot;<sp/>from<sp/>the<sp/>game<sp/>section.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!game_and_rng_state.first.empty()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>game_and_rng_state.first.back()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>game_and_rng_state.first.pop_back();</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;const<sp/>Game&gt;<sp/>game<sp/>=<sp/><ref refid="namespaceopen__spiel_1afd4ac299a038385def0ea56521067137" kindref="member">LoadGame</ref>(game_and_rng_state.first);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!game_and_rng_state.second.empty())<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Game<sp/>is<sp/>implicitly<sp/>stochastic.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>the<sp/>trailing<sp/>&quot;\n&quot;<sp/>from<sp/>the<sp/>RNG<sp/>state<sp/>section.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(game_and_rng_state.second.back()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>game_and_rng_state.second.pop_back();</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>game-&gt;SetRNGState(game_and_rng_state.second);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>game;</highlight></codeline>
<codeline lineno="225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227" refid="namespaceopen__spiel_1afd4ac299a038385def0ea56521067137" refkind="member"><highlight class="normal">std::shared_ptr&lt;const<sp/>Game&gt;<sp/><ref refid="namespaceopen__spiel_1afd4ac299a038385def0ea56521067137" kindref="member">LoadGame</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>game_string)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1afd4ac299a038385def0ea56521067137" kindref="member">LoadGame</ref>(<ref refid="namespaceopen__spiel_1ab52b8891e58c4d116690500440ca8f4c" kindref="member">GameParametersFromString</ref>(game_string));</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231" refid="namespaceopen__spiel_1a041180755b50ef57ca83e4ca9f3827b0" refkind="member"><highlight class="normal">std::shared_ptr&lt;const<sp/>Game&gt;<sp/><ref refid="namespaceopen__spiel_1afd4ac299a038385def0ea56521067137" kindref="member">LoadGame</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>short_name,</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1ad7c4d931669b5e357cb5c7f84a6de094" kindref="member">GameParameters</ref>&amp;<sp/>params)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;const<sp/>Game&gt;<sp/>result<sp/>=</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classopen__spiel_1_1_game_registerer_1a6e6f8091b1e3c521af50e71b0dce5717" kindref="member">GameRegisterer::CreateByName</ref>(short_name,<sp/>params);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(absl::StrCat(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>create<sp/>game:<sp/>&quot;</highlight><highlight class="normal">,<sp/>short_name));</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241" refid="namespaceopen__spiel_1ab464ff98519dd7819e7cd8fc30234716" refkind="member"><highlight class="normal">std::shared_ptr&lt;const<sp/>Game&gt;<sp/><ref refid="namespaceopen__spiel_1afd4ac299a038385def0ea56521067137" kindref="member">LoadGame</ref>(<ref refid="namespaceopen__spiel_1ad7c4d931669b5e357cb5c7f84a6de094" kindref="member">GameParameters</ref><sp/>params)<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>params.find(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>params.end())<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(absl::StrCat(</highlight><highlight class="stringliteral">&quot;No<sp/>&apos;name&apos;<sp/>parameter<sp/>in<sp/>params:<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1aa0832688fe92be988164cf8e87089ada" kindref="member">GameParametersToString</ref>(params)));</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>std::string<sp/>name<sp/>=<sp/>it-&gt;second.string_value();</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>params.erase(it);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;const<sp/>Game&gt;<sp/>result<sp/>=</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classopen__spiel_1_1_game_registerer_1a6e6f8091b1e3c521af50e71b0dce5717" kindref="member">GameRegisterer::CreateByName</ref>(name,<sp/>params);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(absl::StrCat(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>create<sp/>game:<sp/>&quot;</highlight><highlight class="normal">,<sp/>name));</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>LogUsage();</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258" refid="classopen__spiel_1_1_state_1a246bd5cf1da14d3ab69d479aea0edc03" refkind="member"><highlight class="normal"><ref refid="classopen__spiel_1_1_state_1a246bd5cf1da14d3ab69d479aea0edc03" kindref="member">State::State</ref>(std::shared_ptr&lt;const<sp/>Game&gt;<sp/>game)</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>game_(game),</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>num_distinct_actions_(game-&gt;NumDistinctActions()),</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>num_players_(game-&gt;NumPlayers()),</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>move_number_(0)<sp/>{}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264" refid="namespaceopen__spiel_1af4e1a06b98575bc24c84e635a12efec4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1af4e1a06b98575bc24c84e635a12efec4" kindref="member">NormalizePolicy</ref>(<ref refid="namespaceopen__spiel_1ac4ea6d9d7193ac74f6f333b954e3810f" kindref="member">ActionsAndProbs</ref>*<sp/>policy)<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>absl::c_accumulate(</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*policy,<sp/>0.0,<sp/>[](</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>+<sp/>b.second;<sp/>});</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>absl::c_for_each(*policy,<sp/>[sum](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>o)<sp/>{<sp/>o.second<sp/>/=<sp/>sum;<sp/>});</highlight></codeline>
<codeline lineno="268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270" refid="namespaceopen__spiel_1a5eb64a0ea2eb4de455fbb51e4824c65b" refkind="member"><highlight class="normal">std::pair&lt;Action,<sp/>double&gt;<sp/><ref refid="namespaceopen__spiel_1a5eb64a0ea2eb4de455fbb51e4824c65b" kindref="member">SampleAction</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1ac4ea6d9d7193ac74f6f333b954e3810f" kindref="member">ActionsAndProbs</ref>&amp;<sp/>outcomes,</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>absl::BitGenRef<sp/>rng)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1a5eb64a0ea2eb4de455fbb51e4824c65b" kindref="member">SampleAction</ref>(outcomes,<sp/>absl::Uniform(rng,<sp/>0.0,<sp/>1.0));</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274" refid="namespaceopen__spiel_1a4dccff40ce79f6186c72a0c0a4dc788e" refkind="member"><highlight class="normal">std::pair&lt;Action,<sp/>double&gt;<sp/><ref refid="namespaceopen__spiel_1a5eb64a0ea2eb4de455fbb51e4824c65b" kindref="member">SampleAction</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1ac4ea6d9d7193ac74f6f333b954e3810f" kindref="member">ActionsAndProbs</ref>&amp;<sp/>outcomes,</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><ref refid="spiel__utils_8h_1a5fa701f61bd5416434d72f3628e093b7" kindref="member">SPIEL_CHECK_GE</ref>(z,<sp/>0);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><ref refid="spiel__utils_8h_1ad9b10d8a52955f75371525c0f9f21b69" kindref="member">SPIEL_CHECK_LT</ref>(z,<sp/>1);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Special<sp/>case<sp/>for<sp/>one-item<sp/>lists.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outcomes.size()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="spiel__utils_8h_1a1d6eea934e8beba47b04b9b35176e563" kindref="member">SPIEL_CHECK_FLOAT_EQ</ref>(outcomes[0].second,<sp/>1.0);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>outcomes[0];</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>do<sp/>a<sp/>check<sp/>that<sp/>this<sp/>is<sp/>indeed<sp/>a<sp/>proper<sp/>discrete<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;Action,<sp/>double&gt;&amp;<sp/>outcome<sp/>:<sp/>outcomes)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>prob<sp/>=<sp/>outcome.second;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="spiel__utils_8h_1acd960ab500145e2ff90ef3c382803b32" kindref="member">SPIEL_CHECK_PROB</ref>(prob);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>prob;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><ref refid="spiel__utils_8h_1a1d6eea934e8beba47b04b9b35176e563" kindref="member">SPIEL_CHECK_FLOAT_EQ</ref>(sum,<sp/>1.0);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>sample<sp/>an<sp/>outcome.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;Action,<sp/>double&gt;&amp;<sp/>outcome<sp/>:<sp/>outcomes)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>prob<sp/>=<sp/>outcome.second;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sum<sp/>&lt;=<sp/>z<sp/>&amp;&amp;<sp/>z<sp/>&lt;<sp/>(sum<sp/>+<sp/>prob))<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>outcome;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>prob;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>get<sp/>here,<sp/>something<sp/>has<sp/>gone<sp/>wrong</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Chance<sp/>sampling<sp/>failed;<sp/>outcomes:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;Action,<sp/>double&gt;&amp;<sp/>outcome<sp/>:<sp/>outcomes)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>outcome.first<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>outcome.second<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>absl::StrCat(</highlight><highlight class="stringliteral">&quot;Internal<sp/>error:<sp/>failed<sp/>to<sp/>sample<sp/>an<sp/>outcome;<sp/>z=&quot;</highlight><highlight class="normal">,<sp/>z));</highlight></codeline>
<codeline lineno="311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313" refid="classopen__spiel_1_1_state_1a1a6bf403d6d8bcc41b36634a7fa8b1eb" refkind="member"><highlight class="normal">std::string<sp/><ref refid="classopen__spiel_1_1_state_1a1a6bf403d6d8bcc41b36634a7fa8b1eb" kindref="member">State::Serialize</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>simple<sp/>serialization<sp/>doesn&apos;t<sp/>work<sp/>for<sp/>the<sp/>following<sp/>games:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>games<sp/>with<sp/>sampled<sp/>chance<sp/>nodes,<sp/>since<sp/>the<sp/>history<sp/>doesn&apos;t<sp/>give<sp/>us<sp/>enough</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>information<sp/>to<sp/>reconstruct<sp/>the<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>Mean<sp/>field<sp/>games,<sp/>since<sp/>this<sp/>base<sp/>class<sp/>does<sp/>not<sp/>store<sp/>the<sp/>history<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>state<sp/>distributions<sp/>passed<sp/>in<sp/>UpdateDistribution()<sp/>(and<sp/>it<sp/>would<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>very<sp/>expensive<sp/>to<sp/>do<sp/>so<sp/>for<sp/>games<sp/>with<sp/>many<sp/>possible<sp/>states<sp/>and<sp/>a<sp/>long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>time<sp/>horizon).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>you<sp/>wish<sp/>to<sp/>serialize<sp/>states<sp/>in<sp/>such<sp/>games,<sp/>you<sp/>must<sp/>implement<sp/>custom</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>serialization<sp/>and<sp/>deserialization<sp/>for<sp/>the<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><ref refid="spiel__utils_8h_1a32ffad2dd43a12e9d7443bc75f456bbb" kindref="member">SPIEL_CHECK_NE</ref>(<ref refid="classopen__spiel_1_1_state_1a4aed0817448ce100d3f76a7529263e93" kindref="member">game_</ref>-&gt;GetType().chance_mode,</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structopen__spiel_1_1_game_type_1a1f22342e8a8c066323b49c0340a06d8ea39686673a19498ee90ed998e494c5bc7" kindref="member">GameType::ChanceMode::kSampledStochastic</ref>);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><ref refid="spiel__utils_8h_1a32ffad2dd43a12e9d7443bc75f456bbb" kindref="member">SPIEL_CHECK_NE</ref>(<ref refid="classopen__spiel_1_1_state_1a4aed0817448ce100d3f76a7529263e93" kindref="member">game_</ref>-&gt;GetType().dynamics,<sp/><ref refid="structopen__spiel_1_1_game_type_1a624349737f34cc67d0cf81fd7138c17ba6a40bb1d52ea6251e5ce3b9e7d3577bd" kindref="member">GameType::Dynamics::kMeanField</ref>);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>absl::StrCat(absl::StrJoin(<ref refid="classopen__spiel_1_1_state_1ad128b0fe37fa9439328ad27a7ba11cbd" kindref="member">History</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329" refid="classopen__spiel_1_1_state_1acbd1f66c9496f350693594ad38fc7907" refkind="member"><highlight class="normal"><ref refid="namespaceopen__spiel_1a8aa5fc5cff0ef466697b1df5cbfcbd3a" kindref="member">Action</ref><sp/><ref refid="classopen__spiel_1_1_state_1acbd1f66c9496f350693594ad38fc7907" kindref="member">State::StringToAction</ref>(<ref refid="namespaceopen__spiel_1a8e9bf6a040c687a9f0c8393728dc0121" kindref="member">Player</ref><sp/>player,</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>action_str)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1a8aa5fc5cff0ef466697b1df5cbfcbd3a" kindref="member">Action</ref><sp/>action<sp/>:<sp/><ref refid="classopen__spiel_1_1_state_1ae876a9b5f00331d660031568c4af13df" kindref="member">LegalActions</ref>())<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(action_str<sp/>==<sp/><ref refid="classopen__spiel_1_1_state_1a1eb002ef7abdaf3633d3438c59cc9477" kindref="member">ActionToString</ref>(player,<sp/>action))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>action;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>absl::StrCat(</highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>find<sp/>an<sp/>action<sp/>matching<sp/>&quot;</highlight><highlight class="normal">,<sp/>action_str));</highlight></codeline>
<codeline lineno="336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338" refid="classopen__spiel_1_1_state_1aafbfbb43035eddbb2d7aa2aeffeed825" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1aafbfbb43035eddbb2d7aa2aeffeed825" kindref="member">State::ApplyAction</ref>(<ref refid="namespaceopen__spiel_1a8aa5fc5cff0ef466697b1df5cbfcbd3a" kindref="member">Action</ref><sp/>action_id)<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>history_<sp/>needs<sp/>to<sp/>be<sp/>modified<sp/>*after*<sp/>DoApplyAction<sp/>which<sp/>could</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>using<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Cannot<sp/>apply<sp/>an<sp/>invalid<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><ref refid="spiel__utils_8h_1a32ffad2dd43a12e9d7443bc75f456bbb" kindref="member">SPIEL_CHECK_NE</ref>(action_id,<sp/><ref refid="namespaceopen__spiel_1adbc825960a0651d53f5d6423343fafae" kindref="member">kInvalidAction</ref>);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><ref refid="namespaceopen__spiel_1a8e9bf6a040c687a9f0c8393728dc0121" kindref="member">Player</ref><sp/>player<sp/>=<sp/><ref refid="classopen__spiel_1_1_state_1a229614eafbf9978cbc4109347e5f9efa" kindref="member">CurrentPlayer</ref>();</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><ref refid="classopen__spiel_1_1_state_1af2b72b90cb27986377e1867bb713f07d" kindref="member">DoApplyAction</ref>(action_id);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><ref refid="classopen__spiel_1_1_state_1aa121d1e77bb8a6219aeaec0b764a2e22" kindref="member">history_</ref>.push_back({player,<sp/>action_id});</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>++<ref refid="classopen__spiel_1_1_state_1a127ada084056b47d96839440dbbe3a2f" kindref="member">move_number_</ref>;</highlight></codeline>
<codeline lineno="348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350" refid="classopen__spiel_1_1_state_1a6fcd275fa47ab9d26a473321c60e0a95" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1a6fcd275fa47ab9d26a473321c60e0a95" kindref="member">State::ApplyActionWithLegalityCheck</ref>(<ref refid="namespaceopen__spiel_1a8aa5fc5cff0ef466697b1df5cbfcbd3a" kindref="member">Action</ref><sp/>action_id)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>std::vector&lt;Action&gt;<sp/>legal_actions<sp/>=<sp/><ref refid="classopen__spiel_1_1_state_1ae876a9b5f00331d660031568c4af13df" kindref="member">LegalActions</ref>();</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(absl::c_find(legal_actions,<sp/>action_id)<sp/>==<sp/>legal_actions.end())<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a8e9bf6a040c687a9f0c8393728dc0121" kindref="member">Player</ref><sp/>cur_player<sp/>=<sp/><ref refid="classopen__spiel_1_1_state_1a229614eafbf9978cbc4109347e5f9efa" kindref="member">CurrentPlayer</ref>();</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>absl::StrCat(</highlight><highlight class="stringliteral">&quot;Current<sp/>player<sp/>&quot;</highlight><highlight class="normal">,<sp/>cur_player,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>calling<sp/>ApplyAction<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;with<sp/>illegal<sp/>action<sp/>(&quot;</highlight><highlight class="normal">,<sp/>action_id,<sp/></highlight><highlight class="stringliteral">&quot;):<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classopen__spiel_1_1_state_1a1eb002ef7abdaf3633d3438c59cc9477" kindref="member">ActionToString</ref>(cur_player,<sp/>action_id)));</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><ref refid="classopen__spiel_1_1_state_1aafbfbb43035eddbb2d7aa2aeffeed825" kindref="member">ApplyAction</ref>(action_id);</highlight></codeline>
<codeline lineno="360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362" refid="classopen__spiel_1_1_state_1a18246f9ef0085ec8c93791e8127f0be1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1a18246f9ef0085ec8c93791e8127f0be1" kindref="member">State::ApplyActions</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Action&gt;&amp;<sp/>actions)<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>history_<sp/>needs<sp/>to<sp/>be<sp/>modified<sp/>*after*<sp/>DoApplyActions<sp/>which<sp/>could</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>using<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><ref refid="classopen__spiel_1_1_state_1aec9dc1eda262140e878bd4dcfedca13b" kindref="member">DoApplyActions</ref>(actions);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><ref refid="classopen__spiel_1_1_state_1aa121d1e77bb8a6219aeaec0b764a2e22" kindref="member">history_</ref>.reserve(<ref refid="classopen__spiel_1_1_state_1aa121d1e77bb8a6219aeaec0b764a2e22" kindref="member">history_</ref>.size()<sp/>+<sp/>actions.size());</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>player<sp/>=<sp/>0;<sp/>player<sp/>&lt;<sp/>actions.size();<sp/>++player)<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classopen__spiel_1_1_state_1aa121d1e77bb8a6219aeaec0b764a2e22" kindref="member">history_</ref>.push_back({player,<sp/>actions[player]});</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>++<ref refid="classopen__spiel_1_1_state_1a127ada084056b47d96839440dbbe3a2f" kindref="member">move_number_</ref>;</highlight></codeline>
<codeline lineno="371"><highlight class="normal">}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373" refid="classopen__spiel_1_1_state_1a479150baad280f0f236d2cced41ddc13" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1a479150baad280f0f236d2cced41ddc13" kindref="member">State::ApplyActionsWithLegalityChecks</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Action&gt;&amp;<sp/>actions)<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="namespaceopen__spiel_1a8e9bf6a040c687a9f0c8393728dc0121" kindref="member">Player</ref><sp/>player<sp/>=<sp/>0;<sp/>player<sp/>&lt;<sp/>actions.size();<sp/>++player)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Action&gt;<sp/>legal_actions<sp/>=<sp/><ref refid="classopen__spiel_1_1_state_1ae876a9b5f00331d660031568c4af13df" kindref="member">LegalActions</ref>(player);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!legal_actions.empty()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>absl::c_find(legal_actions,<sp/>actions[player])<sp/>==<sp/>legal_actions.end())<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>absl::StrCat(</highlight><highlight class="stringliteral">&quot;Player<sp/>&quot;</highlight><highlight class="normal">,<sp/>player,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>calling<sp/>ApplyAction<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;with<sp/>illegal<sp/>action<sp/>(&quot;</highlight><highlight class="normal">,<sp/>actions[player],<sp/></highlight><highlight class="stringliteral">&quot;):<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classopen__spiel_1_1_state_1a1eb002ef7abdaf3633d3438c59cc9477" kindref="member">ActionToString</ref>(player,<sp/>actions[player])));</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><ref refid="classopen__spiel_1_1_state_1a18246f9ef0085ec8c93791e8127f0be1" kindref="member">ApplyActions</ref>(actions);</highlight></codeline>
<codeline lineno="385"><highlight class="normal">}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387" refid="classopen__spiel_1_1_state_1ac024b6c48d8b99a2004532362484efe3" refkind="member"><highlight class="normal">std::vector&lt;int&gt;<sp/><ref refid="classopen__spiel_1_1_state_1a4f481e63a08d15a060bc35d8ad6e448c" kindref="member">State::LegalActionsMask</ref>(<ref refid="namespaceopen__spiel_1a8e9bf6a040c687a9f0c8393728dc0121" kindref="member">Player</ref><sp/>player)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>(player<sp/>==<sp/><ref refid="namespaceopen__spiel_1a5677cc0bb3f0c3d54e59c5df948718d6a4519a0153efaba2f86929f7e018082fb" kindref="member">kChancePlayerId</ref>)<sp/>?<sp/><ref refid="classopen__spiel_1_1_state_1a4aed0817448ce100d3f76a7529263e93" kindref="member">game_</ref>-&gt;MaxChanceOutcomes()</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classopen__spiel_1_1_state_1a3a374a3e9cbc2993efec3ae375fb1e93" kindref="member">num_distinct_actions_</ref>;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>mask(length,<sp/>0);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>action<sp/>:<sp/><ref refid="classopen__spiel_1_1_state_1ae876a9b5f00331d660031568c4af13df" kindref="member">LegalActions</ref>(player))<sp/>mask[action]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mask;</highlight></codeline>
<codeline lineno="393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395" refid="classopen__spiel_1_1_game_1acbc718240c9580d8dbfe5e8ef0282d92" refkind="member"><highlight class="normal">std::vector&lt;std::unique_ptr&lt;State&gt;&gt;<sp/><ref refid="classopen__spiel_1_1_game_1acbc718240c9580d8dbfe5e8ef0282d92" kindref="member">Game::NewInitialStates</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>std::vector&lt;std::unique_ptr&lt;State&gt;&gt;<sp/>states;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classopen__spiel_1_1_game_1ab43a710b19e2cebf48ceaeccd3c8961f" kindref="member">GetType</ref>().dynamics<sp/>==<sp/><ref refid="structopen__spiel_1_1_game_type_1a624349737f34cc67d0cf81fd7138c17ba6a40bb1d52ea6251e5ce3b9e7d3577bd" kindref="member">GameType::Dynamics::kMeanField</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classopen__spiel_1_1_game_1ade22718c6a0360525840cb7f7c68cab0" kindref="member">NumPlayers</ref>()<sp/>&gt;=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>states.reserve(<ref refid="classopen__spiel_1_1_game_1ade22718c6a0360525840cb7f7c68cab0" kindref="member">NumPlayers</ref>());</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>0;<sp/>p<sp/>&lt;<sp/><ref refid="classopen__spiel_1_1_game_1ade22718c6a0360525840cb7f7c68cab0" kindref="member">NumPlayers</ref>();<sp/>++p)<sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>states.push_back(<ref refid="classopen__spiel_1_1_game_1ac46c5cfeeb05478188b382fa4d182efd" kindref="member">NewInitialStateForPopulation</ref>(p));</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>states;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>states.push_back(<ref refid="classopen__spiel_1_1_game_1a5696835fab2961be5e2a0a08e36999a5" kindref="member">NewInitialState</ref>());</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>states;</highlight></codeline>
<codeline lineno="407"><highlight class="normal">}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409" refid="classopen__spiel_1_1_game_1a4a0e6b899dc09f73c4251f07a823f592" refkind="member"><highlight class="normal">std::unique_ptr&lt;State&gt;<sp/><ref refid="classopen__spiel_1_1_game_1a4a0e6b899dc09f73c4251f07a823f592" kindref="member">Game::DeserializeState</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>str)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>does<sp/>not<sp/>work<sp/>for<sp/>games<sp/>with<sp/>sampled<sp/>chance<sp/>nodes<sp/>and<sp/>for<sp/>mean<sp/>field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>games.<sp/>See<sp/>comments<sp/>in<sp/>State::Serialize()<sp/>for<sp/>the<sp/>explanation.<sp/>If<sp/>you<sp/>wish</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>to<sp/>serialize<sp/>states<sp/>in<sp/>such<sp/>games,<sp/>you<sp/>must<sp/>implement<sp/>custom<sp/>serialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>and<sp/>deserialization<sp/>for<sp/>the<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><ref refid="spiel__utils_8h_1a32ffad2dd43a12e9d7443bc75f456bbb" kindref="member">SPIEL_CHECK_NE</ref>(<ref refid="classopen__spiel_1_1_game_1a40968ba04914278a389265b7063aac3f" kindref="member">game_type_</ref>.<ref refid="structopen__spiel_1_1_game_type_1a7a1a6c9e079e58933da6b62c4d04279e" kindref="member">chance_mode</ref>,</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structopen__spiel_1_1_game_type_1a1f22342e8a8c066323b49c0340a06d8ea39686673a19498ee90ed998e494c5bc7" kindref="member">GameType::ChanceMode::kSampledStochastic</ref>);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><ref refid="spiel__utils_8h_1a32ffad2dd43a12e9d7443bc75f456bbb" kindref="member">SPIEL_CHECK_NE</ref>(<ref refid="classopen__spiel_1_1_game_1a40968ba04914278a389265b7063aac3f" kindref="member">game_type_</ref>.<ref refid="structopen__spiel_1_1_game_type_1ac1176bf5ed045dc24fb4b113af2750b8" kindref="member">dynamics</ref>,</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structopen__spiel_1_1_game_type_1a624349737f34cc67d0cf81fd7138c17ba6a40bb1d52ea6251e5ce3b9e7d3577bd" kindref="member">GameType::Dynamics::kMeanField</ref>);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;State&gt;<sp/>state<sp/>=<sp/><ref refid="classopen__spiel_1_1_game_1a5696835fab2961be5e2a0a08e36999a5" kindref="member">NewInitialState</ref>();</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str.empty())<sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>lines<sp/>=<sp/>absl::StrSplit(str,<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lines.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lines[i].empty())<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;IsSimultaneousNode())<sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Action&gt;<sp/>actions;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>0;<sp/>p<sp/>&lt;<sp/>state-&gt;NumPlayers();<sp/>++p,<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="spiel__utils_8h_1ad9b10d8a52955f75371525c0f9f21b69" kindref="member">SPIEL_CHECK_LT</ref>(i,<sp/>lines.size());</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a8aa5fc5cff0ef466697b1df5cbfcbd3a" kindref="member">Action</ref><sp/>action<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="namespaceopen__spiel_1a8aa5fc5cff0ef466697b1df5cbfcbd3a" kindref="member">Action</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::stol(lines[i]));</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actions.push_back(action);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;ApplyActions(actions);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Must<sp/>decrement<sp/>i<sp/>here,<sp/>otherwise<sp/>it<sp/>is<sp/>incremented<sp/>too<sp/>many<sp/>times.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--i;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a8aa5fc5cff0ef466697b1df5cbfcbd3a" kindref="member">Action</ref><sp/>action<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="namespaceopen__spiel_1a8aa5fc5cff0ef466697b1df5cbfcbd3a" kindref="member">Action</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::stol(lines[i]));</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;ApplyAction(action);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state;</highlight></codeline>
<codeline lineno="442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444" refid="namespaceopen__spiel_1a8c5224bc6b99621bd7c32c04dc9ddafa" refkind="member"><highlight class="normal">std::string<sp/><ref refid="namespaceopen__spiel_1a8c5224bc6b99621bd7c32c04dc9ddafa" kindref="member">SerializeGameAndState</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_game" kindref="compound">Game</ref>&amp;<sp/>game,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state" kindref="compound">State</ref>&amp;<sp/>state)<sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>std::string<sp/>str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Meta<sp/>section.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>absl::StrAppend(&amp;str,</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Automatically<sp/>generated<sp/>by<sp/>OpenSpiel<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;SerializeGameAndState\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>absl::StrAppend(&amp;str,<sp/>kSerializeMetaSectionHeader,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>absl::StrAppend(&amp;str,<sp/></highlight><highlight class="stringliteral">&quot;Version:<sp/>&quot;</highlight><highlight class="normal">,<sp/>kSerializationVersion,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>absl::StrAppend(&amp;str,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Game<sp/>section.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>absl::StrAppend(&amp;str,<sp/>kSerializeGameSectionHeader,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>absl::StrAppend(&amp;str,<sp/>game.<ref refid="classopen__spiel_1_1_game_1a21a64ae854cebf2185bbc7aa1c8348f1" kindref="member">Serialize</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>State<sp/>section.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>absl::StrAppend(&amp;str,<sp/>kSerializeStateSectionHeader,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>absl::StrAppend(&amp;str,<sp/>state.Serialize(),<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="464"><highlight class="normal">}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal">std::pair&lt;std::shared_ptr&lt;const<sp/>Game&gt;,<sp/>std::unique_ptr&lt;State&gt;&gt;</highlight></codeline>
<codeline lineno="467" refid="namespaceopen__spiel_1a523877157f33ec65d5c05fe6eb0cfb9e" refkind="member"><highlight class="normal"><ref refid="namespaceopen__spiel_1a523877157f33ec65d5c05fe6eb0cfb9e" kindref="member">DeserializeGameAndState</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>serialized_state)<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>lines<sp/>=<sp/>absl::StrSplit(serialized_state,<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>Section<sp/>{<sp/>kInvalid<sp/>=<sp/>-1,<sp/>kMeta<sp/>=<sp/>0,<sp/>kGame<sp/>=<sp/>1,<sp/>kState<sp/>=<sp/>2<sp/>};</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>section_strings<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>Section<sp/>cur_section<sp/>=<sp/>kInvalid;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lines.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lines[i].empty()<sp/>||<sp/>lines[i].at(0)<sp/>==<sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Skip<sp/>comments<sp/>and<sp/>blank<sp/>lines.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lines[i]<sp/>==<sp/>kSerializeMetaSectionHeader)<sp/>{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="spiel__utils_8h_1abcb08ef83297cd8a69ac67d47cfa5da2" kindref="member">SPIEL_CHECK_EQ</ref>(cur_section,<sp/>kInvalid);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cur_section<sp/>=<sp/>kMeta;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lines[i]<sp/>==<sp/>kSerializeGameSectionHeader)<sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="spiel__utils_8h_1abcb08ef83297cd8a69ac67d47cfa5da2" kindref="member">SPIEL_CHECK_EQ</ref>(cur_section,<sp/>kMeta);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cur_section<sp/>=<sp/>kGame;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lines[i]<sp/>==<sp/>kSerializeStateSectionHeader)<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="spiel__utils_8h_1abcb08ef83297cd8a69ac67d47cfa5da2" kindref="member">SPIEL_CHECK_EQ</ref>(cur_section,<sp/>kGame);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cur_section<sp/>=<sp/>kState;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="spiel__utils_8h_1a32ffad2dd43a12e9d7443bc75f456bbb" kindref="member">SPIEL_CHECK_NE</ref>(cur_section,<sp/>kInvalid);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>absl::StrAppend(&amp;section_strings[cur_section],<sp/>lines[i],<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>the<sp/>trailing<sp/>&quot;\n&quot;<sp/>from<sp/>the<sp/>game<sp/>and<sp/>state<sp/>sections.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!section_strings[kGame].empty()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>section_strings[kGame].back()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>section_strings[kGame].pop_back();</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!section_strings[kState].empty()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>section_strings[kState].back()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>section_strings[kState].pop_back();</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>currently<sp/>just<sp/>ignore<sp/>the<sp/>meta<sp/>section.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;const<sp/>Game&gt;<sp/>game<sp/>=<sp/><ref refid="namespaceopen__spiel_1a46be5ac78a1c87daeef36b4b8dd67c3c" kindref="member">DeserializeGame</ref>(section_strings[kGame]);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;State&gt;<sp/>state<sp/>=</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>game-&gt;DeserializeState(section_strings[kState]);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::pair&lt;std::shared_ptr&lt;const<sp/>Game&gt;,<sp/>std::unique_ptr&lt;State&gt;&gt;(</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>game,<sp/>std::move(state));</highlight></codeline>
<codeline lineno="509"><highlight class="normal">}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511" refid="namespaceopen__spiel_1a1a2aa35ae5d7abab25a617359900db1f" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="namespaceopen__spiel_1a7a4f3573ff9d467ce5c64eecbe5ea8b9" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>stream,<sp/><ref refid="structopen__spiel_1_1_game_type_1a624349737f34cc67d0cf81fd7138c17b" kindref="member">GameType::Dynamics</ref><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(value)<sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_type_1a624349737f34cc67d0cf81fd7138c17ba0ffc281e20028439b1995e0fa983ffcb" kindref="member">GameType::Dynamics::kSimultaneous</ref>:</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Simultaneous&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_type_1a624349737f34cc67d0cf81fd7138c17baeb609b99f542b955302693c0f445ba0c" kindref="member">GameType::Dynamics::kSequential</ref>:</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Sequential&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_type_1a624349737f34cc67d0cf81fd7138c17ba6a40bb1d52ea6251e5ce3b9e7d3577bd" kindref="member">GameType::Dynamics::kMeanField</ref>:</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;MeanField&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(absl::StrCat(</highlight><highlight class="stringliteral">&quot;Unknown<sp/>dynamics:<sp/>&quot;</highlight><highlight class="normal">,<sp/>value));</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524" refid="namespaceopen__spiel_1a72910c80f8d652c30546d1157f267248" refkind="member"><highlight class="normal">std::istream&amp;<sp/><ref refid="namespaceopen__spiel_1a72910c80f8d652c30546d1157f267248" kindref="member">operator&gt;&gt;</ref>(std::istream&amp;<sp/>stream,<sp/><ref refid="structopen__spiel_1_1_game_type_1a624349737f34cc67d0cf81fd7138c17b" kindref="member">GameType::Dynamics</ref>&amp;<sp/>var)<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>std::string<sp/>str;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>stream<sp/>&gt;&gt;<sp/>str;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Simultaneous&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>=<sp/><ref refid="structopen__spiel_1_1_game_type_1a624349737f34cc67d0cf81fd7138c17ba0ffc281e20028439b1995e0fa983ffcb" kindref="member">GameType::Dynamics::kSimultaneous</ref>;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Sequential&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>=<sp/><ref refid="structopen__spiel_1_1_game_type_1a624349737f34cc67d0cf81fd7138c17baeb609b99f542b955302693c0f445ba0c" kindref="member">GameType::Dynamics::kSequential</ref>;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;MeanField&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>=<sp/><ref refid="structopen__spiel_1_1_game_type_1a624349737f34cc67d0cf81fd7138c17ba6a40bb1d52ea6251e5ce3b9e7d3577bd" kindref="member">GameType::Dynamics::kMeanField</ref>;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(absl::StrCat(</highlight><highlight class="stringliteral">&quot;Unknown<sp/>dynamics<sp/>&quot;</highlight><highlight class="normal">,<sp/>str,<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="537"><highlight class="normal">}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539" refid="namespaceopen__spiel_1a244719d0f18bf3dd71a9a050c01b2f43" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="namespaceopen__spiel_1a7a4f3573ff9d467ce5c64eecbe5ea8b9" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>stream,<sp/><ref refid="structopen__spiel_1_1_game_type_1a1f22342e8a8c066323b49c0340a06d8e" kindref="member">GameType::ChanceMode</ref><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(value)<sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_type_1a1f22342e8a8c066323b49c0340a06d8eab1ebb5017b01aead05321c8dd2107ab0" kindref="member">GameType::ChanceMode::kDeterministic</ref>:</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Deterministic&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_type_1a1f22342e8a8c066323b49c0340a06d8ea10b2b50f4692475e7972d0dd6b73694b" kindref="member">GameType::ChanceMode::kExplicitStochastic</ref>:</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ExplicitStochastic&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_type_1a1f22342e8a8c066323b49c0340a06d8ea39686673a19498ee90ed998e494c5bc7" kindref="member">GameType::ChanceMode::kSampledStochastic</ref>:</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;SampledStochastic&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(</highlight><highlight class="stringliteral">&quot;Unknown<sp/>mode.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="550"><highlight class="normal">}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552" refid="namespaceopen__spiel_1a6360dc41bdbd0a0c44f41055de815f7b" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="namespaceopen__spiel_1a7a4f3573ff9d467ce5c64eecbe5ea8b9" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state" kindref="compound">State</ref>&amp;<sp/>state)<sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream<sp/>&lt;&lt;<sp/>state.ToString();</highlight></codeline>
<codeline lineno="554"><highlight class="normal">}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556" refid="namespaceopen__spiel_1abf9e3bde94e120dee9ef024ea854a1ef" refkind="member"><highlight class="normal">std::istream&amp;<sp/><ref refid="namespaceopen__spiel_1a72910c80f8d652c30546d1157f267248" kindref="member">operator&gt;&gt;</ref>(std::istream&amp;<sp/>stream,<sp/><ref refid="structopen__spiel_1_1_game_type_1a1f22342e8a8c066323b49c0340a06d8e" kindref="member">GameType::ChanceMode</ref>&amp;<sp/>var)<sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/>std::string<sp/>str;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/>stream<sp/>&gt;&gt;<sp/>str;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Deterministic&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>=<sp/><ref refid="structopen__spiel_1_1_game_type_1a1f22342e8a8c066323b49c0340a06d8eab1ebb5017b01aead05321c8dd2107ab0" kindref="member">GameType::ChanceMode::kDeterministic</ref>;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;ExplicitStochastic&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>=<sp/><ref refid="structopen__spiel_1_1_game_type_1a1f22342e8a8c066323b49c0340a06d8ea10b2b50f4692475e7972d0dd6b73694b" kindref="member">GameType::ChanceMode::kExplicitStochastic</ref>;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;SampledStochastic&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>=<sp/><ref refid="structopen__spiel_1_1_game_type_1a1f22342e8a8c066323b49c0340a06d8ea39686673a19498ee90ed998e494c5bc7" kindref="member">GameType::ChanceMode::kSampledStochastic</ref>;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(absl::StrCat(</highlight><highlight class="stringliteral">&quot;Unknown<sp/>chance<sp/>mode<sp/>&quot;</highlight><highlight class="normal">,<sp/>str,<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571" refid="namespaceopen__spiel_1a12e701d9ce3203e9de0acfc6d00266b1" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="namespaceopen__spiel_1a7a4f3573ff9d467ce5c64eecbe5ea8b9" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>stream,<sp/><ref refid="structopen__spiel_1_1_game_type_1a0b4230b668f857b0815bd55f11b522ae" kindref="member">GameType::Information</ref><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(value)<sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_type_1a0b4230b668f857b0815bd55f11b522aea21e6a5b3710e0b13334d892e2b8a4be3" kindref="member">GameType::Information::kOneShot</ref>:</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;OneShot&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_type_1a0b4230b668f857b0815bd55f11b522aeacd60620d6401b630c39d1af12e6d701a" kindref="member">GameType::Information::kPerfectInformation</ref>:</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;PerfectInformation&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_type_1a0b4230b668f857b0815bd55f11b522aeac9856f08bbc3ba2427a640b6bfdcb9f1" kindref="member">GameType::Information::kImperfectInformation</ref>:</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ImperfectInformation&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(</highlight><highlight class="stringliteral">&quot;Unknown<sp/>value.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="582"><highlight class="normal">}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584" refid="namespaceopen__spiel_1a0d925ee0330bff28ef0e80bd074619b0" refkind="member"><highlight class="normal">std::istream&amp;<sp/><ref refid="namespaceopen__spiel_1a72910c80f8d652c30546d1157f267248" kindref="member">operator&gt;&gt;</ref>(std::istream&amp;<sp/>stream,<sp/><ref refid="structopen__spiel_1_1_game_type_1a0b4230b668f857b0815bd55f11b522ae" kindref="member">GameType::Information</ref>&amp;<sp/>var)<sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>std::string<sp/>str;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>stream<sp/>&gt;&gt;<sp/>str;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;OneShot&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>=<sp/><ref refid="structopen__spiel_1_1_game_type_1a0b4230b668f857b0815bd55f11b522aea21e6a5b3710e0b13334d892e2b8a4be3" kindref="member">GameType::Information::kOneShot</ref>;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;PerfectInformation&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>=<sp/><ref refid="structopen__spiel_1_1_game_type_1a0b4230b668f857b0815bd55f11b522aeacd60620d6401b630c39d1af12e6d701a" kindref="member">GameType::Information::kPerfectInformation</ref>;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;ImperfectInformation&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>=<sp/><ref refid="structopen__spiel_1_1_game_type_1a0b4230b668f857b0815bd55f11b522aeac9856f08bbc3ba2427a640b6bfdcb9f1" kindref="member">GameType::Information::kImperfectInformation</ref>;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(absl::StrCat(</highlight><highlight class="stringliteral">&quot;Unknown<sp/>information<sp/>&quot;</highlight><highlight class="normal">,<sp/>str,<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="597"><highlight class="normal">}</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599" refid="namespaceopen__spiel_1a37646bb5adaf51428409c128b77db425" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="namespaceopen__spiel_1a7a4f3573ff9d467ce5c64eecbe5ea8b9" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>stream,<sp/><ref refid="structopen__spiel_1_1_game_type_1a1ac5c4948c36c41709023b391bb58ef3" kindref="member">GameType::Utility</ref><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(value)<sp/>{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_type_1a1ac5c4948c36c41709023b391bb58ef3a1cf995c896f7178e2472254ada88096f" kindref="member">GameType::Utility::kZeroSum</ref>:</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ZeroSum&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_type_1a1ac5c4948c36c41709023b391bb58ef3a6a09f3b5a2bec5deeb985ff0c06067b5" kindref="member">GameType::Utility::kConstantSum</ref>:</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ConstantSum&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_type_1a1ac5c4948c36c41709023b391bb58ef3a986cbc0a359db75471832f86381b190e" kindref="member">GameType::Utility::kGeneralSum</ref>:</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;GeneralSum&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_type_1a1ac5c4948c36c41709023b391bb58ef3a2addd5cc0adb04673609d0c5475e022e" kindref="member">GameType::Utility::kIdentical</ref>:</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Identical&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(</highlight><highlight class="stringliteral">&quot;Unknown<sp/>value.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal">}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614" refid="namespaceopen__spiel_1a62a174de78bb7c3ef9de89024f471af0" refkind="member"><highlight class="normal">std::istream&amp;<sp/><ref refid="namespaceopen__spiel_1a72910c80f8d652c30546d1157f267248" kindref="member">operator&gt;&gt;</ref>(std::istream&amp;<sp/>stream,<sp/><ref refid="structopen__spiel_1_1_game_type_1a1ac5c4948c36c41709023b391bb58ef3" kindref="member">GameType::Utility</ref>&amp;<sp/>var)<sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/>std::string<sp/>str;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>stream<sp/>&gt;&gt;<sp/>str;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;ZeroSum&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>=<sp/><ref refid="structopen__spiel_1_1_game_type_1a1ac5c4948c36c41709023b391bb58ef3a1cf995c896f7178e2472254ada88096f" kindref="member">GameType::Utility::kZeroSum</ref>;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;ConstantSum&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>=<sp/><ref refid="structopen__spiel_1_1_game_type_1a1ac5c4948c36c41709023b391bb58ef3a6a09f3b5a2bec5deeb985ff0c06067b5" kindref="member">GameType::Utility::kConstantSum</ref>;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;GeneralSum&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>=<sp/><ref refid="structopen__spiel_1_1_game_type_1a1ac5c4948c36c41709023b391bb58ef3a986cbc0a359db75471832f86381b190e" kindref="member">GameType::Utility::kGeneralSum</ref>;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Identical&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>=<sp/><ref refid="structopen__spiel_1_1_game_type_1a1ac5c4948c36c41709023b391bb58ef3a2addd5cc0adb04673609d0c5475e022e" kindref="member">GameType::Utility::kIdentical</ref>;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(absl::StrCat(</highlight><highlight class="stringliteral">&quot;Unknown<sp/>utility<sp/>&quot;</highlight><highlight class="normal">,<sp/>str,<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="629"><highlight class="normal">}</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631" refid="namespaceopen__spiel_1af5c94daedba1dff4ad35c98e409bce79" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="namespaceopen__spiel_1a7a4f3573ff9d467ce5c64eecbe5ea8b9" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>stream,<sp/><ref refid="structopen__spiel_1_1_game_type_1a5a5f739de73ade6cfe6961fd4a2f41a5" kindref="member">GameType::RewardModel</ref><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(value)<sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_type_1a5a5f739de73ade6cfe6961fd4a2f41a5a5feb2f9f9be894b60ede74a61a0f27f5" kindref="member">GameType::RewardModel::kRewards</ref>:</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Rewards&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_type_1a5a5f739de73ade6cfe6961fd4a2f41a5a217dd2f6ef26065693bb5043fce241ea" kindref="member">GameType::RewardModel::kTerminal</ref>:</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Terminal&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(</highlight><highlight class="stringliteral">&quot;Unknown<sp/>value.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="640"><highlight class="normal">}</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642" refid="namespaceopen__spiel_1ade7f49ebc7e29de2107b5f48fcad505d" refkind="member"><highlight class="normal">std::istream&amp;<sp/><ref refid="namespaceopen__spiel_1a72910c80f8d652c30546d1157f267248" kindref="member">operator&gt;&gt;</ref>(std::istream&amp;<sp/>stream,<sp/><ref refid="structopen__spiel_1_1_game_type_1a5a5f739de73ade6cfe6961fd4a2f41a5" kindref="member">GameType::RewardModel</ref>&amp;<sp/>var)<sp/>{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/>std::string<sp/>str;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>stream<sp/>&gt;&gt;<sp/>str;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Rewards&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>=<sp/><ref refid="structopen__spiel_1_1_game_type_1a5a5f739de73ade6cfe6961fd4a2f41a5a5feb2f9f9be894b60ede74a61a0f27f5" kindref="member">GameType::RewardModel::kRewards</ref>;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Terminal&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>=<sp/><ref refid="structopen__spiel_1_1_game_type_1a5a5f739de73ade6cfe6961fd4a2f41a5a217dd2f6ef26065693bb5043fce241ea" kindref="member">GameType::RewardModel::kTerminal</ref>;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(absl::StrCat(</highlight><highlight class="stringliteral">&quot;Unknown<sp/>reward<sp/>model<sp/>&quot;</highlight><highlight class="normal">,<sp/>str,<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stream;</highlight></codeline>
<codeline lineno="653"><highlight class="normal">}</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655" refid="classopen__spiel_1_1_game_1a21a64ae854cebf2185bbc7aa1c8348f1" refkind="member"><highlight class="normal">std::string<sp/><ref refid="classopen__spiel_1_1_game_1a21a64ae854cebf2185bbc7aa1c8348f1" kindref="member">Game::Serialize</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/>std::string<sp/>str<sp/>=<sp/><ref refid="classopen__spiel_1_1_game_1a1961953c180729dc203b777850f07319" kindref="member">ToString</ref>();</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classopen__spiel_1_1_game_1ab43a710b19e2cebf48ceaeccd3c8961f" kindref="member">GetType</ref>().chance_mode<sp/>==<sp/><ref refid="structopen__spiel_1_1_game_type_1a1f22342e8a8c066323b49c0340a06d8ea39686673a19498ee90ed998e494c5bc7" kindref="member">GameType::ChanceMode::kSampledStochastic</ref>)<sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>absl::StrAppend(&amp;str,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">,<sp/>kSerializeGameRNGStateSectionHeader,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classopen__spiel_1_1_game_1ad8e566fa7343c252e2895a46ef6cdd31" kindref="member">GetRNGState</ref>());</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="662"><highlight class="normal">}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664" refid="classopen__spiel_1_1_game_1a1961953c180729dc203b777850f07319" refkind="member"><highlight class="normal">std::string<sp/><ref refid="classopen__spiel_1_1_game_1a1961953c180729dc203b777850f07319" kindref="member">Game::ToString</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><ref refid="namespaceopen__spiel_1ad7c4d931669b5e357cb5c7f84a6de094" kindref="member">GameParameters</ref><sp/>params<sp/>=<sp/><ref refid="classopen__spiel_1_1_game_1aa0256cac5f169b067d69c0b5cb82b8b4" kindref="member">game_parameters_</ref>;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>params[</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">]<sp/>=<sp/><ref refid="classopen__spiel_1_1_game_parameter" kindref="compound">GameParameter</ref>(<ref refid="classopen__spiel_1_1_game_1a40968ba04914278a389265b7063aac3f" kindref="member">game_type_</ref>.<ref refid="structopen__spiel_1_1_game_type_1a7dc97c2b88971ea7c5180d3c2fe29cf1" kindref="member">short_name</ref>);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1aa0832688fe92be988164cf8e87089ada" kindref="member">GameParametersToString</ref>(params);</highlight></codeline>
<codeline lineno="668"><highlight class="normal">}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670" refid="namespaceopen__spiel_1ad0ffb6361129cb7a813fc9b9afbf8bac" refkind="member"><highlight class="normal">std::string<sp/><ref refid="namespaceopen__spiel_1ad0ffb6361129cb7a813fc9b9afbf8bac" kindref="member">GameTypeToString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_type" kindref="compound">GameType</ref>&amp;<sp/>game_type)<sp/>{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/>std::string<sp/>str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>absl::StrAppend(&amp;str,<sp/></highlight><highlight class="stringliteral">&quot;short_name:<sp/>&quot;</highlight><highlight class="normal">,<sp/>game_type.<ref refid="structopen__spiel_1_1_game_type_1a7dc97c2b88971ea7c5180d3c2fe29cf1" kindref="member">short_name</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/>absl::StrAppend(&amp;str,<sp/></highlight><highlight class="stringliteral">&quot;long_name:<sp/>&quot;</highlight><highlight class="normal">,<sp/>game_type.<ref refid="structopen__spiel_1_1_game_type_1a89c154ac202bd4a659b9e4ea3d28ebbb" kindref="member">long_name</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/>absl::StrAppend(&amp;str,<sp/></highlight><highlight class="stringliteral">&quot;dynamics:<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1_1internal_1a8bcbdcb0a975ffcdf757709e755ab92e" kindref="member">open_spiel::internal::SpielStrCat</ref>(game_type.<ref refid="structopen__spiel_1_1_game_type_1ac1176bf5ed045dc24fb4b113af2750b8" kindref="member">dynamics</ref>),<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/>absl::StrAppend(&amp;str,<sp/></highlight><highlight class="stringliteral">&quot;chance_mode:<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1_1internal_1a8bcbdcb0a975ffcdf757709e755ab92e" kindref="member">open_spiel::internal::SpielStrCat</ref>(game_type.<ref refid="structopen__spiel_1_1_game_type_1a7a1a6c9e079e58933da6b62c4d04279e" kindref="member">chance_mode</ref>),</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/>absl::StrAppend(&amp;str,<sp/></highlight><highlight class="stringliteral">&quot;information:<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1_1internal_1a8bcbdcb0a975ffcdf757709e755ab92e" kindref="member">open_spiel::internal::SpielStrCat</ref>(game_type.<ref refid="structopen__spiel_1_1_game_type_1a99e4ce5d58635d108e99367a5d12f589" kindref="member">information</ref>),</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/>absl::StrAppend(&amp;str,<sp/></highlight><highlight class="stringliteral">&quot;utility:<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1_1internal_1a8bcbdcb0a975ffcdf757709e755ab92e" kindref="member">open_spiel::internal::SpielStrCat</ref>(game_type.<ref refid="structopen__spiel_1_1_game_type_1a97241a4820868fc48068e6585ab142a6" kindref="member">utility</ref>),<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/>absl::StrAppend(&amp;str,<sp/></highlight><highlight class="stringliteral">&quot;reward_model:<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1_1internal_1a8bcbdcb0a975ffcdf757709e755ab92e" kindref="member">open_spiel::internal::SpielStrCat</ref>(game_type.<ref refid="structopen__spiel_1_1_game_type_1aa72d7337710404c4a4c85cad77ad9992" kindref="member">reward_model</ref>),</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/>absl::StrAppend(&amp;str,<sp/></highlight><highlight class="stringliteral">&quot;max_num_players:<sp/>&quot;</highlight><highlight class="normal">,<sp/>game_type.<ref refid="structopen__spiel_1_1_game_type_1acb7c9c12c353ccb42a4273e026bd61cf" kindref="member">max_num_players</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/>absl::StrAppend(&amp;str,<sp/></highlight><highlight class="stringliteral">&quot;min_num_players:<sp/>&quot;</highlight><highlight class="normal">,<sp/>game_type.<ref refid="structopen__spiel_1_1_game_type_1a8156a1d7578c71dd5425d6b22c171611" kindref="member">min_num_players</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/>absl::StrAppend(</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;str,<sp/></highlight><highlight class="stringliteral">&quot;provides_information_state_string:<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>game_type.<ref refid="structopen__spiel_1_1_game_type_1a909f5d7264115920cd4e63527fa80bc3" kindref="member">provides_information_state_string</ref><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/>absl::StrAppend(</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;str,<sp/></highlight><highlight class="stringliteral">&quot;provides_information_state_tensor:<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>game_type.<ref refid="structopen__spiel_1_1_game_type_1a0e75001913b46cb55660c87ff67ec72b" kindref="member">provides_information_state_tensor</ref><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/>absl::StrAppend(&amp;str,<sp/></highlight><highlight class="stringliteral">&quot;provides_observation_string:<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>game_type.<ref refid="structopen__spiel_1_1_game_type_1aefe22999e3f3866dfac4512fefa09259" kindref="member">provides_observation_string</ref><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>absl::StrAppend(&amp;str,<sp/></highlight><highlight class="stringliteral">&quot;provides_observation_tensor:<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>game_type.<ref refid="structopen__spiel_1_1_game_type_1aa7926b4919729c6aba36bcb5cd55895c" kindref="member">provides_observation_tensor</ref><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/>absl::StrAppend(</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;str,<sp/></highlight><highlight class="stringliteral">&quot;provides_factored_observation_string:<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>game_type.<ref refid="structopen__spiel_1_1_game_type_1ad0f911229d1f5b893dc2225069703c36" kindref="member">provides_factored_observation_string</ref><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>there<sp/>are<sp/>no<sp/>newlines<sp/>in<sp/>the<sp/>serialized<sp/>params.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>std::string<sp/>serialized_params<sp/>=</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1af4fbe25f93445525489169ed595bb330" kindref="member">SerializeGameParameters</ref>(game_type.<ref refid="structopen__spiel_1_1_game_type_1a2d265bb0c5d0be4d64222ac322bf3510" kindref="member">parameter_specification</ref>);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><ref refid="spiel__utils_8h_1ac998e613afb013e8bd31b3da80f747ae" kindref="member">SPIEL_CHECK_TRUE</ref>(!absl::StrContains(serialized_params,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>absl::StrAppend(&amp;str,<sp/></highlight><highlight class="stringliteral">&quot;parameter_specification:<sp/>&quot;</highlight><highlight class="normal">,<sp/>serialized_params);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="721"><highlight class="normal">}</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723" refid="namespaceopen__spiel_1abdd13dce1b32767e9b820f7f63638215" refkind="member"><highlight class="normal"><ref refid="structopen__spiel_1_1_game_type" kindref="compound">GameType</ref><sp/><ref refid="namespaceopen__spiel_1abdd13dce1b32767e9b820f7f63638215" kindref="member">GameTypeFromString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>game_type_str)<sp/>{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/>absl::btree_map&lt;std::string,<sp/>std::string&gt;<sp/>game_type_values;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>parts<sp/>=<sp/>absl::StrSplit(game_type_str,<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><ref refid="spiel__utils_8h_1abcb08ef83297cd8a69ac67d47cfa5da2" kindref="member">SPIEL_CHECK_EQ</ref>(parts.size(),<sp/>15);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>part<sp/>:<sp/>parts)<sp/>{</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>std::pair&lt;std::string,<sp/>std::string&gt;<sp/>pair<sp/>=</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>absl::StrSplit(part,<sp/>absl::MaxSplits(</highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal">,<sp/>1));</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>game_type_values.insert(pair);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><ref refid="structopen__spiel_1_1_game_type" kindref="compound">GameType</ref><sp/>game_type<sp/>=<sp/><ref refid="structopen__spiel_1_1_game_type" kindref="compound">GameType</ref>();</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>game_type.<ref refid="structopen__spiel_1_1_game_type_1a7dc97c2b88971ea7c5180d3c2fe29cf1" kindref="member">short_name</ref><sp/>=<sp/>game_type_values.at(</highlight><highlight class="stringliteral">&quot;short_name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/>game_type.<ref refid="structopen__spiel_1_1_game_type_1a89c154ac202bd4a659b9e4ea3d28ebbb" kindref="member">long_name</ref><sp/>=<sp/>game_type_values.at(</highlight><highlight class="stringliteral">&quot;long_name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/>std::istringstream(game_type_values.at(</highlight><highlight class="stringliteral">&quot;dynamics&quot;</highlight><highlight class="normal">))<sp/>&gt;&gt;<sp/>game_type.<ref refid="structopen__spiel_1_1_game_type_1ac1176bf5ed045dc24fb4b113af2750b8" kindref="member">dynamics</ref>;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/>std::istringstream(game_type_values.at(</highlight><highlight class="stringliteral">&quot;chance_mode&quot;</highlight><highlight class="normal">))<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>game_type.<ref refid="structopen__spiel_1_1_game_type_1a7a1a6c9e079e58933da6b62c4d04279e" kindref="member">chance_mode</ref>;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>std::istringstream(game_type_values.at(</highlight><highlight class="stringliteral">&quot;information&quot;</highlight><highlight class="normal">))<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>game_type.<ref refid="structopen__spiel_1_1_game_type_1a99e4ce5d58635d108e99367a5d12f589" kindref="member">information</ref>;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/>std::istringstream(game_type_values.at(</highlight><highlight class="stringliteral">&quot;utility&quot;</highlight><highlight class="normal">))<sp/>&gt;&gt;<sp/>game_type.<ref refid="structopen__spiel_1_1_game_type_1a97241a4820868fc48068e6585ab142a6" kindref="member">utility</ref>;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/>std::istringstream(game_type_values.at(</highlight><highlight class="stringliteral">&quot;reward_model&quot;</highlight><highlight class="normal">))<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>game_type.<ref refid="structopen__spiel_1_1_game_type_1aa72d7337710404c4a4c85cad77ad9992" kindref="member">reward_model</ref>;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><ref refid="spiel__utils_8h_1ac998e613afb013e8bd31b3da80f747ae" kindref="member">SPIEL_CHECK_TRUE</ref>(absl::SimpleAtoi(game_type_values.at(</highlight><highlight class="stringliteral">&quot;max_num_players&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(game_type.<ref refid="structopen__spiel_1_1_game_type_1acb7c9c12c353ccb42a4273e026bd61cf" kindref="member">max_num_players</ref>)));</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><ref refid="spiel__utils_8h_1ac998e613afb013e8bd31b3da80f747ae" kindref="member">SPIEL_CHECK_TRUE</ref>(absl::SimpleAtoi(game_type_values.at(</highlight><highlight class="stringliteral">&quot;min_num_players&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(game_type.<ref refid="structopen__spiel_1_1_game_type_1a8156a1d7578c71dd5425d6b22c171611" kindref="member">min_num_players</ref>)));</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/>game_type.<ref refid="structopen__spiel_1_1_game_type_1a909f5d7264115920cd4e63527fa80bc3" kindref="member">provides_information_state_string</ref><sp/>=</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>game_type_values.at(</highlight><highlight class="stringliteral">&quot;provides_information_state_string&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/>game_type.<ref refid="structopen__spiel_1_1_game_type_1a0e75001913b46cb55660c87ff67ec72b" kindref="member">provides_information_state_tensor</ref><sp/>=</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>game_type_values.at(</highlight><highlight class="stringliteral">&quot;provides_information_state_tensor&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/>game_type.<ref refid="structopen__spiel_1_1_game_type_1aefe22999e3f3866dfac4512fefa09259" kindref="member">provides_observation_string</ref><sp/>=</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>game_type_values.at(</highlight><highlight class="stringliteral">&quot;provides_observation_string&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/>game_type.<ref refid="structopen__spiel_1_1_game_type_1aa7926b4919729c6aba36bcb5cd55895c" kindref="member">provides_observation_tensor</ref><sp/>=</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>game_type_values.at(</highlight><highlight class="stringliteral">&quot;provides_observation_tensor&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/>game_type.<ref refid="structopen__spiel_1_1_game_type_1ad0f911229d1f5b893dc2225069703c36" kindref="member">provides_factored_observation_string</ref><sp/>=</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>game_type_values.at(</highlight><highlight class="stringliteral">&quot;provides_factored_observation_string&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/>game_type.<ref refid="structopen__spiel_1_1_game_type_1a2d265bb0c5d0be4d64222ac322bf3510" kindref="member">parameter_specification</ref><sp/>=</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a5409de787fa4c65008c7668559d3dd0c" kindref="member">DeserializeGameParameters</ref>(game_type_values.at(</highlight><highlight class="stringliteral">&quot;parameter_specification&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>game_type;</highlight></codeline>
<codeline lineno="768"><highlight class="normal">}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770" refid="classopen__spiel_1_1_state_1a5bca09400e38cffa15eb7a5fb7e73cb6" refkind="member"><highlight class="normal">std::vector&lt;float&gt;<sp/><ref refid="classopen__spiel_1_1_state_1a2ffb39ff0f133e2cae27bf4bddf8e4ac" kindref="member">State::ObservationTensor</ref>(<ref refid="namespaceopen__spiel_1a8e9bf6a040c687a9f0c8393728dc0121" kindref="member">Player</ref><sp/>player)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>add<sp/>this<sp/>player<sp/>check,<sp/>to<sp/>prevent<sp/>errors<sp/>if<sp/>the<sp/>game<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>lacks<sp/>that<sp/>check<sp/>(in<sp/>particular<sp/>as<sp/>this<sp/>function<sp/>is<sp/>the<sp/>one<sp/>used<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Python).<sp/>This<sp/>can<sp/>lead<sp/>to<sp/>doing<sp/>this<sp/>check<sp/>twice.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(author2):<sp/>Do<sp/>we<sp/>want<sp/>to<sp/>prevent<sp/>executing<sp/>this<sp/>twice<sp/>for<sp/>games</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>implement<sp/>it?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><ref refid="spiel__utils_8h_1a5fa701f61bd5416434d72f3628e093b7" kindref="member">SPIEL_CHECK_GE</ref>(player,<sp/>0);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><ref refid="spiel__utils_8h_1ad9b10d8a52955f75371525c0f9f21b69" kindref="member">SPIEL_CHECK_LT</ref>(player,<sp/><ref refid="classopen__spiel_1_1_state_1aa907ffe3dd80025bd074d95cc87fb7a4" kindref="member">num_players_</ref>);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>observation(<ref refid="classopen__spiel_1_1_state_1a4aed0817448ce100d3f76a7529263e93" kindref="member">game_</ref>-&gt;ObservationTensorSize());</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><ref refid="classopen__spiel_1_1_state_1a2ffb39ff0f133e2cae27bf4bddf8e4ac" kindref="member">ObservationTensor</ref>(player,<sp/>absl::MakeSpan(observation));</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>observation;</highlight></codeline>
<codeline lineno="781"><highlight class="normal">}</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783" refid="classopen__spiel_1_1_state_1adc0a7f028252d613b8a4ccb6c6b0de15" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1a2ffb39ff0f133e2cae27bf4bddf8e4ac" kindref="member">State::ObservationTensor</ref>(<ref refid="namespaceopen__spiel_1a8e9bf6a040c687a9f0c8393728dc0121" kindref="member">Player</ref><sp/>player,<sp/>std::vector&lt;float&gt;*<sp/>values)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Retained<sp/>for<sp/>backwards<sp/>compatibility.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/>values-&gt;resize(<ref refid="classopen__spiel_1_1_state_1a4aed0817448ce100d3f76a7529263e93" kindref="member">game_</ref>-&gt;ObservationTensorSize());</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><ref refid="classopen__spiel_1_1_state_1a2ffb39ff0f133e2cae27bf4bddf8e4ac" kindref="member">ObservationTensor</ref>(player,<sp/>absl::MakeSpan(*values));</highlight></codeline>
<codeline lineno="787"><highlight class="normal">}</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789" refid="classopen__spiel_1_1_state_1a3f36b8d61693315cfd2cfeb6fd8ad8cd" refkind="member"><highlight class="normal">std::vector&lt;float&gt;<sp/><ref refid="classopen__spiel_1_1_state_1a7971caff7b5a3506fa53a5e85c01253b" kindref="member">State::InformationStateTensor</ref>(<ref refid="namespaceopen__spiel_1a8e9bf6a040c687a9f0c8393728dc0121" kindref="member">Player</ref><sp/>player)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>add<sp/>this<sp/>player<sp/>check,<sp/>to<sp/>prevent<sp/>errors<sp/>if<sp/>the<sp/>game<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>lacks<sp/>that<sp/>check<sp/>(in<sp/>particular<sp/>as<sp/>this<sp/>function<sp/>is<sp/>the<sp/>one<sp/>used<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Python).<sp/>This<sp/>can<sp/>lead<sp/>to<sp/>doing<sp/>this<sp/>check<sp/>twice.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(author2):<sp/>Do<sp/>we<sp/>want<sp/>to<sp/>prevent<sp/>executing<sp/>this<sp/>twice<sp/>for<sp/>games</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>implement<sp/>it?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><ref refid="spiel__utils_8h_1a5fa701f61bd5416434d72f3628e093b7" kindref="member">SPIEL_CHECK_GE</ref>(player,<sp/>0);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><ref refid="spiel__utils_8h_1ad9b10d8a52955f75371525c0f9f21b69" kindref="member">SPIEL_CHECK_LT</ref>(player,<sp/><ref refid="classopen__spiel_1_1_state_1aa907ffe3dd80025bd074d95cc87fb7a4" kindref="member">num_players_</ref>);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>info_state(<ref refid="classopen__spiel_1_1_state_1a4aed0817448ce100d3f76a7529263e93" kindref="member">game_</ref>-&gt;InformationStateTensorSize());</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><ref refid="classopen__spiel_1_1_state_1a7971caff7b5a3506fa53a5e85c01253b" kindref="member">InformationStateTensor</ref>(player,<sp/>absl::MakeSpan(info_state));</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>info_state;</highlight></codeline>
<codeline lineno="800"><highlight class="normal">}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802" refid="classopen__spiel_1_1_state_1a9753ec678915734fe38f4e86e3309894" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1a7971caff7b5a3506fa53a5e85c01253b" kindref="member">State::InformationStateTensor</ref>(<ref refid="namespaceopen__spiel_1a8e9bf6a040c687a9f0c8393728dc0121" kindref="member">Player</ref><sp/>player,</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;float&gt;*<sp/>values)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Retained<sp/>for<sp/>backwards<sp/>compatibility.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/>values-&gt;resize(<ref refid="classopen__spiel_1_1_state_1a4aed0817448ce100d3f76a7529263e93" kindref="member">game_</ref>-&gt;InformationStateTensorSize());</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><ref refid="classopen__spiel_1_1_state_1a7971caff7b5a3506fa53a5e85c01253b" kindref="member">InformationStateTensor</ref>(player,<sp/>absl::MakeSpan(*values));</highlight></codeline>
<codeline lineno="807"><highlight class="normal">}</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809" refid="structopen__spiel_1_1_state_1_1_player_action_1a18f79b3d078ff706edbd1795c1924dcb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_state_1_1_player_action_1a18f79b3d078ff706edbd1795c1924dcb" kindref="member">State::PlayerAction::operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_state_1_1_player_action" kindref="compound">PlayerAction</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_state_1_1_player_action_1a38760e9677be3b392aa0d0cd6eb8bc30" kindref="member">player</ref><sp/>==<sp/>other.<ref refid="structopen__spiel_1_1_state_1_1_player_action_1a38760e9677be3b392aa0d0cd6eb8bc30" kindref="member">player</ref><sp/>&amp;&amp;<sp/><ref refid="structopen__spiel_1_1_state_1_1_player_action_1a0a1fcb179ed63120c1aa4a694bc97a1e" kindref="member">action</ref><sp/>==<sp/>other.<ref refid="structopen__spiel_1_1_state_1_1_player_action_1a0a1fcb179ed63120c1aa4a694bc97a1e" kindref="member">action</ref>;</highlight></codeline>
<codeline lineno="811"><highlight class="normal">}</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813" refid="classopen__spiel_1_1_state_1ac721b1cb2b8dccaec4350278fc5cb724" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1ac721b1cb2b8dccaec4350278fc5cb724" kindref="member">State::MeanFieldPopulation</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classopen__spiel_1_1_state_1a7fff989fb01a5d93e849ed6fe406cc3f" kindref="member">GetGame</ref>()-&gt;<ref refid="classopen__spiel_1_1_state_1a85fe23e126a3c9f263b4e87922a01b0f" kindref="member">GetType</ref>().dynamics<sp/>!=<sp/><ref refid="structopen__spiel_1_1_game_type_1a624349737f34cc67d0cf81fd7138c17ba6a40bb1d52ea6251e5ce3b9e7d3577bd" kindref="member">GameType::Dynamics::kMeanField</ref>)<sp/>{</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;MeanFieldPopulation()<sp/>does<sp/>not<sp/>make<sp/>sense<sp/>for<sp/>games<sp/>that<sp/>are<sp/>not<sp/>mean<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;field<sp/>games.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="820"><highlight class="normal">}</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822" refid="namespaceopen__spiel_1a3c960b5e0e3ff1fa28344fb4a60bd0d1" refkind="member"><highlight class="normal">std::ostream&amp;<sp/><ref refid="namespaceopen__spiel_1a7a4f3573ff9d467ce5c64eecbe5ea8b9" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_state_1_1_player_action" kindref="compound">State::PlayerAction</ref>&amp;<sp/>action)<sp/>{</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/>os<sp/>&lt;&lt;<sp/>absl::StreamFormat(</highlight><highlight class="stringliteral">&quot;PlayerAction(player=%i,action=%i)&quot;</highlight><highlight class="normal">,<sp/>action.<ref refid="structopen__spiel_1_1_state_1_1_player_action_1a38760e9677be3b392aa0d0cd6eb8bc30" kindref="member">player</ref>,</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>action.<ref refid="structopen__spiel_1_1_state_1_1_player_action_1a0a1fcb179ed63120c1aa4a694bc97a1e" kindref="member">action</ref>);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="826"><highlight class="normal">}</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight></codeline>
<codeline lineno="828" refid="namespaceopen__spiel_1a273ef5cc5b21091a3c4f4c09b9af7713" refkind="member"><highlight class="normal">std::vector&lt;std::string&gt;<sp/><ref refid="namespaceopen__spiel_1a273ef5cc5b21091a3c4f4c09b9af7713" kindref="member">ActionsToStrings</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state" kindref="compound">State</ref>&amp;<sp/>state,</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Action&gt;&amp;<sp/>actions)<sp/>{</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>out;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/>out.reserve(actions.size());</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="namespaceopen__spiel_1a8aa5fc5cff0ef466697b1df5cbfcbd3a" kindref="member">Action</ref><sp/>action<sp/>:<sp/>actions)<sp/>out.push_back(state.ActionToString(action));</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="834"><highlight class="normal">}</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836" refid="namespaceopen__spiel_1a4f436837944c34a3007b2722e77a2c09" refkind="member"><highlight class="normal">std::string<sp/><ref refid="namespaceopen__spiel_1a4f436837944c34a3007b2722e77a2c09" kindref="member">ActionsToString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state" kindref="compound">State</ref>&amp;<sp/>state,</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Action&gt;&amp;<sp/>actions)<sp/>{</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>absl::StrCat(</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal">,<sp/>absl::StrJoin(<ref refid="namespaceopen__spiel_1a273ef5cc5b21091a3c4f4c09b9af7713" kindref="member">ActionsToStrings</ref>(state,<sp/>actions),<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="840"><highlight class="normal">}</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842" refid="namespaceopen__spiel_1aeb956daaab571492f9a18ed99000b016" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1aeb956daaab571492f9a18ed99000b016" kindref="member">SpielFatalErrorWithStateInfo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>error_msg,</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_game" kindref="compound">Game</ref>&amp;<sp/>game,</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state" kindref="compound">State</ref>&amp;<sp/>state)<sp/>{</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>fatal<sp/>error<sp/>wrapper<sp/>designed<sp/>to<sp/>return<sp/>useful<sp/>debugging<sp/>information.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>info<sp/>=<sp/><ref refid="namespaceopen__spiel_1a8c5224bc6b99621bd7c32c04dc9ddafa" kindref="member">SerializeGameAndState</ref>(game,<sp/>state);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(absl::StrCat(error_msg,<sp/></highlight><highlight class="stringliteral">&quot;Serialized<sp/>state:\n&quot;</highlight><highlight class="normal">,<sp/>info));</highlight></codeline>
<codeline lineno="848"><highlight class="normal">}</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal">std::pair&lt;std::shared_ptr&lt;const<sp/>Game&gt;,</highlight></codeline>
<codeline lineno="851" refid="namespaceopen__spiel_1a8e5ff0d85e37788198b7cc387a7e5780" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;State&gt;&gt;<sp/><ref refid="namespaceopen__spiel_1a8e5ff0d85e37788198b7cc387a7e5780" kindref="member">BuildStateFromHistoryString</ref>(</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>game_string,</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>history,</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_steps)<sp/>{</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/>std::pair&lt;std::shared_ptr&lt;const<sp/>Game&gt;,<sp/>std::unique_ptr&lt;State&gt;&gt;<sp/>game_and_state;</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/>game_and_state.first<sp/>=<sp/><ref refid="namespaceopen__spiel_1afd4ac299a038385def0ea56521067137" kindref="member">LoadGame</ref>(game_string);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/>game_and_state.second<sp/>=<sp/>game_and_state.first-&gt;NewInitialState();</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/>std::string<sp/>history_copy(absl::StripAsciiWhitespace(history));</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(history_copy[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/>history_copy<sp/>=<sp/>history_copy.substr(1);</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(history_copy[history_copy.length()<sp/>-<sp/>1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>history_copy<sp/>=<sp/>history_copy.substr(0,<sp/>history_copy.length()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/>std::vector&lt;Action&gt;<sp/>legal_actions;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><ref refid="classopen__spiel_1_1_state" kindref="compound">State</ref>*<sp/>state<sp/>=<sp/>game_and_state.second.get();</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>steps<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>parts<sp/>=<sp/>absl::StrSplit(history_copy,<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>part<sp/>:<sp/>parts)<sp/>{</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max_steps<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>steps<sp/>&gt;=<sp/>max_steps)<sp/>{</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a8aa5fc5cff0ef466697b1df5cbfcbd3a" kindref="member">Action</ref><sp/>action;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>atoi_ret<sp/>=<sp/>absl::SimpleAtoi(absl::StripAsciiWhitespace(part),<sp/>&amp;action);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!atoi_ret)<sp/>{</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(absl::StrCat(</highlight><highlight class="stringliteral">&quot;Problem<sp/>parsing<sp/>action:<sp/>&quot;</highlight><highlight class="normal">,<sp/>part));</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>legal_actions<sp/>=<sp/>state-&gt;LegalActions();</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(absl::c_find(legal_actions,<sp/>action)<sp/>==<sp/>legal_actions.end())<sp/>{</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(absl::StrCat(</highlight><highlight class="stringliteral">&quot;Illegal<sp/>move<sp/>detected!\nState:\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;ToString(),<sp/></highlight><highlight class="stringliteral">&quot;\nAction:<sp/>&quot;</highlight><highlight class="normal">,<sp/>action,</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>(&quot;</highlight><highlight class="normal">,<sp/>state-&gt;ActionToString(action),<sp/></highlight><highlight class="stringliteral">&quot;)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;History:<sp/>&quot;</highlight><highlight class="normal">,<sp/>state-&gt;HistoryString()));</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;ApplyAction(action);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/>steps++;</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>game_and_state;</highlight></codeline>
<codeline lineno="891"><highlight class="normal">}</highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>open_spiel</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="open_spiel/spiel.cc"/>
  </compounddef>
</doxygen>
