<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="policy_8h" kind="file" language="C++">
    <compoundname>policy.h</compoundname>
    <includes local="no">memory</includes>
    <includes local="no">string</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includes local="yes">open_spiel/abseil-cpp/absl/algorithm/container.h</includes>
    <includes refid="spiel_8h" local="yes">open_spiel/spiel.h</includes>
    <includes refid="spiel__utils_8h" local="yes">open_spiel/spiel_utils.h</includes>
    <includes local="yes">open_spiel/utils/serialization.h</includes>
    <includedby refid="policy_8cc" local="yes">open_spiel/policy.cc</includedby>
    <includedby refid="spiel__bots_8cc" local="yes">open_spiel/spiel_bots.cc</includedby>
    <includedby refid="spiel__bots_8h" local="yes">open_spiel/spiel_bots.h</includedby>
    <incdepgraph>
      <node id="20">
        <label>open_spiel/game_parameters.h</label>
        <link refid="game__parameters_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>open_spiel/observer.h</label>
        <link refid="observer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>open_spiel/policy.h</label>
        <link refid="policy_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>open_spiel/spiel.h</label>
        <link refid="spiel_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>open_spiel/spiel_globals.h</label>
        <link refid="spiel__globals_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>open_spiel/spiel_utils.h</label>
        <link refid="spiel__utils_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>algorithm</label>
      </node>
      <node id="23">
        <label>array</label>
      </node>
      <node id="24">
        <label>cmath</label>
      </node>
      <node id="25">
        <label>cstddef</label>
      </node>
      <node id="26">
        <label>cstdint</label>
      </node>
      <node id="9">
        <label>functional</label>
      </node>
      <node id="10">
        <label>iostream</label>
      </node>
      <node id="11">
        <label>map</label>
      </node>
      <node id="2">
        <label>memory</label>
      </node>
      <node id="12">
        <label>numeric</label>
      </node>
      <node id="7">
        <label>open_spiel/abseil-cpp/absl/algorithm/container.h</label>
      </node>
      <node id="33">
        <label>open_spiel/abseil-cpp/absl/base/attributes.h</label>
      </node>
      <node id="34">
        <label>open_spiel/abseil-cpp/absl/container/flat_hash_set.h</label>
      </node>
      <node id="35">
        <label>open_spiel/abseil-cpp/absl/container/inlined_vector.h</label>
      </node>
      <node id="15">
        <label>open_spiel/abseil-cpp/absl/random/bit_gen_ref.h</label>
      </node>
      <node id="28">
        <label>open_spiel/abseil-cpp/absl/random/uniform_real_distribution.h</label>
      </node>
      <node id="29">
        <label>open_spiel/abseil-cpp/absl/strings/str_cat.h</label>
      </node>
      <node id="16">
        <label>open_spiel/abseil-cpp/absl/strings/str_join.h</label>
      </node>
      <node id="36">
        <label>open_spiel/abseil-cpp/absl/strings/string_view.h</label>
      </node>
      <node id="17">
        <label>open_spiel/abseil-cpp/absl/synchronization/mutex.h</label>
      </node>
      <node id="30">
        <label>open_spiel/abseil-cpp/absl/time/clock.h</label>
      </node>
      <node id="31">
        <label>open_spiel/abseil-cpp/absl/time/time.h</label>
      </node>
      <node id="18">
        <label>open_spiel/abseil-cpp/absl/types/optional.h</label>
      </node>
      <node id="19">
        <label>open_spiel/abseil-cpp/absl/types/span.h</label>
      </node>
      <node id="38">
        <label>open_spiel/utils/serialization.h</label>
      </node>
      <node id="13">
        <label>random</label>
      </node>
      <node id="14">
        <label>sstream</label>
      </node>
      <node id="3">
        <label>string</label>
      </node>
      <node id="27">
        <label>type_traits</label>
      </node>
      <node id="4">
        <label>unordered_map</label>
      </node>
      <node id="5">
        <label>utility</label>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>open_spiel/policy.cc</label>
        <link refid="policy_8cc"/>
      </node>
      <node id="1">
        <label>open_spiel/policy.h</label>
        <link refid="policy_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>open_spiel/spiel_bots.cc</label>
        <link refid="spiel__bots_8cc"/>
      </node>
      <node id="4">
        <label>open_spiel/spiel_bots.h</label>
        <link refid="spiel__bots_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classopen__spiel_1_1_policy" prot="public">open_spiel::Policy</innerclass>
    <innerclass refid="classopen__spiel_1_1_tabular_policy" prot="public">open_spiel::TabularPolicy</innerclass>
    <innerclass refid="classopen__spiel_1_1_partial_tabular_policy" prot="public">open_spiel::PartialTabularPolicy</innerclass>
    <innerclass refid="classopen__spiel_1_1_uniform_policy" prot="public">open_spiel::UniformPolicy</innerclass>
    <innerclass refid="classopen__spiel_1_1_first_action_policy" prot="public">open_spiel::FirstActionPolicy</innerclass>
    <innerclass refid="classopen__spiel_1_1_preferred_action_policy" prot="public">open_spiel::PreferredActionPolicy</innerclass>
    <innernamespace refid="namespaceopen__spiel">open_spiel</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2021<sp/>DeepMind<sp/>Technologies<sp/>Limited</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPEN_SPIEL_POLICY_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>OPEN_SPIEL_POLICY_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;open_spiel/abseil-cpp/absl/algorithm/container.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="spiel_8h" kindref="compound">open_spiel/spiel.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="spiel__utils_8h" kindref="compound">open_spiel/spiel_utils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;open_spiel/utils/serialization.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceopen__spiel" kindref="compound">open_spiel</ref><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>probability<sp/>for<sp/>the<sp/>specified<sp/>action,<sp/>or<sp/>-1<sp/>if<sp/>not<sp/>found.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1ac1d569f0265995b4a34226e420cd894c" kindref="member">GetProb</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1ac4ea6d9d7193ac74f6f333b954e3810f" kindref="member">ActionsAndProbs</ref>&amp;<sp/>action_and_probs,<sp/><ref refid="namespaceopen__spiel_1a8aa5fc5cff0ef466697b1df5cbfcbd3a" kindref="member">Action</ref><sp/>action);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>an<sp/>action<sp/>probability<sp/>for<sp/>the<sp/>specified<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1af107cfba13b9ff637482f49799818200" kindref="member">SetProb</ref>(<ref refid="namespaceopen__spiel_1ac4ea6d9d7193ac74f6f333b954e3810f" kindref="member">ActionsAndProbs</ref>*<sp/>actions_and_probs,<sp/><ref refid="namespaceopen__spiel_1a8aa5fc5cff0ef466697b1df5cbfcbd3a" kindref="member">Action</ref><sp/>action,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>prob);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>for<sp/>deterministic<sp/>policies:<sp/>returns<sp/>the<sp/>single<sp/>action<sp/>if<sp/>the<sp/>policy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>deterministic,<sp/>otherwise<sp/>returns<sp/>kInvalidAction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><ref refid="namespaceopen__spiel_1a8aa5fc5cff0ef466697b1df5cbfcbd3a" kindref="member">Action</ref><sp/><ref refid="namespaceopen__spiel_1ab6a13349730ac4084a90ffade1876871" kindref="member">GetAction</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1ac4ea6d9d7193ac74f6f333b954e3810f" kindref="member">ActionsAndProbs</ref>&amp;<sp/>action_and_probs);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>policy<sp/>where<sp/>every<sp/>legal<sp/>action<sp/>has<sp/>probability<sp/>1<sp/>/<sp/>(number<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>legal<sp/>actions)<sp/>for<sp/>the<sp/>current<sp/>player<sp/>to<sp/>play.<sp/>The<sp/>overloaded<sp/>function<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>similar,<sp/>and<sp/>provided<sp/>to<sp/>support<sp/>simultaneous<sp/>move<sp/>games.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><ref refid="namespaceopen__spiel_1ac4ea6d9d7193ac74f6f333b954e3810f" kindref="member">ActionsAndProbs</ref><sp/><ref refid="namespaceopen__spiel_1ad329b96a775a4a21bebf491968d87cfe" kindref="member">UniformStatePolicy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>State&amp;<sp/>state);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><ref refid="namespaceopen__spiel_1ac4ea6d9d7193ac74f6f333b954e3810f" kindref="member">ActionsAndProbs</ref><sp/><ref refid="namespaceopen__spiel_1ad329b96a775a4a21bebf491968d87cfe" kindref="member">UniformStatePolicy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>State&amp;<sp/>state,<sp/><ref refid="namespaceopen__spiel_1a8e9bf6a040c687a9f0c8393728dc0121" kindref="member">Player</ref><sp/>player);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>policy<sp/>where<sp/>the<sp/>zeroth<sp/>action<sp/>has<sp/>probability<sp/>1.<sp/>The<sp/>overloaded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>function<sp/>is<sp/>similar,<sp/>and<sp/>provided<sp/>to<sp/>support<sp/>simultaneous<sp/>move<sp/>games.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><ref refid="namespaceopen__spiel_1ac4ea6d9d7193ac74f6f333b954e3810f" kindref="member">ActionsAndProbs</ref><sp/><ref refid="namespaceopen__spiel_1a0ff11c30833a9d4a5c12510080596429" kindref="member">FirstActionStatePolicy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>State&amp;<sp/>state);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><ref refid="namespaceopen__spiel_1ac4ea6d9d7193ac74f6f333b954e3810f" kindref="member">ActionsAndProbs</ref><sp/><ref refid="namespaceopen__spiel_1a0ff11c30833a9d4a5c12510080596429" kindref="member">FirstActionStatePolicy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>State&amp;<sp/>state,<sp/><ref refid="namespaceopen__spiel_1a8e9bf6a040c687a9f0c8393728dc0121" kindref="member">Player</ref><sp/>player);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return<sp/>a<sp/>new<sp/>policy<sp/>with<sp/>all<sp/>the<sp/>same<sp/>actions,<sp/>but<sp/>with<sp/>probability<sp/>1<sp/>on<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specified<sp/>action,<sp/>and<sp/>0<sp/>on<sp/>the<sp/>others.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><ref refid="namespaceopen__spiel_1ac4ea6d9d7193ac74f6f333b954e3810f" kindref="member">ActionsAndProbs</ref><sp/><ref refid="namespaceopen__spiel_1a9b0fa4e52ca589e36be9ff944e76ff81" kindref="member">ToDeterministicPolicy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1ac4ea6d9d7193ac74f6f333b954e3810f" kindref="member">ActionsAndProbs</ref>&amp;<sp/>actions_and_probs,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a8aa5fc5cff0ef466697b1df5cbfcbd3a" kindref="member">Action</ref><sp/>action);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>policy<sp/>with<sp/>probability<sp/>1<sp/>on<sp/>a<sp/>specific<sp/>action,<sp/>and<sp/>0<sp/>on<sp/>others.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><ref refid="namespaceopen__spiel_1ac4ea6d9d7193ac74f6f333b954e3810f" kindref="member">ActionsAndProbs</ref><sp/><ref refid="namespaceopen__spiel_1a46d8a1243693d4ef5fce2f038a6653f0" kindref="member">GetDeterministicPolicy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Action&gt;&amp;<sp/>legal_actions,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a8aa5fc5cff0ef466697b1df5cbfcbd3a" kindref="member">Action</ref><sp/>action);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>two<sp/>state<sp/>policies<sp/>are<sp/>equal<sp/>(within<sp/>a<sp/>float<sp/>tolerance).<sp/>Does<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/>exact<sp/>check,<sp/>so<sp/>the<sp/>actions<sp/>must<sp/>be<sp/>in<sp/>the<sp/>same<sp/>order.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1a3bebea309b826c727a0e217110e13c0c" kindref="member">StatePoliciesEqual</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1ac4ea6d9d7193ac74f6f333b954e3810f" kindref="member">ActionsAndProbs</ref>&amp;<sp/>state_policy1,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1ac4ea6d9d7193ac74f6f333b954e3810f" kindref="member">ActionsAndProbs</ref>&amp;<sp/>state_policy2,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>float_tolerance);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>general<sp/>policy<sp/>object.<sp/>A<sp/>policy<sp/>is<sp/>a<sp/>mapping<sp/>from<sp/>states<sp/>to<sp/>list<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(action,<sp/>prob)<sp/>pairs<sp/>for<sp/>all<sp/>the<sp/>legal<sp/>actions<sp/>at<sp/>the<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="classopen__spiel_1_1_policy" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classopen__spiel_1_1_policy" kindref="compound">Policy</ref><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="71" refid="classopen__spiel_1_1_policy_1ada2523d991dccc11adc1320d28423629" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_policy_1ada2523d991dccc11adc1320d28423629" kindref="member">~Policy</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>convenience<sp/>method<sp/>for<sp/>callers<sp/>that<sp/>want<sp/>to<sp/>use<sp/>arrays.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::pair&lt;std::vector&lt;Action&gt;,<sp/>std::vector&lt;double&gt;&gt;</highlight></codeline>
<codeline lineno="75" refid="classopen__spiel_1_1_policy_1acd81eb036ef229697a18cebaa270083b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classopen__spiel_1_1_policy_1acd81eb036ef229697a18cebaa270083b" kindref="member">GetStatePolicyAsParallelVectors</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state" kindref="compound">State</ref>&amp;<sp/>state)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>std::pair&lt;std::vector&lt;Action&gt;,<sp/>std::vector&lt;double&gt;&gt;<sp/>parray;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>action_and_prob<sp/>:<sp/><ref refid="classopen__spiel_1_1_policy_1ab5b6ff779e99ea042f7bb261e78ed6c6" kindref="member">GetStatePolicy</ref>(state))<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parray.first.push_back(action_and_prob.first);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parray.second.push_back(action_and_prob.second);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parray;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>convenience<sp/>method<sp/>for<sp/>callers<sp/>that<sp/>want<sp/>to<sp/>use<sp/>arrays.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::pair&lt;std::vector&lt;Action&gt;,<sp/>std::vector&lt;double&gt;&gt;</highlight></codeline>
<codeline lineno="86" refid="classopen__spiel_1_1_policy_1a9acb6d6cb2f40f5ad6ac5490a4ec618c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classopen__spiel_1_1_policy_1a9acb6d6cb2f40f5ad6ac5490a4ec618c" kindref="member">GetStatePolicyAsParallelVectors</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>info_state)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>std::pair&lt;std::vector&lt;Action&gt;,<sp/>std::vector&lt;double&gt;&gt;<sp/>parray;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>action_and_prob<sp/>:<sp/><ref refid="classopen__spiel_1_1_policy_1ab5b6ff779e99ea042f7bb261e78ed6c6" kindref="member">GetStatePolicy</ref>(info_state))<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parray.first.push_back(action_and_prob.first);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parray.second.push_back(action_and_prob.second);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parray;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="classopen__spiel_1_1_policy_1a65cde909235df749977cbaa0d3320186" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::unordered_map&lt;Action,<sp/>double&gt;<sp/><ref refid="classopen__spiel_1_1_policy_1a65cde909235df749977cbaa0d3320186" kindref="member">GetStatePolicyAsMap</ref>(</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state" kindref="compound">State</ref>&amp;<sp/>state)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_map&lt;Action,<sp/>double&gt;<sp/>pmap;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>action_and_prob<sp/>:<sp/><ref refid="classopen__spiel_1_1_policy_1ab5b6ff779e99ea042f7bb261e78ed6c6" kindref="member">GetStatePolicy</ref>(state))<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pmap[action_and_prob.first]<sp/>=<sp/>action_and_prob.second;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pmap;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="classopen__spiel_1_1_policy_1ac4aa0cf8b821528b20fe70d0f30dbc4e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::unordered_map&lt;Action,<sp/>double&gt;<sp/><ref refid="classopen__spiel_1_1_policy_1ac4aa0cf8b821528b20fe70d0f30dbc4e" kindref="member">GetStatePolicyAsMap</ref>(</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>info_state)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_map&lt;Action,<sp/>double&gt;<sp/>pmap;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>action_and_prob<sp/>:<sp/><ref refid="classopen__spiel_1_1_policy_1ab5b6ff779e99ea042f7bb261e78ed6c6" kindref="member">GetStatePolicy</ref>(info_state))<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pmap[action_and_prob.first]<sp/>=<sp/>action_and_prob.second;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pmap;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>list<sp/>of<sp/>(action,<sp/>prob)<sp/>pairs<sp/>for<sp/>the<sp/>policy<sp/>for<sp/>the<sp/>current</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>player<sp/>at<sp/>this<sp/>state.<sp/>If<sp/>the<sp/>policy<sp/>is<sp/>not<sp/>available<sp/>at<sp/>the<sp/>state,<sp/>returns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>empty<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="classopen__spiel_1_1_policy_1ab5b6ff779e99ea042f7bb261e78ed6c6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1ac4ea6d9d7193ac74f6f333b954e3810f" kindref="member">ActionsAndProbs</ref><sp/><ref refid="classopen__spiel_1_1_policy_1ab5b6ff779e99ea042f7bb261e78ed6c6" kindref="member">GetStatePolicy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state" kindref="compound">State</ref>&amp;<sp/>state)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_policy_1ab5b6ff779e99ea042f7bb261e78ed6c6" kindref="member">GetStatePolicy</ref>(state,<sp/>state.CurrentPlayer());</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>list<sp/>of<sp/>(action,<sp/>prob)<sp/>pairs<sp/>for<sp/>the<sp/>policy<sp/>for<sp/>the<sp/>specified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>player<sp/>at<sp/>this<sp/>state.<sp/>If<sp/>the<sp/>policy<sp/>is<sp/>not<sp/>available<sp/>at<sp/>the<sp/>state,<sp/>returns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>empty<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="classopen__spiel_1_1_policy_1a17e0b9275e629f68174168f6abfcb54b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1ac4ea6d9d7193ac74f6f333b954e3810f" kindref="member">ActionsAndProbs</ref><sp/><ref refid="classopen__spiel_1_1_policy_1a17e0b9275e629f68174168f6abfcb54b" kindref="member">GetStatePolicy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state" kindref="compound">State</ref>&amp;<sp/>state,</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a8e9bf6a040c687a9f0c8393728dc0121" kindref="member">Player</ref><sp/>player)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_policy_1ab5b6ff779e99ea042f7bb261e78ed6c6" kindref="member">GetStatePolicy</ref>(state.InformationStateString(player));</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>list<sp/>of<sp/>(action,<sp/>prob)<sp/>pairs<sp/>for<sp/>the<sp/>policy<sp/>at<sp/>this<sp/>info<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>policy<sp/>is<sp/>not<sp/>available<sp/>at<sp/>the<sp/>state,<sp/>returns<sp/>and<sp/>empty<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>sufficient<sp/>for<sp/>subclasses<sp/>to<sp/>override<sp/>only<sp/>this<sp/>method,<sp/>but<sp/>not<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>forms<sp/>of<sp/>policies<sp/>will<sp/>be<sp/>able<sp/>to<sp/>do<sp/>so<sp/>from<sp/>just<sp/>the<sp/>information<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="classopen__spiel_1_1_policy_1abbe4e1b820b5ca95e67b60de92d38370" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1ac4ea6d9d7193ac74f6f333b954e3810f" kindref="member">ActionsAndProbs</ref><sp/><ref refid="classopen__spiel_1_1_policy_1abbe4e1b820b5ca95e67b60de92d38370" kindref="member">GetStatePolicy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>info_state)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(</highlight><highlight class="stringliteral">&quot;GetStatePolicy(const<sp/>std::string&amp;)<sp/>unimplemented.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Each<sp/>override<sp/>must<sp/>write<sp/>out<sp/>the<sp/>class’s<sp/>identity<sp/>followed<sp/>by<sp/>&quot;:&quot;<sp/>as<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>very<sp/>first<sp/>thing<sp/>so<sp/>that<sp/>the<sp/>DeserializePolicy<sp/>method<sp/>can<sp/>then<sp/>call<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Deserialize<sp/>method<sp/>for<sp/>the<sp/>correct<sp/>subclass.<sp/>See<sp/>TabularPolicy<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>DeserializePolicy<sp/>below<sp/>for<sp/>an<sp/>example.<sp/>The<sp/>double_precision<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>indicates<sp/>the<sp/>number<sp/>of<sp/>decimal<sp/>places<sp/>in<sp/>floating<sp/>point<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>formatting,<sp/>value<sp/>-1<sp/>formats<sp/>doubles<sp/>with<sp/>lossless,<sp/>non-portable<sp/>bitwise</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>representation<sp/>hex<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143" refid="classopen__spiel_1_1_policy_1a53e9086029e7365dc2f5d4a3fda33124" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="classopen__spiel_1_1_policy_1a53e9086029e7365dc2f5d4a3fda33124" kindref="member">Serialize</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>double_precision<sp/>=<sp/>-1,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>delimiter<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&lt;~&gt;&quot;</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(</highlight><highlight class="stringliteral">&quot;Serialize(std::string<sp/>delimiter)<sp/>unimplemented.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal">};</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal">std::unique_ptr&lt;Policy&gt;<sp/><ref refid="namespaceopen__spiel_1a4aa4716074f62c6165c43e0b97119bfe" kindref="member">DeserializePolicy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>serialized,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>delimiter<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&lt;~&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>tabular<sp/>policy<sp/>represented<sp/>internally<sp/>as<sp/>a<sp/>map.<sp/>Note<sp/>that<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implementation<sp/>is<sp/>not<sp/>directly<sp/>compatible<sp/>with<sp/>the<sp/>Python<sp/>TabularPolicy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implementation;<sp/>the<sp/>latter<sp/>is<sp/>implemented<sp/>as<sp/>a<sp/>table<sp/>of<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[num_states,<sp/>num_actions],<sp/>while<sp/>this<sp/>is<sp/>implemented<sp/>as<sp/>a<sp/>map.<sp/>It<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">//<sp/>non-trivial<sp/>to<sp/>convert<sp/>between<sp/>the<sp/>two,<sp/>but<sp/>we<sp/>have<sp/>a<sp/>function<sp/>that<sp/>does<sp/>so</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>open_spiel/python/policy.py<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158" refid="classopen__spiel_1_1_tabular_policy" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classopen__spiel_1_1_tabular_policy" kindref="compound">TabularPolicy</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_policy" kindref="compound">Policy</ref><sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="160" refid="classopen__spiel_1_1_tabular_policy_1a284747d207ef0f016c771401e074c54a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classopen__spiel_1_1_tabular_policy_1a284747d207ef0f016c771401e074c54a" kindref="member">TabularPolicy</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><ref refid="classopen__spiel_1_1_tabular_policy_1a284747d207ef0f016c771401e074c54a" kindref="member">TabularPolicy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_game" kindref="compound">Game</ref>&amp;<sp/>game);<sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>a<sp/>uniform<sp/>random<sp/>policy.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162" refid="classopen__spiel_1_1_tabular_policy_1ab3643d854dc4414606c2761a6908aac7" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classopen__spiel_1_1_tabular_policy_1ab3643d854dc4414606c2761a6908aac7" kindref="member">TabularPolicy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_tabular_policy" kindref="compound">TabularPolicy</ref>&amp;<sp/>other)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="163" refid="classopen__spiel_1_1_tabular_policy_1a99e9d19a6674d0e7631087c3838ee0d8" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classopen__spiel_1_1_tabular_policy_1a99e9d19a6674d0e7631087c3838ee0d8" kindref="member">TabularPolicy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::unordered_map&lt;std::string,<sp/>ActionsAndProbs&gt;&amp;<sp/>table)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classopen__spiel_1_1_tabular_policy_1a93b5d40a770b912d21da8cdc4557f387" kindref="member">policy_table_</ref>(table)<sp/>{}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Converts<sp/>a<sp/>policy<sp/>to<sp/>a<sp/>TabularPolicy.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="classopen__spiel_1_1_tabular_policy_1a8939f2f427c387090d5b82ccaf9b48cc" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classopen__spiel_1_1_tabular_policy_1a8939f2f427c387090d5b82ccaf9b48cc" kindref="member">TabularPolicy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_game" kindref="compound">Game</ref>&amp;<sp/>game,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_policy" kindref="compound">Policy</ref>&amp;<sp/>policy)<sp/>:<sp/><ref refid="classopen__spiel_1_1_tabular_policy" kindref="compound">TabularPolicy</ref>(game)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[infostate,<sp/>is_policy]<sp/>:<sp/><ref refid="classopen__spiel_1_1_tabular_policy_1a93b5d40a770b912d21da8cdc4557f387" kindref="member">policy_table_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>is_policy<sp/>=<sp/>policy.<ref refid="classopen__spiel_1_1_tabular_policy_1a8eda4e771e35eacab6ec90b26b8aff15" kindref="member">GetStatePolicy</ref>(infostate);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>new<sp/>TabularPolicy<sp/>from<sp/>a<sp/>deterministic<sp/>policy<sp/>encoded<sp/>as<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>{info_state_str<sp/>-&gt;<sp/>action}<sp/>dict.<sp/>The<sp/>dummy_policy<sp/>is<sp/>used<sp/>to<sp/>initialize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>initial<sp/>mapping.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176" refid="classopen__spiel_1_1_tabular_policy_1a0d077c4fd7e808b1ff7281bd655e92f2" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classopen__spiel_1_1_tabular_policy_1a0d077c4fd7e808b1ff7281bd655e92f2" kindref="member">TabularPolicy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_tabular_policy" kindref="compound">TabularPolicy</ref>&amp;<sp/>dummy_policy,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::unordered_map&lt;std::string,<sp/>Action&gt;&amp;<sp/>action_map)</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classopen__spiel_1_1_tabular_policy_1a93b5d40a770b912d21da8cdc4557f387" kindref="member">policy_table_</ref>(dummy_policy.<ref refid="classopen__spiel_1_1_tabular_policy_1a93b5d40a770b912d21da8cdc4557f387" kindref="member">policy_table_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>entry<sp/>:<sp/>action_map)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>info_state<sp/>=<sp/>entry.first;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a8aa5fc5cff0ef466697b1df5cbfcbd3a" kindref="member">Action</ref><sp/>action_taken<sp/>=<sp/>action_map.at(entry.first);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>action_and_prob<sp/>:<sp/><ref refid="classopen__spiel_1_1_tabular_policy_1a93b5d40a770b912d21da8cdc4557f387" kindref="member">policy_table_</ref>[info_state])<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>action_and_prob.second<sp/>=</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(action_and_prob.first<sp/>==<sp/>action_taken<sp/>?<sp/>1.0<sp/>:<sp/>0.0);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189" refid="classopen__spiel_1_1_tabular_policy_1a8eda4e771e35eacab6ec90b26b8aff15" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespaceopen__spiel_1ac4ea6d9d7193ac74f6f333b954e3810f" kindref="member">ActionsAndProbs</ref><sp/><ref refid="classopen__spiel_1_1_tabular_policy_1a8eda4e771e35eacab6ec90b26b8aff15" kindref="member">GetStatePolicy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>info_state)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>iter<sp/>=<sp/><ref refid="classopen__spiel_1_1_tabular_policy_1a93b5d40a770b912d21da8cdc4557f387" kindref="member">policy_table_</ref>.find(info_state);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter<sp/>==<sp/><ref refid="classopen__spiel_1_1_tabular_policy_1a93b5d40a770b912d21da8cdc4557f387" kindref="member">policy_table_</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iter-&gt;second;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198" refid="classopen__spiel_1_1_tabular_policy_1a933b8698b3924573c2f1c55b31f3c7a1" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classopen__spiel_1_1_tabular_policy_1a933b8698b3924573c2f1c55b31f3c7a1" kindref="member">Serialize</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>double_precision<sp/>=<sp/>-1,</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>delimiter<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&lt;~&gt;&quot;</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="spiel__utils_8h_1a5fa701f61bd5416434d72f3628e093b7" kindref="member">SPIEL_CHECK_GE</ref>(double_precision,<sp/>-1);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(delimiter<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>||<sp/>delimiter<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>two<sp/>delimiters<sp/>are<sp/>used<sp/>for<sp/>de/serialization<sp/>of<sp/>policy_table_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Please<sp/>select<sp/>a<sp/>different<sp/>delimiter,&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>values<sp/>are<sp/>\&quot;,\&quot;<sp/>and<sp/>\&quot;=\&quot;.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;TabularPolicy:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classopen__spiel_1_1_tabular_policy_1a93b5d40a770b912d21da8cdc4557f387" kindref="member">policy_table_</ref>.empty())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>[info_state,<sp/>policy]<sp/>:<sp/><ref refid="classopen__spiel_1_1_tabular_policy_1a93b5d40a770b912d21da8cdc4557f387" kindref="member">policy_table_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info_state.find(delimiter)<sp/>!=<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(absl::StrCat(</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Info<sp/>state<sp/>contains<sp/>delimiter<sp/>\&quot;&quot;</highlight><highlight class="normal">,<sp/>delimiter,</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\&quot;,<sp/>please<sp/>fix<sp/>the<sp/>info<sp/>state<sp/>or<sp/>select<sp/>a<sp/>different<sp/>delimiter.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>policy_str;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(double_precision<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>policy_str<sp/>=</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>absl::StrJoin(policy,<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>absl::PairFormatter(absl::AlphaNumFormatter(),<sp/></highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HexDoubleFormatter()));</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>policy_str<sp/>=<sp/>absl::StrJoin(</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>policy,<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>absl::PairFormatter(absl::AlphaNumFormatter(),<sp/></highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SimpleDoubleFormatter(double_precision)));</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>absl::StrAppend(&amp;str,<sp/>info_state,<sp/>delimiter,<sp/>policy_str,<sp/>delimiter);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>the<sp/>trailing<sp/>delimiter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>str.erase(str.length()<sp/>-<sp/>delimiter.length());</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>(overwrite)<sp/>all<sp/>the<sp/>state<sp/>policies<sp/>contained<sp/>in<sp/>another<sp/>policy<sp/>within</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>policy.<sp/>Does<sp/>not<sp/>change<sp/>other<sp/>state<sp/>policies<sp/>not<sp/>contained<sp/>in<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>policy.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239" refid="classopen__spiel_1_1_tabular_policy_1aadd48620dda02dd41ddabbe9094be3cb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_tabular_policy_1aadd48620dda02dd41ddabbe9094be3cb" kindref="member">ImportPolicy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_tabular_policy" kindref="compound">TabularPolicy</ref>&amp;<sp/>other_policy)<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[info_state,<sp/>actions_and_probs]<sp/>:</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other_policy.<ref refid="classopen__spiel_1_1_tabular_policy_1a93b5d40a770b912d21da8cdc4557f387" kindref="member">policy_table_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classopen__spiel_1_1_tabular_policy_1a9e49a297648e0c5493b6d637b49ab97a" kindref="member">SetStatePolicy</ref>(info_state,<sp/>actions_and_probs);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>probability<sp/>for<sp/>action<sp/>at<sp/>the<sp/>info<sp/>state.<sp/>If<sp/>the<sp/>info<sp/>state<sp/>is<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>policy,<sp/>it<sp/>is<sp/>added.<sp/>If<sp/>the<sp/>action<sp/>is<sp/>not<sp/>in<sp/>the<sp/>info<sp/>state<sp/>policy,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>is<sp/>added.<sp/>Otherwise<sp/>it<sp/>is<sp/>modified.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249" refid="classopen__spiel_1_1_tabular_policy_1aecf68dd4e96c21ef396b9c539c81e801" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_tabular_policy_1aecf68dd4e96c21ef396b9c539c81e801" kindref="member">SetProb</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>info_state,<sp/><ref refid="namespaceopen__spiel_1a8aa5fc5cff0ef466697b1df5cbfcbd3a" kindref="member">Action</ref><sp/>action,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>prob)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>iter<sp/>=<sp/><ref refid="classopen__spiel_1_1_tabular_policy_1a93b5d40a770b912d21da8cdc4557f387" kindref="member">policy_table_</ref>.find(info_state);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter<sp/>==<sp/><ref refid="classopen__spiel_1_1_tabular_policy_1a93b5d40a770b912d21da8cdc4557f387" kindref="member">policy_table_</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>iter_and_bool<sp/>=<sp/><ref refid="classopen__spiel_1_1_tabular_policy_1a93b5d40a770b912d21da8cdc4557f387" kindref="member">policy_table_</ref>.insert({info_state,<sp/>{}});</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iter<sp/>=<sp/>iter_and_bool.first;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1af107cfba13b9ff637482f49799818200" kindref="member">open_spiel::SetProb</ref>(&amp;(iter-&gt;second),<sp/>action,<sp/>prob);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258" refid="classopen__spiel_1_1_tabular_policy_1a9e49a297648e0c5493b6d637b49ab97a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_tabular_policy_1a9e49a297648e0c5493b6d637b49ab97a" kindref="member">SetStatePolicy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>info_state,</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1ac4ea6d9d7193ac74f6f333b954e3810f" kindref="member">ActionsAndProbs</ref>&amp;<sp/>state_policy)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classopen__spiel_1_1_tabular_policy_1a93b5d40a770b912d21da8cdc4557f387" kindref="member">policy_table_</ref>[info_state]<sp/>=<sp/>state_policy;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263" refid="classopen__spiel_1_1_tabular_policy_1aeb80cea37a604e77f71a6a7c25c5d6de" refkind="member"><highlight class="normal"><sp/><sp/>std::unordered_map&lt;std::string,<sp/>ActionsAndProbs&gt;&amp;<sp/><ref refid="classopen__spiel_1_1_tabular_policy_1aeb80cea37a604e77f71a6a7c25c5d6de" kindref="member">PolicyTable</ref>()<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_tabular_policy_1a93b5d40a770b912d21da8cdc4557f387" kindref="member">policy_table_</ref>;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267" refid="classopen__spiel_1_1_tabular_policy_1ac085bf612ba9b17e99f502ccb821b204" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::unordered_map&lt;std::string,<sp/>ActionsAndProbs&gt;&amp;<sp/><ref refid="classopen__spiel_1_1_tabular_policy_1ac085bf612ba9b17e99f502ccb821b204" kindref="member">PolicyTable</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_tabular_policy_1a93b5d40a770b912d21da8cdc4557f387" kindref="member">policy_table_</ref>;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271" refid="classopen__spiel_1_1_tabular_policy_1a7934bc1202dd35cf11d4bc9c246bedb7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_tabular_policy_1a7934bc1202dd35cf11d4bc9c246bedb7" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_tabular_policy_1a93b5d40a770b912d21da8cdc4557f387" kindref="member">policy_table_</ref>.size();<sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classopen__spiel_1_1_tabular_policy_1a66508a71bd025c53277794d08ea9b20d" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>ToString<sp/>where<sp/>the<sp/>keys<sp/>are<sp/>sorted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classopen__spiel_1_1_tabular_policy_1a1e05d745134aee24d272f29e883d51e6" kindref="member">ToStringSorted</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="279" refid="classopen__spiel_1_1_tabular_policy_1a93b5d40a770b912d21da8cdc4557f387" refkind="member"><highlight class="normal"><sp/><sp/>std::unordered_map&lt;std::string,<sp/>ActionsAndProbs&gt;<sp/><ref refid="classopen__spiel_1_1_tabular_policy_1a93b5d40a770b912d21da8cdc4557f387" kindref="member">policy_table_</ref>;</highlight></codeline>
<codeline lineno="280"><highlight class="normal">};</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>partial<sp/>tabular<sp/>policy<sp/>is<sp/>one<sp/>that<sp/>is<sp/>not<sp/>entirely<sp/>complete:<sp/>only<sp/>a<sp/>subset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>full<sp/>table<sp/>is<sp/>included.<sp/>When<sp/>called<sp/>on<sp/>state<sp/>that<sp/>is<sp/>not<sp/>in<sp/>the<sp/>table,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>specific<sp/>fallback<sp/>policy<sp/>is<sp/>queried<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285" refid="classopen__spiel_1_1_partial_tabular_policy" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classopen__spiel_1_1_partial_tabular_policy" kindref="compound">PartialTabularPolicy</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_tabular_policy" kindref="compound">TabularPolicy</ref><sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>an<sp/>empty<sp/>partial<sp/>tabular<sp/>policy<sp/>with<sp/>a<sp/>uniform<sp/>fallback<sp/>policy.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><ref refid="classopen__spiel_1_1_partial_tabular_policy_1afab39f02223fcb2247ffd119eba13fba" kindref="member">PartialTabularPolicy</ref>();</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>partial<sp/>tabular<sp/>policy<sp/>with<sp/>the<sp/>specified<sp/>table<sp/>with<sp/>a<sp/>uniform</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>fallback<sp/>policy.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><ref refid="classopen__spiel_1_1_partial_tabular_policy_1afab39f02223fcb2247ffd119eba13fba" kindref="member">PartialTabularPolicy</ref>(</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::unordered_map&lt;std::string,<sp/>ActionsAndProbs&gt;&amp;<sp/>table);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>partial<sp/>tabular<sp/>policy<sp/>with<sp/>the<sp/>specified<sp/>table<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>specified<sp/>fallback<sp/>policy.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><ref refid="classopen__spiel_1_1_partial_tabular_policy_1afab39f02223fcb2247ffd119eba13fba" kindref="member">PartialTabularPolicy</ref>(</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::unordered_map&lt;std::string,<sp/>ActionsAndProbs&gt;&amp;<sp/>table,</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Policy&gt;<sp/>fallback_policy);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>retrieval<sp/>methods<sp/>are<sp/>all<sp/>modified<sp/>in<sp/>the<sp/>same<sp/>way:<sp/>they<sp/>first<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>key<sp/>is<sp/>in<sp/>the<sp/>table.<sp/>If<sp/>so,<sp/>they<sp/>return<sp/>the<sp/>state<sp/>policy<sp/>from<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>table.<sp/>Otherwise,<sp/>they<sp/>forward<sp/>the<sp/>call<sp/>to<sp/>the<sp/>fallback<sp/>policy.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><ref refid="namespaceopen__spiel_1ac4ea6d9d7193ac74f6f333b954e3810f" kindref="member">ActionsAndProbs</ref><sp/><ref refid="classopen__spiel_1_1_partial_tabular_policy_1a10ef080e41044e62f0704153d89ca016" kindref="member">GetStatePolicy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state" kindref="compound">State</ref>&amp;<sp/>state)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><ref refid="namespaceopen__spiel_1ac4ea6d9d7193ac74f6f333b954e3810f" kindref="member">ActionsAndProbs</ref><sp/><ref refid="classopen__spiel_1_1_partial_tabular_policy_1a10ef080e41044e62f0704153d89ca016" kindref="member">GetStatePolicy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state" kindref="compound">State</ref>&amp;<sp/>state,</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a8e9bf6a040c687a9f0c8393728dc0121" kindref="member">Player</ref><sp/>player)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><ref refid="namespaceopen__spiel_1ac4ea6d9d7193ac74f6f333b954e3810f" kindref="member">ActionsAndProbs</ref><sp/><ref refid="classopen__spiel_1_1_partial_tabular_policy_1a10ef080e41044e62f0704153d89ca016" kindref="member">GetStatePolicy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>info_state)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Policy&gt;<sp/>fallback_policy_;</highlight></codeline>
<codeline lineno="311"><highlight class="normal">};</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal">std::unique_ptr&lt;TabularPolicy&gt;<sp/><ref refid="namespaceopen__spiel_1a0ed3e36da1be8bc1313510099d897c06" kindref="member">DeserializeTabularPolicy</ref>(</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>serialized,<sp/>std::string<sp/>delimiter<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&lt;~&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Chooses<sp/>all<sp/>legal<sp/>actions<sp/>with<sp/>equal<sp/>probability.<sp/>This<sp/>is<sp/>equivalent<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="comment">//<sp/>tabular<sp/>version,<sp/>except<sp/>that<sp/>this<sp/>works<sp/>for<sp/>large<sp/>games.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318" refid="classopen__spiel_1_1_uniform_policy" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classopen__spiel_1_1_uniform_policy" kindref="compound">UniformPolicy</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_policy" kindref="compound">Policy</ref><sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="320" refid="classopen__spiel_1_1_uniform_policy_1af74a3922b9944a32fd4a82024a3b5721" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespaceopen__spiel_1ac4ea6d9d7193ac74f6f333b954e3810f" kindref="member">ActionsAndProbs</ref><sp/><ref refid="classopen__spiel_1_1_uniform_policy_1af74a3922b9944a32fd4a82024a3b5721" kindref="member">GetStatePolicy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state" kindref="compound">State</ref>&amp;<sp/>state,</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a8e9bf6a040c687a9f0c8393728dc0121" kindref="member">Player</ref><sp/>player)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state.IsSimultaneousNode())<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1ad329b96a775a4a21bebf491968d87cfe" kindref="member">UniformStatePolicy</ref>(state,<sp/>player);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="spiel__utils_8h_1ac998e613afb013e8bd31b3da80f747ae" kindref="member">SPIEL_CHECK_TRUE</ref>(state.IsPlayerActing(player));</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1ad329b96a775a4a21bebf491968d87cfe" kindref="member">UniformStatePolicy</ref>(state);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330" refid="classopen__spiel_1_1_uniform_policy_1a37f911b641117b3d8f8f7279cbb13c87" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classopen__spiel_1_1_uniform_policy_1a37f911b641117b3d8f8f7279cbb13c87" kindref="member">Serialize</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>double_precision<sp/>=<sp/>-1,</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>delimiter<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;UniformPolicy:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal">};</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Among<sp/>all<sp/>legal<sp/>actions,<sp/>choose<sp/>the<sp/>first<sp/>action<sp/>deterministically.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337" refid="classopen__spiel_1_1_first_action_policy" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classopen__spiel_1_1_first_action_policy" kindref="compound">FirstActionPolicy</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_policy" kindref="compound">Policy</ref><sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="339" refid="classopen__spiel_1_1_first_action_policy_1af1170c5460cac64d6321ab2a6fa1a181" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespaceopen__spiel_1ac4ea6d9d7193ac74f6f333b954e3810f" kindref="member">ActionsAndProbs</ref><sp/><ref refid="classopen__spiel_1_1_first_action_policy_1af1170c5460cac64d6321ab2a6fa1a181" kindref="member">GetStatePolicy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state" kindref="compound">State</ref>&amp;<sp/>state,</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a8e9bf6a040c687a9f0c8393728dc0121" kindref="member">Player</ref><sp/>player)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state.IsSimultaneousNode())<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1a0ff11c30833a9d4a5c12510080596429" kindref="member">FirstActionStatePolicy</ref>(state,<sp/>player);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="spiel__utils_8h_1ac998e613afb013e8bd31b3da80f747ae" kindref="member">SPIEL_CHECK_TRUE</ref>(state.IsPlayerActing(player));</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1a0ff11c30833a9d4a5c12510080596429" kindref="member">FirstActionStatePolicy</ref>(state);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349" refid="classopen__spiel_1_1_first_action_policy_1a4b51bc6754d382aac6f47485a1797e80" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classopen__spiel_1_1_first_action_policy_1a4b51bc6754d382aac6f47485a1797e80" kindref="member">Serialize</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>double_precision<sp/>=<sp/>-1,</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>delimiter<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;FirstActionPolicy:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal">};</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>deterministic<sp/>policy<sp/>with<sp/>which<sp/>takes<sp/>legal<sp/>actions<sp/>in<sp/>order<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="comment">//<sp/>preference<sp/>specified<sp/>by<sp/>pref_actions.<sp/>The<sp/>function<sp/>will<sp/>check-fail<sp/>if<sp/>none</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>pref_action<sp/>elements<sp/>are<sp/>legal<sp/>for<sp/>a<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>example,<sp/>PreferredActionPolicy(leduc,<sp/>{kRaise,<sp/>kCall})<sp/>constructs<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="comment">//<sp/>policy<sp/>that<sp/>always<sp/>raises<sp/>and<sp/>only<sp/>falls<sp/>back<sp/>to<sp/>call<sp/>if<sp/>raise<sp/>is<sp/>not<sp/>a<sp/>legal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="comment">//<sp/>action.<sp/>If<sp/>it<sp/>is<sp/>possible<sp/>for<sp/>nethier<sp/>raise<sp/>nor<sp/>call<sp/>to<sp/>be<sp/>valid<sp/>actions<sp/>in<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="comment">//<sp/>state<sp/>in<sp/>leduc,<sp/>the<sp/>function<sp/>will<sp/>fail.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363" refid="classopen__spiel_1_1_preferred_action_policy" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classopen__spiel_1_1_preferred_action_policy" kindref="compound">PreferredActionPolicy</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_policy" kindref="compound">Policy</ref><sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="365" refid="classopen__spiel_1_1_preferred_action_policy_1a712f0268c356a5d2ca1d90b796d982e9" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classopen__spiel_1_1_preferred_action_policy_1a712f0268c356a5d2ca1d90b796d982e9" kindref="member">PreferredActionPolicy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Action&gt;&amp;<sp/>preference_order)</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>preference_order_(preference_order)<sp/>{}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><ref refid="namespaceopen__spiel_1ac4ea6d9d7193ac74f6f333b954e3810f" kindref="member">ActionsAndProbs</ref><sp/><ref refid="classopen__spiel_1_1_preferred_action_policy_1ad4cccc4bd0b7060f4d04a47f716a408a" kindref="member">GetStatePolicy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state" kindref="compound">State</ref>&amp;<sp/>state,</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a8e9bf6a040c687a9f0c8393728dc0121" kindref="member">Player</ref><sp/>player)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371" refid="classopen__spiel_1_1_preferred_action_policy_1a7d159ec9a8610fab3795cb18f3e83b6b" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classopen__spiel_1_1_preferred_action_policy_1a7d159ec9a8610fab3795cb18f3e83b6b" kindref="member">Serialize</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>double_precision<sp/>=<sp/>-1,</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>delimiter<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(</highlight><highlight class="stringliteral">&quot;Unimplemented.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>std::vector&lt;Action&gt;<sp/>preference_order_;</highlight></codeline>
<codeline lineno="378"><highlight class="normal">};</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Takes<sp/>any<sp/>policy<sp/>and<sp/>returns<sp/>a<sp/>tabular<sp/>policy<sp/>by<sp/>traversing<sp/>the<sp/>game<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="comment">//<sp/>building<sp/>a<sp/>tabular<sp/>policy<sp/>for<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal">TabularPolicy<sp/><ref refid="namespaceopen__spiel_1a869a3dd2e31acc33871b10af3ce370d0" kindref="member">ToTabularPolicy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Game&amp;<sp/>game,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Policy*<sp/>policy);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>functions<sp/>that<sp/>generate<sp/>policies<sp/>for<sp/>testing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>player<sp/>parameter<sp/>can<sp/>be<sp/>used<sp/>to<sp/>only<sp/>generate<sp/>policies<sp/>for<sp/>a<sp/>single</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="comment">//<sp/>player.<sp/>By<sp/>default<sp/>-1<sp/>will<sp/>generate<sp/>policies<sp/>for<sp/>all<sp/>players.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal">TabularPolicy<sp/><ref refid="namespaceopen__spiel_1aab6328ff82289cc5a639af623b07983f" kindref="member">GetEmptyTabularPolicy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Game&amp;<sp/>game,</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>initialize_to_uniform<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a8e9bf6a040c687a9f0c8393728dc0121" kindref="member">Player</ref><sp/>player<sp/>=<sp/>-1);</highlight></codeline>
<codeline lineno="390"><highlight class="normal">TabularPolicy<sp/><ref refid="namespaceopen__spiel_1aa722abb4a8f0f206a1b109c4ee77b2bd" kindref="member">GetUniformPolicy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Game&amp;<sp/>game);</highlight></codeline>
<codeline lineno="391"><highlight class="normal">TabularPolicy<sp/><ref refid="namespaceopen__spiel_1abf366a47eada8918036c7cfe054e263a" kindref="member">GetRandomPolicy</ref>(</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Game&amp;<sp/>game,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seed<sp/>=<sp/>0,<sp/><ref refid="namespaceopen__spiel_1a8e9bf6a040c687a9f0c8393728dc0121" kindref="member">Player</ref><sp/>player<sp/>=<sp/>-1);</highlight></codeline>
<codeline lineno="393"><highlight class="normal">TabularPolicy<sp/><ref refid="namespaceopen__spiel_1a8505b434fc79f0f377c33811bb1c42e4" kindref="member">GetFlatDirichletPolicy</ref>(</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Game&amp;<sp/>game,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seed<sp/>=<sp/>0,<sp/><ref refid="namespaceopen__spiel_1a8e9bf6a040c687a9f0c8393728dc0121" kindref="member">Player</ref><sp/>player<sp/>=<sp/>-1);</highlight></codeline>
<codeline lineno="395"><highlight class="normal">TabularPolicy<sp/><ref refid="namespaceopen__spiel_1a5dc710e7fbd94c8c96e616086be2437d" kindref="member">GetRandomDeterministicPolicy</ref>(</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Game&amp;<sp/>game,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seed<sp/>=<sp/>0,<sp/><ref refid="namespaceopen__spiel_1a8e9bf6a040c687a9f0c8393728dc0121" kindref="member">Player</ref><sp/>player<sp/>=<sp/>-1);</highlight></codeline>
<codeline lineno="397"><highlight class="normal">TabularPolicy<sp/><ref refid="namespaceopen__spiel_1a0fa54efbbbe01ea0ece4b0323105158c" kindref="member">GetFirstActionPolicy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Game&amp;<sp/>game);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>preferred<sp/>action<sp/>policy<sp/>as<sp/>a<sp/>tabular<sp/>policy.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal">TabularPolicy<sp/><ref refid="namespaceopen__spiel_1ab8ac671460647a64df4b861b3879f32b" kindref="member">GetPrefActionPolicy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Game&amp;<sp/>game,</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Action&gt;&amp;<sp/>pref_action);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal">std::string<sp/><ref refid="namespaceopen__spiel_1a9867a0567fef1b912a4ce027e7388ef2" kindref="member">PrintPolicy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1ac4ea6d9d7193ac74f6f333b954e3810f" kindref="member">ActionsAndProbs</ref>&amp;<sp/>policy);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Takes<sp/>many<sp/>tabular<sp/>policy<sp/>and<sp/>merges<sp/>them<sp/>into<sp/>one.<sp/>If<sp/>check_no_overlap<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="comment">//<sp/>set,<sp/>then<sp/>a<sp/>check<sp/>is<sp/>done<sp/>to<sp/>ensure<sp/>that<sp/>there<sp/>is<sp/>no<sp/>intersection<sp/>among<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="comment">//<sp/>policies<sp/>(slow:<sp/>involves<sp/>iterating<sp/>over<sp/>each).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal">TabularPolicy<sp/><ref refid="namespaceopen__spiel_1a9d4e65df2e25cb6f13ab027a35419458" kindref="member">ToJointTabularPolicy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;TabularPolicy&gt;&amp;<sp/>policies,</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>check_no_overlap);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>open_spiel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>OPEN_SPIEL_POLICY_H_</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="open_spiel/policy.h"/>
  </compounddef>
</doxygen>
