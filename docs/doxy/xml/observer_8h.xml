<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="observer_8h" kind="file" language="C++">
    <compoundname>observer.h</compoundname>
    <includes local="no">memory</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes local="yes">open_spiel/abseil-cpp/absl/algorithm/container.h</includes>
    <includes local="yes">open_spiel/abseil-cpp/absl/base/attributes.h</includes>
    <includes local="yes">open_spiel/abseil-cpp/absl/container/flat_hash_set.h</includes>
    <includes local="yes">open_spiel/abseil-cpp/absl/container/inlined_vector.h</includes>
    <includes local="yes">open_spiel/abseil-cpp/absl/strings/string_view.h</includes>
    <includes local="yes">open_spiel/abseil-cpp/absl/strings/str_join.h</includes>
    <includes local="yes">open_spiel/abseil-cpp/absl/types/span.h</includes>
    <includes refid="game__parameters_8h" local="yes">open_spiel/game_parameters.h</includes>
    <includes refid="spiel__utils_8h" local="yes">open_spiel/spiel_utils.h</includes>
    <includedby refid="observer_8cc" local="yes">open_spiel/observer.cc</includedby>
    <includedby refid="spiel_8h" local="yes">open_spiel/spiel.h</includedby>
    <incdepgraph>
      <node id="12">
        <label>open_spiel/game_parameters.h</label>
        <link refid="game__parameters_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>open_spiel/observer.h</label>
        <link refid="observer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>open_spiel/spiel_utils.h</label>
        <link refid="spiel__utils_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>algorithm</label>
      </node>
      <node id="19">
        <label>array</label>
      </node>
      <node id="20">
        <label>cmath</label>
      </node>
      <node id="21">
        <label>cstddef</label>
      </node>
      <node id="22">
        <label>cstdint</label>
      </node>
      <node id="23">
        <label>functional</label>
      </node>
      <node id="13">
        <label>iostream</label>
      </node>
      <node id="14">
        <label>map</label>
      </node>
      <node id="2">
        <label>memory</label>
      </node>
      <node id="5">
        <label>open_spiel/abseil-cpp/absl/algorithm/container.h</label>
      </node>
      <node id="6">
        <label>open_spiel/abseil-cpp/absl/base/attributes.h</label>
      </node>
      <node id="7">
        <label>open_spiel/abseil-cpp/absl/container/flat_hash_set.h</label>
      </node>
      <node id="8">
        <label>open_spiel/abseil-cpp/absl/container/inlined_vector.h</label>
      </node>
      <node id="27">
        <label>open_spiel/abseil-cpp/absl/random/uniform_real_distribution.h</label>
      </node>
      <node id="28">
        <label>open_spiel/abseil-cpp/absl/strings/str_cat.h</label>
      </node>
      <node id="10">
        <label>open_spiel/abseil-cpp/absl/strings/str_join.h</label>
      </node>
      <node id="9">
        <label>open_spiel/abseil-cpp/absl/strings/string_view.h</label>
      </node>
      <node id="29">
        <label>open_spiel/abseil-cpp/absl/time/clock.h</label>
      </node>
      <node id="30">
        <label>open_spiel/abseil-cpp/absl/time/time.h</label>
      </node>
      <node id="16">
        <label>open_spiel/abseil-cpp/absl/types/optional.h</label>
      </node>
      <node id="11">
        <label>open_spiel/abseil-cpp/absl/types/span.h</label>
      </node>
      <node id="24">
        <label>random</label>
      </node>
      <node id="25">
        <label>sstream</label>
      </node>
      <node id="3">
        <label>string</label>
      </node>
      <node id="26">
        <label>type_traits</label>
      </node>
      <node id="15">
        <label>utility</label>
      </node>
      <node id="4">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>open_spiel/action_view.cc</label>
        <link refid="action__view_8cc"/>
      </node>
      <node id="5">
        <label>open_spiel/action_view.h</label>
        <link refid="action__view_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>open_spiel/games/SG/baseT.cc</label>
        <link refid="base_t_8cc"/>
      </node>
      <node id="7">
        <label>open_spiel/games/SG/baseT.h</label>
        <link refid="base_t_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>open_spiel/games/SG/baseT_utils.cc</label>
        <link refid="base_t__utils_8cc"/>
      </node>
      <node id="13">
        <label>open_spiel/games/SG/baseType.h</label>
        <link refid="base_type_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>open_spiel/games/SG/kbg_test.cc</label>
        <link refid="kbg__test_8cc"/>
      </node>
      <node id="12">
        <label>open_spiel/games/SG/ki_bo_gung.cc</label>
        <link refid="ki__bo__gung_8cc"/>
      </node>
      <node id="10">
        <label>open_spiel/games/SG/ki_bo_gung.h</label>
        <link refid="ki__bo__gung_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>open_spiel/matrix_game.cc</label>
        <link refid="matrix__game_8cc"/>
      </node>
      <node id="15">
        <label>open_spiel/matrix_game.h</label>
        <link refid="matrix__game_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>open_spiel/normal_form_game.h</label>
        <link refid="normal__form__game_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>open_spiel/observer.cc</label>
        <link refid="observer_8cc"/>
      </node>
      <node id="1">
        <label>open_spiel/observer.h</label>
        <link refid="observer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>open_spiel/policy.cc</label>
        <link refid="policy_8cc"/>
      </node>
      <node id="20">
        <label>open_spiel/policy.h</label>
        <link refid="policy_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>open_spiel/simultaneous_move_game.cc</label>
        <link refid="simultaneous__move__game_8cc"/>
      </node>
      <node id="23">
        <label>open_spiel/simultaneous_move_game.h</label>
        <link refid="simultaneous__move__game_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>open_spiel/spiel.cc</label>
        <link refid="spiel_8cc"/>
      </node>
      <node id="3">
        <label>open_spiel/spiel.h</label>
        <link refid="spiel_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>open_spiel/spiel_bots.cc</label>
        <link refid="spiel__bots_8cc"/>
      </node>
      <node id="22">
        <label>open_spiel/spiel_bots.h</label>
        <link refid="spiel__bots_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>open_spiel/tensor_game.cc</label>
        <link refid="tensor__game_8cc"/>
      </node>
      <node id="16">
        <label>open_spiel/tensor_game.h</label>
        <link refid="tensor__game_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classopen__spiel_1_1_span_tensor_info" prot="public">open_spiel::SpanTensorInfo</innerclass>
    <innerclass refid="classopen__spiel_1_1_span_tensor" prot="public">open_spiel::SpanTensor</innerclass>
    <innerclass refid="classopen__spiel_1_1_allocator" prot="public">open_spiel::Allocator</innerclass>
    <innerclass refid="classopen__spiel_1_1_contiguous_allocator" prot="public">open_spiel::ContiguousAllocator</innerclass>
    <innerclass refid="classopen__spiel_1_1_tracking_vector_allocator" prot="public">open_spiel::TrackingVectorAllocator</innerclass>
    <innerclass refid="structopen__spiel_1_1_i_i_g_observation_type" prot="public">open_spiel::IIGObservationType</innerclass>
    <innerclass refid="classopen__spiel_1_1_observer" prot="public">open_spiel::Observer</innerclass>
    <innerclass refid="classopen__spiel_1_1_observation" prot="public">open_spiel::Observation</innerclass>
    <innerclass refid="classopen__spiel_1_1_observer_registerer" prot="public">open_spiel::ObserverRegisterer</innerclass>
    <innerclass refid="classopen__spiel_1_1_register_single_tensor_observer" prot="public">open_spiel::RegisterSingleTensorObserver</innerclass>
    <innernamespace refid="namespaceopen__spiel">open_spiel</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2019<sp/>DeepMind<sp/>Technologies<sp/>Limited</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPEN_SPIEL_OBSERVER_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>OPEN_SPIEL_OBSERVER_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>class<sp/>is<sp/>the<sp/>primary<sp/>method<sp/>for<sp/>getting<sp/>observations<sp/>from<sp/>games.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>Game<sp/>object<sp/>has<sp/>a<sp/>MakeObserver()<sp/>method<sp/>which<sp/>returns<sp/>an<sp/>Observer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>object<sp/>given<sp/>a<sp/>specification<sp/>of<sp/>the<sp/>required<sp/>observation<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>access<sp/>observation<sp/>from<sp/>C++,<sp/>first<sp/>initialize<sp/>an<sp/>observer<sp/>and<sp/>observation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>the<sp/>game<sp/>(one<sp/>time<sp/>only).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>auto<sp/>observer<sp/>=<sp/>game-&gt;MakeObserver(iig_obs_type,<sp/>params);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Observation<sp/>observation(*game,<sp/>observer);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Then<sp/>for<sp/>states<sp/>in<sp/>a<sp/>trajectory,<sp/>get<sp/>a<sp/>tensor<sp/>observation<sp/>using:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>observation.SetFrom(state,<sp/>player);<sp/><sp/><sp/>//<sp/>populates<sp/>observation.Tensor()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>resultant<sp/>tensor<sp/>is<sp/>accessible<sp/>from<sp/>observation.Tensor().<sp/>Note<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>decomposition<sp/>of<sp/>the<sp/>tensor<sp/>into<sp/>named<sp/>pieces<sp/>is<sp/>not<sp/>currently<sp/>available</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>through<sp/>this<sp/>API<sp/>(it<sp/>is<sp/>available<sp/>in<sp/>Python).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>obtain<sp/>a<sp/>string<sp/>observation:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::string<sp/>string_obs<sp/>=<sp/>observation.StringFrom(state,<sp/>player);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Access<sp/>from<sp/>Python<sp/>follows<sp/>a<sp/>similar<sp/>pattern,<sp/>with<sp/>the<sp/>addition<sp/>of<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>accessing<sp/>pieces<sp/>of<sp/>the<sp/>observation<sp/>tensor<sp/>by<sp/>name.<sp/>See<sp/>`observation.py`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>`observation_test.py`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;open_spiel/abseil-cpp/absl/algorithm/container.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;open_spiel/abseil-cpp/absl/base/attributes.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;open_spiel/abseil-cpp/absl/container/flat_hash_set.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;open_spiel/abseil-cpp/absl/container/inlined_vector.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;open_spiel/abseil-cpp/absl/strings/string_view.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;open_spiel/abseil-cpp/absl/strings/str_join.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;open_spiel/abseil-cpp/absl/types/span.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="game__parameters_8h" kindref="compound">open_spiel/game_parameters.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="spiel__utils_8h" kindref="compound">open_spiel/spiel_utils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceopen__spiel" kindref="compound">open_spiel</ref><sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Forward<sp/>declarations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Game;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">State;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="namespaceopen__spiel_1aac43798f2a15711572119a41e8a91466" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespaceopen__spiel_1aac43798f2a15711572119a41e8a91466" kindref="member">ObservationParams</ref><sp/>=<sp/><ref refid="namespaceopen__spiel_1ad7c4d931669b5e357cb5c7f84a6de094" kindref="member">GameParameters</ref>;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Information<sp/>about<sp/>a<sp/>multi-dimensional<sp/>tensor<sp/>span,<sp/>eg<sp/>name,<sp/>shape,<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO(author16)<sp/>add<sp/>types<sp/>information.<sp/>For<sp/>now<sp/>only<sp/>floats<sp/>are<sp/>supported.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="classopen__spiel_1_1_span_tensor_info" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classopen__spiel_1_1_span_tensor_info" kindref="compound">SpanTensorInfo</ref><sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="70" refid="classopen__spiel_1_1_span_tensor_info_1afea1a4cd70be77071f91121a97d8c8ff" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classopen__spiel_1_1_span_tensor_info_1afea1a4cd70be77071f91121a97d8c8ff" kindref="member">Shape</ref><sp/>=<sp/>absl::InlinedVector&lt;int,<sp/>4&gt;;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="classopen__spiel_1_1_span_tensor_info_1acebcab819f2cb4ed71dee781162fc02c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classopen__spiel_1_1_span_tensor_info_1acebcab819f2cb4ed71dee781162fc02c" kindref="member">SpanTensorInfo</ref>(absl::string_view<sp/><ref refid="classopen__spiel_1_1_span_tensor_info_1a53a60f633c4778ede4a8dd8819bd2436" kindref="member">name</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_span_tensor_info_1afea1a4cd70be77071f91121a97d8c8ff" kindref="member">Shape</ref>&amp;<sp/><ref refid="classopen__spiel_1_1_span_tensor_info_1a3a440d00dc7daa041c25b49e2b3e91d6" kindref="member">shape</ref>)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>name_(<ref refid="classopen__spiel_1_1_span_tensor_info_1a53a60f633c4778ede4a8dd8819bd2436" kindref="member">name</ref>),<sp/>shape_(<ref refid="classopen__spiel_1_1_span_tensor_info_1a3a440d00dc7daa041c25b49e2b3e91d6" kindref="member">shape</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="classopen__spiel_1_1_span_tensor_info_1a53a60f633c4778ede4a8dd8819bd2436" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="classopen__spiel_1_1_span_tensor_info_1a53a60f633c4778ede4a8dd8819bd2436" kindref="member">name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name_;<sp/>}</highlight></codeline>
<codeline lineno="76" refid="classopen__spiel_1_1_span_tensor_info_1a3a440d00dc7daa041c25b49e2b3e91d6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_span_tensor_info_1afea1a4cd70be77071f91121a97d8c8ff" kindref="member">Shape</ref>&amp;<sp/><ref refid="classopen__spiel_1_1_span_tensor_info_1a3a440d00dc7daa041c25b49e2b3e91d6" kindref="member">shape</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shape_;<sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Convenience<sp/>accessor<sp/>for<sp/>the<sp/>shape<sp/>as<sp/>a<sp/>plain<sp/>vector<sp/>of<sp/>ints.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">_type<sp/>=<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">32_t&gt;</highlight></codeline>
<codeline lineno="80" refid="classopen__spiel_1_1_span_tensor_info_1abfcfbfa5bff0553725ec2ddf54d5f2b4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::vector&lt;int_type&gt;<sp/><ref refid="classopen__spiel_1_1_span_tensor_info_1abfcfbfa5bff0553725ec2ddf54d5f2b4" kindref="member">vector_shape</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{shape_.begin(),<sp/>shape_.end()};</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>floats<sp/>in<sp/>a<sp/>tensor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="classopen__spiel_1_1_span_tensor_info_1a8b285f32d9f13ccd8083780760fab2f0" refkind="member"><highlight class="normal"><sp/><sp/>int32_t<sp/><ref refid="classopen__spiel_1_1_span_tensor_info_1a8b285f32d9f13ccd8083780760fab2f0" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::accumulate(shape_.begin(),<sp/>shape_.end(),<sp/>1,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::multiplies&lt;int32_t&gt;());</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Akin<sp/>to<sp/>numpy.ndarray.nbytes<sp/>returns<sp/>the<sp/>memory<sp/>footprint.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="classopen__spiel_1_1_span_tensor_info_1ab8f1829fc07afc19cad61098885ebd43" refkind="member"><highlight class="normal"><sp/><sp/>int32_t<sp/><ref refid="classopen__spiel_1_1_span_tensor_info_1ab8f1829fc07afc19cad61098885ebd43" kindref="member">nbytes</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_span_tensor_info_1a8b285f32d9f13ccd8083780760fab2f0" kindref="member">size</ref>()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(float);<sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="classopen__spiel_1_1_span_tensor_info_1a89787533e52d6737958605b60a29c277" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classopen__spiel_1_1_span_tensor_info_1a89787533e52d6737958605b60a29c277" kindref="member">DebugString</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>absl::StrCat(</highlight><highlight class="stringliteral">&quot;SpanTensor(name=&apos;&quot;</highlight><highlight class="normal">,<sp/><ref refid="classopen__spiel_1_1_span_tensor_info_1a53a60f633c4778ede4a8dd8819bd2436" kindref="member">name</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;&apos;,<sp/>shape=(&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>absl::StrJoin(shape_,<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;),<sp/>nbytes=&quot;</highlight><highlight class="normal">,<sp/><ref refid="classopen__spiel_1_1_span_tensor_info_1ab8f1829fc07afc19cad61098885ebd43" kindref="member">nbytes</ref>(),</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>std::string<sp/>name_;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><ref refid="classopen__spiel_1_1_span_tensor_info_1afea1a4cd70be77071f91121a97d8c8ff" kindref="member">Shape</ref><sp/>shape_;</highlight></codeline>
<codeline lineno="102"><highlight class="normal">};</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>tensor<sp/>backed<sp/>up<sp/>by<sp/>a<sp/>data<sp/>buffer<sp/>*not*<sp/>owned<sp/>by<sp/>SpanTensor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>view<sp/>class<sp/>that<sp/>points<sp/>to<sp/>some<sp/>externally<sp/>owned<sp/>data<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>helps<sp/>with<sp/>accessing<sp/>and<sp/>modifying<sp/>the<sp/>data<sp/>via<sp/>its<sp/>`at`<sp/>methods.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>class<sp/>has<sp/>the<sp/>pointer<sp/>semantics,<sp/>akin<sp/>to<sp/>`std::unique_ptr`<sp/>or<sp/>a<sp/>raw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">//<sp/>pointer,<sp/>where<sp/>`SpanTensor`<sp/>just<sp/>&quot;points&quot;<sp/>to<sp/>an<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>particular<sp/>helper<sp/>accessor<sp/>methods<sp/>like<sp/>`data`<sp/>or<sp/>`at`<sp/>are<sp/>marked<sp/>as<sp/>const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>still<sp/>give<sp/>access<sp/>to<sp/>mutable<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="classopen__spiel_1_1_span_tensor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classopen__spiel_1_1_span_tensor" kindref="compound">SpanTensor</ref><sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="115" refid="classopen__spiel_1_1_span_tensor_1a68a316318f5867aa4f369e080c1a31a6" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classopen__spiel_1_1_span_tensor_1a68a316318f5867aa4f369e080c1a31a6" kindref="member">SpanTensor</ref>(<ref refid="classopen__spiel_1_1_span_tensor_info" kindref="compound">SpanTensorInfo</ref><sp/><ref refid="classopen__spiel_1_1_span_tensor_1a47da61757928eddeeb3d4c4f3071c38f" kindref="member">info</ref>,<sp/>absl::Span&lt;float&gt;<sp/><ref refid="classopen__spiel_1_1_span_tensor_1a2729256a5c8df1ac0ebf205962bc142f" kindref="member">data</ref>)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>info_(std::move(<ref refid="classopen__spiel_1_1_span_tensor_1a47da61757928eddeeb3d4c4f3071c38f" kindref="member">info</ref>)),<sp/>data_(<ref refid="classopen__spiel_1_1_span_tensor_1a2729256a5c8df1ac0ebf205962bc142f" kindref="member">data</ref>)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="spiel__utils_8h_1abcb08ef83297cd8a69ac67d47cfa5da2" kindref="member">SPIEL_CHECK_EQ</ref>(info_.<ref refid="classopen__spiel_1_1_span_tensor_info_1a8b285f32d9f13ccd8083780760fab2f0" kindref="member">size</ref>(),<sp/>data_.size());</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="classopen__spiel_1_1_span_tensor_1a47da61757928eddeeb3d4c4f3071c38f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_span_tensor_info" kindref="compound">SpanTensorInfo</ref>&amp;<sp/><ref refid="classopen__spiel_1_1_span_tensor_1a47da61757928eddeeb3d4c4f3071c38f" kindref="member">info</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>info_;<sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122" refid="classopen__spiel_1_1_span_tensor_1a2729256a5c8df1ac0ebf205962bc142f" refkind="member"><highlight class="normal"><sp/><sp/>absl::Span&lt;float&gt;<sp/><ref refid="classopen__spiel_1_1_span_tensor_1a2729256a5c8df1ac0ebf205962bc142f" kindref="member">data</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_;<sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="classopen__spiel_1_1_span_tensor_1a25b62d439d56fac11cabe05e18229eba" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classopen__spiel_1_1_span_tensor_1a25b62d439d56fac11cabe05e18229eba" kindref="member">DebugString</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>info_.<ref refid="classopen__spiel_1_1_span_tensor_info_1a89787533e52d6737958605b60a29c277" kindref="member">DebugString</ref>();<sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mutators<sp/>of<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127" refid="classopen__spiel_1_1_span_tensor_1a84c149089d953972dd02a59bfa462a4c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/><ref refid="classopen__spiel_1_1_span_tensor_1a84c149089d953972dd02a59bfa462a4c" kindref="member">at</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="spiel__utils_8h_1ab7b97067e15f6941b08deaae7dc6013a" kindref="member">SPIEL_DCHECK_EQ</ref>(info_.<ref refid="classopen__spiel_1_1_span_tensor_info_1a3a440d00dc7daa041c25b49e2b3e91d6" kindref="member">shape</ref>().size(),<sp/>0);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_[0];</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="classopen__spiel_1_1_span_tensor_1ac308bc8cd13e33cc0f84818cd2d428ce" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/><ref refid="classopen__spiel_1_1_span_tensor_1ac308bc8cd13e33cc0f84818cd2d428ce" kindref="member">at</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="spiel__utils_8h_1ab7b97067e15f6941b08deaae7dc6013a" kindref="member">SPIEL_DCHECK_EQ</ref>(info_.<ref refid="classopen__spiel_1_1_span_tensor_info_1a3a440d00dc7daa041c25b49e2b3e91d6" kindref="member">shape</ref>().size(),<sp/>1);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_[idx];</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137" refid="classopen__spiel_1_1_span_tensor_1a98c5390d859059e4c890a600d36cd791" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/><ref refid="classopen__spiel_1_1_span_tensor_1a98c5390d859059e4c890a600d36cd791" kindref="member">at</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx2)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="spiel__utils_8h_1ab7b97067e15f6941b08deaae7dc6013a" kindref="member">SPIEL_DCHECK_EQ</ref>(info_.<ref refid="classopen__spiel_1_1_span_tensor_info_1a3a440d00dc7daa041c25b49e2b3e91d6" kindref="member">shape</ref>().size(),<sp/>2);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_[idx1<sp/>*<sp/>info_.<ref refid="classopen__spiel_1_1_span_tensor_info_1a3a440d00dc7daa041c25b49e2b3e91d6" kindref="member">shape</ref>()[1]<sp/>+<sp/>idx2];</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="classopen__spiel_1_1_span_tensor_1a6a545829323e838d8d18fb4b94d5fa94" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/><ref refid="classopen__spiel_1_1_span_tensor_1a6a545829323e838d8d18fb4b94d5fa94" kindref="member">at</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx3)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="spiel__utils_8h_1ab7b97067e15f6941b08deaae7dc6013a" kindref="member">SPIEL_DCHECK_EQ</ref>(info_.<ref refid="classopen__spiel_1_1_span_tensor_info_1a3a440d00dc7daa041c25b49e2b3e91d6" kindref="member">shape</ref>().size(),<sp/>3);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_[(idx1<sp/>*<sp/>info_.<ref refid="classopen__spiel_1_1_span_tensor_info_1a3a440d00dc7daa041c25b49e2b3e91d6" kindref="member">shape</ref>()[1]<sp/>+<sp/>idx2)<sp/>*<sp/>info_.<ref refid="classopen__spiel_1_1_span_tensor_info_1a3a440d00dc7daa041c25b49e2b3e91d6" kindref="member">shape</ref>()[2]<sp/>+<sp/>idx3];</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147" refid="classopen__spiel_1_1_span_tensor_1ab583f0b6dd0909226136353dfca8e372" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/><ref refid="classopen__spiel_1_1_span_tensor_1ab583f0b6dd0909226136353dfca8e372" kindref="member">at</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx4)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="spiel__utils_8h_1ab7b97067e15f6941b08deaae7dc6013a" kindref="member">SPIEL_DCHECK_EQ</ref>(info_.<ref refid="classopen__spiel_1_1_span_tensor_info_1a3a440d00dc7daa041c25b49e2b3e91d6" kindref="member">shape</ref>().size(),<sp/>4);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_[((idx1<sp/>*<sp/>info_.<ref refid="classopen__spiel_1_1_span_tensor_info_1a3a440d00dc7daa041c25b49e2b3e91d6" kindref="member">shape</ref>()[1]<sp/>+<sp/>idx2)<sp/>*<sp/>info_.<ref refid="classopen__spiel_1_1_span_tensor_info_1a3a440d00dc7daa041c25b49e2b3e91d6" kindref="member">shape</ref>()[2]<sp/>+<sp/>idx3)<sp/>*</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info_.<ref refid="classopen__spiel_1_1_span_tensor_info_1a3a440d00dc7daa041c25b49e2b3e91d6" kindref="member">shape</ref>()[3]<sp/>+</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx4];</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><ref refid="classopen__spiel_1_1_span_tensor_info" kindref="compound">SpanTensorInfo</ref><sp/>info_;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>absl::Span&lt;float&gt;<sp/>data_;</highlight></codeline>
<codeline lineno="157"><highlight class="normal">};</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>Allocator<sp/>is<sp/>responsible<sp/>for<sp/>returning<sp/>memory<sp/>for<sp/>an<sp/>Observer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160" refid="classopen__spiel_1_1_allocator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classopen__spiel_1_1_allocator" kindref="compound">Allocator</ref><sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>zero-initialized<sp/>memory<sp/>into<sp/>which<sp/>the<sp/>data<sp/>should<sp/>be<sp/>written.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>`name`<sp/>is<sp/>the<sp/>name<sp/>of<sp/>this<sp/>piece<sp/>of<sp/>the<sp/>tensor;<sp/>the<sp/>allocator<sp/>may</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>it<sp/>to<sp/>label<sp/>the<sp/>tensor<sp/>when<sp/>accessed<sp/>by<sp/>the<sp/>clients.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165" refid="classopen__spiel_1_1_allocator_1abd2b9c82341d4d97233f936bb0c562db" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_span_tensor" kindref="compound">SpanTensor</ref><sp/><ref refid="classopen__spiel_1_1_allocator_1abd2b9c82341d4d97233f936bb0c562db" kindref="member">Get</ref>(absl::string_view<sp/>name,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>absl::InlinedVector&lt;int,<sp/>4&gt;&amp;<sp/>shape)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168" refid="classopen__spiel_1_1_allocator_1aae4b5826e7832d9614c0ee0224526516" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_allocator_1aae4b5826e7832d9614c0ee0224526516" kindref="member">~Allocator</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="169"><highlight class="normal">};</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Allocates<sp/>memory<sp/>from<sp/>a<sp/>single<sp/>block.<sp/>This<sp/>is<sp/>intended<sp/>for<sp/>use<sp/>when<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>already<sp/>known<sp/>how<sp/>much<sp/>memory<sp/>an<sp/>observation<sp/>consumes.<sp/>The<sp/>allocator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment">//<sp/>owns<sp/>a<sp/>fixed-size<sp/>block<sp/>of<sp/>memory<sp/>and<sp/>returns<sp/>pieces<sp/>of<sp/>it<sp/>in<sp/>sequence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174" refid="classopen__spiel_1_1_contiguous_allocator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classopen__spiel_1_1_contiguous_allocator" kindref="compound">ContiguousAllocator</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_allocator" kindref="compound">Allocator</ref><sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="176" refid="classopen__spiel_1_1_contiguous_allocator_1a0962b935bae0fa8fdd7f2157719c0aba" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classopen__spiel_1_1_contiguous_allocator_1a0962b935bae0fa8fdd7f2157719c0aba" kindref="member">ContiguousAllocator</ref>(absl::Span&lt;float&gt;<sp/>data)<sp/>:<sp/>data_(data),<sp/>offset_(0)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>absl::c_fill(data,<sp/>0);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><ref refid="classopen__spiel_1_1_span_tensor" kindref="compound">SpanTensor</ref><sp/><ref refid="classopen__spiel_1_1_contiguous_allocator_1ad5788d75dc02bdedd831fe1ffc77c849" kindref="member">Get</ref>(absl::string_view<sp/>name,</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>absl::InlinedVector&lt;int,<sp/>4&gt;&amp;<sp/>shape)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>absl::Span&lt;float&gt;<sp/>data_;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset_;</highlight></codeline>
<codeline lineno="185"><highlight class="normal">};</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Allocates<sp/>new<sp/>memory<sp/>for<sp/>each<sp/>allocation<sp/>request<sp/>and<sp/>keeps<sp/>track</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>tensor<sp/>names<sp/>and<sp/>shapes.<sp/>This<sp/>is<sp/>intended<sp/>to<sp/>use<sp/>when<sp/>it&apos;s<sp/>not<sp/>yet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">//<sp/>known<sp/>how<sp/>much<sp/>memory<sp/>an<sp/>observation<sp/>consumes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190" refid="classopen__spiel_1_1_tracking_vector_allocator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classopen__spiel_1_1_tracking_vector_allocator" kindref="compound">TrackingVectorAllocator</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_allocator" kindref="compound">Allocator</ref><sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="192" refid="classopen__spiel_1_1_tracking_vector_allocator_1a1aac5f591b14c63f59b679d87aa8c71b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classopen__spiel_1_1_tracking_vector_allocator_1a1aac5f591b14c63f59b679d87aa8c71b" kindref="member">TrackingVectorAllocator</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><ref refid="classopen__spiel_1_1_span_tensor" kindref="compound">SpanTensor</ref><sp/><ref refid="classopen__spiel_1_1_tracking_vector_allocator_1ac7a4b3ec53cb80beec25e295d92599a9" kindref="member">Get</ref>(absl::string_view<sp/>name,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>absl::InlinedVector&lt;int,<sp/>4&gt;&amp;<sp/>shape)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Should<sp/>only<sp/>be<sp/>called<sp/>*after*<sp/>all<sp/>spans<sp/>were<sp/>created<sp/>(via<sp/>`Get`).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>call<sp/>to<sp/>`Get`<sp/>invalidates<sp/>the<sp/>previous<sp/>result<sp/>of<sp/>`spans`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199" refid="classopen__spiel_1_1_tracking_vector_allocator_1a2b33c4f381cb9a2dfc4c6d8d00ff2e7a" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;SpanTensorInfo&gt;<sp/><ref refid="classopen__spiel_1_1_tracking_vector_allocator_1a2b33c4f381cb9a2dfc4c6d8d00ff2e7a" kindref="member">tensors_info</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors_info_;<sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201" refid="classopen__spiel_1_1_tracking_vector_allocator_1a94caba8e758ac00e63ec5236932aa721" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;&amp;<sp/><ref refid="classopen__spiel_1_1_tracking_vector_allocator_1a94caba8e758ac00e63ec5236932aa721" kindref="member">data</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_;<sp/>}</highlight></codeline>
<codeline lineno="202" refid="classopen__spiel_1_1_tracking_vector_allocator_1a1908b4c5b4c40c5fcf490353ce1fb4dc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;float&gt;&amp;<sp/><ref refid="classopen__spiel_1_1_tracking_vector_allocator_1a1908b4c5b4c40c5fcf490353ce1fb4dc" kindref="member">data</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_;<sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsNameUnique(absl::string_view<sp/>name)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>data_;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>std::vector&lt;SpanTensorInfo&gt;<sp/>tensors_info_;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>absl::flat_hash_set&lt;std::string&gt;<sp/>tensor_names_;</highlight></codeline>
<codeline lineno="210"><highlight class="normal">};</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Specification<sp/>of<sp/>which<sp/>players&apos;<sp/>private<sp/>information<sp/>we<sp/>get<sp/>to<sp/>see.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213" refid="namespaceopen__spiel_1aa9281a1c15b90072251b89cdf81b6b1a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1aa9281a1c15b90072251b89cdf81b6b1a" kindref="member">PrivateInfoType</ref><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><ref refid="namespaceopen__spiel_1aa9281a1c15b90072251b89cdf81b6b1aa35c3ace1970663a16e5c65baa5941b13" kindref="member">kNone</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>private<sp/>information.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><ref refid="namespaceopen__spiel_1aa9281a1c15b90072251b89cdf81b6b1aac5f7797389cc990cbf85c2d7b6581414" kindref="member">kSinglePlayer</ref>,<sp/><sp/></highlight><highlight class="comment">//<sp/>Private<sp/>information<sp/>for<sp/>the<sp/>observing<sp/>player<sp/>only<sp/>(i.e.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>player<sp/>passed<sp/>to<sp/>WriteTensor<sp/>/<sp/>StringFrom).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><ref refid="namespaceopen__spiel_1aa9281a1c15b90072251b89cdf81b6b1aa22b9a99aef727eafee56eae22a63ccbc" kindref="member">kAllPlayers</ref><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Private<sp/>information<sp/>for<sp/>all<sp/>players.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal">};</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Observation<sp/>types<sp/>for<sp/>imperfect-information<sp/>games.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>public<sp/>/<sp/>private<sp/>observations<sp/>factorize<sp/>observations<sp/>into<sp/>their</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(mostly)<sp/>non-overlapping<sp/>public<sp/>and<sp/>private<sp/>parts.<sp/>They<sp/>may<sp/>overlap<sp/>only<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>start<sp/>of<sp/>the<sp/>game<sp/>and<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>public<sp/>observations<sp/>correspond<sp/>to<sp/>information<sp/>that<sp/>all<sp/>the<sp/>players<sp/>know</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>all<sp/>the<sp/>players<sp/>know,<sp/>like<sp/>upward-facing<sp/>cards<sp/>on<sp/>a<sp/>table.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Perfect<sp/>information<sp/>games,<sp/>like<sp/>Chess,<sp/>have<sp/>only<sp/>public<sp/>observations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>games<sp/>have<sp/>non-empty<sp/>public<sp/>observations.<sp/>The<sp/>minimum<sp/>public</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment">//<sp/>information<sp/>is<sp/>time:<sp/>we<sp/>assume<sp/>that<sp/>all<sp/>the<sp/>players<sp/>can<sp/>perceive<sp/>absolute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment">//<sp/>time<sp/>(which<sp/>can<sp/>be<sp/>accessed<sp/>via<sp/>the<sp/>MoveNumber()<sp/>method).<sp/>The<sp/>implemented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment">//<sp/>games<sp/>must<sp/>be<sp/>1-timeable,<sp/>a<sp/>property<sp/>that<sp/>is<sp/>trivially<sp/>satisfied<sp/>with<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="comment">//<sp/>human-played<sp/>board<sp/>games,<sp/>so<sp/>you<sp/>typically<sp/>don&apos;t<sp/>have<sp/>to<sp/>worry<sp/>about<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(You&apos;d<sp/>have<sp/>to<sp/>knock<sp/>players<sp/>out<sp/>/<sp/>consider<sp/>Einstein&apos;s<sp/>time-relativistic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="comment">//<sp/>effects<sp/>to<sp/>make<sp/>non-timeable<sp/>games.).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>public<sp/>observations<sp/>are<sp/>used<sp/>to<sp/>create<sp/>a<sp/>sequence<sp/>of<sp/>observations:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>public<sp/>observation<sp/>history.<sp/>Because<sp/>of<sp/>the<sp/>sequential<sp/>structure,<sp/>when<sp/>you</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">//<sp/>return<sp/>any<sp/>non-empty<sp/>public<sp/>observation,<sp/>you<sp/>implicitly<sp/>encode<sp/>time<sp/>as<sp/>well</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment">//<sp/>within<sp/>this<sp/>sequence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Public<sp/>observations<sp/>are<sp/>not<sp/>required<sp/>to<sp/>be<sp/>&quot;common<sp/>knowledge&quot;<sp/>observations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Example:<sp/>In<sp/>imperfect-info<sp/>version<sp/>of<sp/>card<sp/>game<sp/>Goofspiel,<sp/>players<sp/>make</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment">//<sp/>bets<sp/>with<sp/>cards<sp/>on<sp/>their<sp/>hand,<sp/>and<sp/>their<sp/>imperfect<sp/>information<sp/>consists<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">//<sp/>not<sp/>knowing<sp/>exactly<sp/>what<sp/>cards<sp/>the<sp/>opponent<sp/>currently<sp/>holds,<sp/>as<sp/>the<sp/>players</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="comment">//<sp/>only<sp/>learn<sp/>public<sp/>information<sp/>whether<sp/>they<sp/>have<sp/>won/lost/draw<sp/>the<sp/>bet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="comment">//<sp/>However,<sp/>when<sp/>the<sp/>player<sp/>bets<sp/>a<sp/>card<sp/>&quot;5&quot;<sp/>and<sp/>learns<sp/>it<sp/>drew<sp/>the<sp/>round,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>can<sp/>infer<sp/>that<sp/>the<sp/>opponent<sp/>must<sp/>have<sp/>also<sp/>bet<sp/>the<sp/>card<sp/>&quot;5&quot;,<sp/>just<sp/>as<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment">//<sp/>player<sp/>did.<sp/>In<sp/>principle<sp/>we<sp/>could<sp/>ask<sp/>the<sp/>game<sp/>to<sp/>make<sp/>this<sp/>inference</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">//<sp/>automatically,<sp/>and<sp/>return<sp/>observation<sp/>&quot;draw-5&quot;.<sp/>We<sp/>do<sp/>not<sp/>require<sp/>this,<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>is<sp/>in<sp/>general<sp/>expensive<sp/>to<sp/>compute.<sp/>Returning<sp/>public<sp/>observation<sp/>&quot;draw&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>sufficient.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>private<sp/>observations<sp/>correspond<sp/>to<sp/>the<sp/>part<sp/>of<sp/>the<sp/>observation<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>not<sp/>public.<sp/>In<sp/>Poker,<sp/>this<sp/>would<sp/>be<sp/>the<sp/>cards<sp/>the<sp/>player<sp/>holds<sp/>in<sp/>his</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">//<sp/>hand.<sp/>Note<sp/>that<sp/>this<sp/>does<sp/>not<sp/>imply<sp/>that<sp/>other<sp/>players<sp/>don&apos;t<sp/>have<sp/>access</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>this<sp/>information.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>example,<sp/>consider<sp/>there<sp/>is<sp/>a<sp/>mirror<sp/>behind<sp/>an<sp/>unaware<sp/>player,<sp/>betraying</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="comment">//<sp/>his<sp/>hand<sp/>in<sp/>the<sp/>reflection.<sp/>Even<sp/>if<sp/>everyone<sp/>was<sp/>aware<sp/>of<sp/>the<sp/>mirror,<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>information<sp/>still<sp/>may<sp/>not<sp/>be<sp/>public,<sp/>because<sp/>the<sp/>players<sp/>do<sp/>not<sp/>know</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>certain<sp/>that<sp/>everyone<sp/>is<sp/>aware<sp/>of<sp/>this.<sp/>It<sp/>would<sp/>become<sp/>public<sp/>if<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="comment">//<sp/>only<sp/>if<sp/>all<sp/>the<sp/>players<sp/>were<sp/>aware<sp/>of<sp/>the<sp/>mirror,<sp/>and<sp/>they<sp/>also<sp/>knew<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="comment">//<sp/>indeed<sp/>everyone<sp/>else<sp/>knows<sp/>about<sp/>it<sp/>too.<sp/>Then<sp/>this<sp/>would<sp/>effectively<sp/>make</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>the<sp/>same<sp/>as<sp/>if<sp/>the<sp/>player<sp/>just<sp/>placed<sp/>his<sp/>cards<sp/>on<sp/>the<sp/>table<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="comment">//<sp/>everyone<sp/>to<sp/>see.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is<sp/>no<sp/>private<sp/>observation<sp/>available,<sp/>the<sp/>implementation<sp/>should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="comment">//<sp/>return<sp/>an<sp/>empty<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271" refid="structopen__spiel_1_1_i_i_g_observation_type" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structopen__spiel_1_1_i_i_g_observation_type" kindref="compound">IIGObservationType</ref><sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>true,<sp/>include<sp/>public<sp/>information<sp/>in<sp/>the<sp/>observation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273" refid="structopen__spiel_1_1_i_i_g_observation_type_1a639a6f0272beb5003daa089bc6694288" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_i_i_g_observation_type_1a639a6f0272beb5003daa089bc6694288" kindref="member">public_info</ref>;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Whether<sp/>the<sp/>observation<sp/>is<sp/>perfect<sp/>recall<sp/>(identical<sp/>to<sp/>an<sp/>info<sp/>state).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>true,<sp/>the<sp/>observation<sp/>must<sp/>be<sp/>sufficient<sp/>to<sp/>reconstruct<sp/>the<sp/>complete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>history<sp/>of<sp/>actions<sp/>and<sp/>observations<sp/>for<sp/>the<sp/>observing<sp/>player.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278" refid="structopen__spiel_1_1_i_i_g_observation_type_1a47dbc867f5d4ceabc0aa57af2c3d2989" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_i_i_g_observation_type_1a47dbc867f5d4ceabc0aa57af2c3d2989" kindref="member">perfect_recall</ref>;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Which<sp/>players&apos;<sp/>private<sp/>information<sp/>to<sp/>include<sp/>in<sp/>the<sp/>observation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281" refid="structopen__spiel_1_1_i_i_g_observation_type_1a45ea0f7c2d1ccd4d5ce21884bd417623" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespaceopen__spiel_1aa9281a1c15b90072251b89cdf81b6b1a" kindref="member">PrivateInfoType</ref><sp/><ref refid="structopen__spiel_1_1_i_i_g_observation_type_1a45ea0f7c2d1ccd4d5ce21884bd417623" kindref="member">private_info</ref>;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_i_i_g_observation_type_1a8718861a400799643d18747be14a62bb" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_i_i_g_observation_type" kindref="compound">IIGObservationType</ref>&amp;);</highlight></codeline>
<codeline lineno="284"><highlight class="normal">};</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Default<sp/>observation<sp/>type<sp/>for<sp/>imperfect<sp/>information<sp/>games.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Corresponds<sp/>to<sp/>the<sp/>ObservationTensor<sp/>/<sp/>ObservationString<sp/>methods.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288" refid="namespaceopen__spiel_1a5bc6e01a4042ac7ea2e321608cb441d8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_i_i_g_observation_type" kindref="compound">IIGObservationType</ref><sp/><ref refid="namespaceopen__spiel_1a5bc6e01a4042ac7ea2e321608cb441d8" kindref="member">kDefaultObsType</ref>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*public_info*/</highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*perfect_recall*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*private_info*/</highlight><highlight class="normal"><ref refid="namespaceopen__spiel_1aa9281a1c15b90072251b89cdf81b6b1aac5f7797389cc990cbf85c2d7b6581414" kindref="member">PrivateInfoType::kSinglePlayer</ref>};</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Default<sp/>observation<sp/>type<sp/>for<sp/>imperfect<sp/>information<sp/>games.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Corresponds<sp/>to<sp/>the<sp/>InformationStateTensor<sp/>/<sp/>InformationStateString<sp/>methods.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295" refid="namespaceopen__spiel_1a37db6d5fe2c988fdfbf73e22163c451d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_i_i_g_observation_type" kindref="compound">IIGObservationType</ref><sp/><ref refid="namespaceopen__spiel_1a37db6d5fe2c988fdfbf73e22163c451d" kindref="member">kInfoStateObsType</ref>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*public_info*/</highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*perfect_recall*/</highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*private_info*/</highlight><highlight class="normal"><ref refid="namespaceopen__spiel_1aa9281a1c15b90072251b89cdf81b6b1aac5f7797389cc990cbf85c2d7b6581414" kindref="member">PrivateInfoType::kSinglePlayer</ref>};</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Incremental<sp/>public<sp/>observation,<sp/>mainly<sp/>used<sp/>for<sp/>imperfect<sp/>information<sp/>games.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301" refid="namespaceopen__spiel_1a61c7f4e6a3feb8c438f0be01682d0c13" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_i_i_g_observation_type" kindref="compound">IIGObservationType</ref><sp/><ref refid="namespaceopen__spiel_1a61c7f4e6a3feb8c438f0be01682d0c13" kindref="member">kPublicObsType</ref>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*public_info*/</highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*perfect_recall*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*private_info*/</highlight><highlight class="normal"><ref refid="namespaceopen__spiel_1aa9281a1c15b90072251b89cdf81b6b1aa35c3ace1970663a16e5c65baa5941b13" kindref="member">PrivateInfoType::kNone</ref>};</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Complete<sp/>public<sp/>observation,<sp/>mainly<sp/>used<sp/>for<sp/>imperfect<sp/>information<sp/>games.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307" refid="namespaceopen__spiel_1a9f191f5a93c328b43d0a68bc8a440515" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_i_i_g_observation_type" kindref="compound">IIGObservationType</ref><sp/><ref refid="namespaceopen__spiel_1a9f191f5a93c328b43d0a68bc8a440515" kindref="member">kPublicStateObsType</ref>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*public_info*/</highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*perfect_recall*/</highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*private_info*/</highlight><highlight class="normal"><ref refid="namespaceopen__spiel_1aa9281a1c15b90072251b89cdf81b6b1aa35c3ace1970663a16e5c65baa5941b13" kindref="member">PrivateInfoType::kNone</ref>};</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Incremental<sp/>private<sp/>observation,<sp/>mainly<sp/>used<sp/>for<sp/>imperfect<sp/>information<sp/>games.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313" refid="namespaceopen__spiel_1a449474391b357e1c8680369f6ad7b423" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_i_i_g_observation_type" kindref="compound">IIGObservationType</ref><sp/><ref refid="namespaceopen__spiel_1a449474391b357e1c8680369f6ad7b423" kindref="member">kPrivateObsType</ref>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*public_info*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*perfect_recall*/</highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*private_info*/</highlight><highlight class="normal"><ref refid="namespaceopen__spiel_1aa9281a1c15b90072251b89cdf81b6b1aac5f7797389cc990cbf85c2d7b6581414" kindref="member">PrivateInfoType::kSinglePlayer</ref>};</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>Observer<sp/>is<sp/>something<sp/>which<sp/>can<sp/>produce<sp/>an<sp/>observation<sp/>of<sp/>a<sp/>State,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="comment">//<sp/>e.g.<sp/>a<sp/>Tensor<sp/>or<sp/>collection<sp/>of<sp/>Tensors<sp/>or<sp/>a<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Observers<sp/>are<sp/>game-specific.<sp/>They<sp/>are<sp/>created<sp/>by<sp/>a<sp/>Game<sp/>object,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="comment">//<sp/>may<sp/>only<sp/>be<sp/>applied<sp/>to<sp/>a<sp/>State<sp/>class<sp/>generated<sp/>from<sp/>the<sp/>same<sp/>Game<sp/>instance.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322" refid="classopen__spiel_1_1_observer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classopen__spiel_1_1_observer" kindref="compound">Observer</ref><sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="324" refid="classopen__spiel_1_1_observer_1a769cc10c3d25d370287fc875195bd974" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classopen__spiel_1_1_observer_1a769cc10c3d25d370287fc875195bd974" kindref="member">Observer</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_string,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_tensor)</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classopen__spiel_1_1_observer_1a67c3fc2d22bb77735978d452381d5233" kindref="member">has_string_</ref>(has_string),<sp/><ref refid="classopen__spiel_1_1_observer_1a0308fe873fdf62349a48a721db6f0a38" kindref="member">has_tensor_</ref>(has_tensor)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="spiel__utils_8h_1ac998e613afb013e8bd31b3da80f747ae" kindref="member">SPIEL_CHECK_TRUE</ref>(has_string<sp/>||<sp/>has_tensor);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>a<sp/>tensor<sp/>observation<sp/>to<sp/>the<sp/>memory<sp/>returned<sp/>by<sp/>the<sp/>Allocator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330" refid="classopen__spiel_1_1_observer_1aeba70fb78b7502fb6c24182be2db861d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_observer_1aeba70fb78b7502fb6c24182be2db861d" kindref="member">WriteTensor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state" kindref="compound">State</ref>&amp;<sp/>state,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>player,</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classopen__spiel_1_1_allocator" kindref="compound">Allocator</ref>*<sp/>allocator)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>a<sp/>string<sp/>observation.<sp/>For<sp/>human-readability<sp/>or<sp/>for<sp/>tabular</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>algorithms<sp/>on<sp/>small<sp/>games.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335" refid="classopen__spiel_1_1_observer_1a637a14de332323ccebb1a06bce37bad0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="classopen__spiel_1_1_observer_1a637a14de332323ccebb1a06bce37bad0" kindref="member">StringFrom</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state" kindref="compound">State</ref>&amp;<sp/>state,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>player)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>What<sp/>observations<sp/>do<sp/>we<sp/>support?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338" refid="classopen__spiel_1_1_observer_1a094466022685d596b3b440a751d55e7f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_observer_1a094466022685d596b3b440a751d55e7f" kindref="member">HasString</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_observer_1a67c3fc2d22bb77735978d452381d5233" kindref="member">has_string_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="339" refid="classopen__spiel_1_1_observer_1a870173def77c964c3b7eeb8d23b54c35" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_observer_1a870173def77c964c3b7eeb8d23b54c35" kindref="member">HasTensor</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_observer_1a0308fe873fdf62349a48a721db6f0a38" kindref="member">has_tensor_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341" refid="classopen__spiel_1_1_observer_1a9793d10863a1aa1faa0c82a9f670b63f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_observer_1a9793d10863a1aa1faa0c82a9f670b63f" kindref="member">~Observer</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(author11)<sp/>Remove<sp/>when<sp/>all<sp/>games<sp/>support<sp/>both<sp/>types<sp/>of<sp/>observations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345" refid="classopen__spiel_1_1_observer_1a67c3fc2d22bb77735978d452381d5233" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_observer_1a67c3fc2d22bb77735978d452381d5233" kindref="member">has_string_</ref>;</highlight></codeline>
<codeline lineno="346" refid="classopen__spiel_1_1_observer_1a0308fe873fdf62349a48a721db6f0a38" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_observer_1a0308fe873fdf62349a48a721db6f0a38" kindref="member">has_tensor_</ref>;</highlight></codeline>
<codeline lineno="347"><highlight class="normal">};</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Holds<sp/>an<sp/>Observer<sp/>and<sp/>a<sp/>vector<sp/>for<sp/>it<sp/>to<sp/>write<sp/>values<sp/>into.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350" refid="classopen__spiel_1_1_observation" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classopen__spiel_1_1_observation" kindref="compound">Observation</ref><sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><ref refid="classopen__spiel_1_1_observation_1ac47e27b2a3474cac22dbc97d8152a63c" kindref="member">Observation</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_game" kindref="compound">Game</ref>&amp;<sp/>game,<sp/>std::shared_ptr&lt;Observer&gt;<sp/>observer);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>observation<sp/>from<sp/>the<sp/>State<sp/>and<sp/>player<sp/>and<sp/>stores<sp/>it<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>internal<sp/>tensor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_observation_1a94d7c195e563ced89f3e1b5c580f1788" kindref="member">SetFrom</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state" kindref="compound">State</ref>&amp;<sp/>state,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>player);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Describes<sp/>the<sp/>observation<sp/>components.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360" refid="classopen__spiel_1_1_observation_1aa3d3890965b9fe32b7722eae1110ac3d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;SpanTensorInfo&gt;&amp;<sp/><ref refid="classopen__spiel_1_1_observation_1aa3d3890965b9fe32b7722eae1110ac3d" kindref="member">tensors_info</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors_info_;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>component<sp/>tensors<sp/>of<sp/>the<sp/>observation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>std::vector&lt;SpanTensor&gt;<sp/><ref refid="classopen__spiel_1_1_observation_1a1abe75cd2db6ce0c2d79a2fa28805bf3" kindref="member">tensors</ref>();</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>string<sp/>observation<sp/>for<sp/>the<sp/>State<sp/>and<sp/>player.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368" refid="classopen__spiel_1_1_observation_1a7df247da69dbcda071d674ba67593672" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classopen__spiel_1_1_observation_1a7df247da69dbcda071d674ba67593672" kindref="member">StringFrom</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state" kindref="compound">State</ref>&amp;<sp/>state,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>player)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>observer_-&gt;StringFrom(state,<sp/>player);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>compressed<sp/>representation<sp/>of<sp/>the<sp/>observations.<sp/>This<sp/>is<sp/>useful<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>memory-intensive<sp/>algorithms,<sp/>e.g.<sp/>that<sp/>store<sp/>large<sp/>replay<sp/>buffers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>byte<sp/>of<sp/>the<sp/>compressed<sp/>data<sp/>is<sp/>reserved<sp/>for<sp/>the<sp/>specific</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compression<sp/>scheme.<sp/>Note<sp/>that<sp/>currently<sp/>there<sp/>is<sp/>only<sp/>one<sp/>supported,<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>requires<sp/>bitwise<sp/>observations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>Use<sp/>compress<sp/>and<sp/>decompress<sp/>on<sp/>the<sp/>same<sp/>machine,<sp/>or<sp/>on<sp/>systems</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>with<sp/>the<sp/>same<sp/>float<sp/>memory<sp/>layout<sp/>(aka<sp/>Endianness).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Different<sp/>computer<sp/>architectures<sp/>may<sp/>use<sp/>different<sp/>Endianness</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(https://en.wikipedia.org/wiki/Endianness)<sp/>when<sp/>storing<sp/>floats.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>compressed<sp/>data<sp/>is<sp/>a<sp/>raw<sp/>memory<sp/>representation<sp/>of<sp/>an<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>floats.<sp/>Passing<sp/>it<sp/>from,<sp/>say,<sp/>big-endian<sp/>architecture</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>little-endian<sp/>architecture<sp/>may<sp/>corrupt<sp/>the<sp/>original<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(author16)<sp/>address<sp/>the<sp/>note<sp/>above<sp/>and<sp/>implement<sp/>things<sp/>in<sp/>a<sp/>platform</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>independent<sp/>way.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classopen__spiel_1_1_observation_1a5e9bf445999e571f95dc13c4f018c880" kindref="member">Compress</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_observation_1a4c80d6da14f27eac718ee4b0f237c4d5" kindref="member">Decompress</ref>(absl::string_view<sp/>compressed);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>What<sp/>observations<sp/>do<sp/>we<sp/>support?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(author11)<sp/>Remove<sp/>when<sp/>all<sp/>games<sp/>support<sp/>both<sp/>types<sp/>of<sp/>observations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393" refid="classopen__spiel_1_1_observation_1af53c0876a71ca2bf1ab4b4b5378dfdf8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_observation_1af53c0876a71ca2bf1ab4b4b5378dfdf8" kindref="member">HasString</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>observer_-&gt;HasString();<sp/>}</highlight></codeline>
<codeline lineno="394" refid="classopen__spiel_1_1_observation_1a0fff7f5936f2b8311d89bbcdc2b34c19" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_observation_1a0fff7f5936f2b8311d89bbcdc2b34c19" kindref="member">HasTensor</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>observer_-&gt;HasTensor();<sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Deprecated<sp/>methods.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>internal<sp/>buffer<sp/>into<sp/>which<sp/>observations<sp/>are<sp/>written.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>ABSL_DEPRECATED(</highlight><highlight class="stringliteral">&quot;Use<sp/>`tensors()`.<sp/>This<sp/>method<sp/>is<sp/>unsafe.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="401" refid="classopen__spiel_1_1_observation_1a491e65ba234f8aa7fd085f880be706aa" refkind="member"><highlight class="normal"><sp/><sp/>absl::Span&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;<sp/><ref refid="classopen__spiel_1_1_observation_1a491e65ba234f8aa7fd085f880be706aa" kindref="member">Tensor</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>absl::MakeSpan(buffer_);<sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Observer&gt;<sp/>observer_;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>buffer_;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>std::vector&lt;SpanTensorInfo&gt;<sp/>tensors_info_;</highlight></codeline>
<codeline lineno="407"><highlight class="normal">};</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Allows<sp/>to<sp/>register<sp/>observers<sp/>to<sp/>a<sp/>game.<sp/>Usage:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ObserverRegisterer<sp/>unused_name(game_name,<sp/>observer_name,<sp/>creator);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Once<sp/>an<sp/>observer<sp/>is<sp/>registered,<sp/>it<sp/>can<sp/>be<sp/>created<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="comment">//<sp/>game.MakeObserver(iig_obs_type,<sp/>observer_name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414" refid="classopen__spiel_1_1_observer_registerer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classopen__spiel_1_1_observer_registerer" kindref="compound">ObserverRegisterer</ref><sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Function<sp/>type<sp/>which<sp/>creates<sp/>an<sp/>observer.<sp/>The<sp/>game<sp/>and<sp/>params<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cannot<sp/>be<sp/>assumed<sp/>to<sp/>exist<sp/>beyond<sp/>the<sp/>scope<sp/>of<sp/>this<sp/>call.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418" refid="classopen__spiel_1_1_observer_registerer_1a3efb02dcd6e75be774796b4e2ebdbf38" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classopen__spiel_1_1_observer_registerer_1a3efb02dcd6e75be774796b4e2ebdbf38" kindref="member">CreateFunc</ref><sp/>=<sp/>std::function&lt;std::shared_ptr&lt;Observer&gt;(</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_game" kindref="compound">Game</ref>&amp;<sp/>game,<sp/>absl::optional&lt;IIGObservationType&gt;<sp/>iig_obs_type,</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1aac43798f2a15711572119a41e8a91466" kindref="member">ObservationParams</ref>&amp;<sp/>params)&gt;;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><ref refid="classopen__spiel_1_1_observer_registerer_1a890a9b8d751a79768497750b0766e248" kindref="member">ObserverRegisterer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>game_name,</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>observer_name,</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classopen__spiel_1_1_observer_registerer_1a3efb02dcd6e75be774796b4e2ebdbf38" kindref="member">CreateFunc</ref><sp/>creator);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_observer_registerer_1a39b06045bb6b5017f3496bd379cb7ae8" kindref="member">RegisterObserver</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>game_name,</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>observer_name,</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classopen__spiel_1_1_observer_registerer_1a3efb02dcd6e75be774796b4e2ebdbf38" kindref="member">CreateFunc</ref><sp/>creator);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Observer&gt;<sp/><ref refid="classopen__spiel_1_1_observer_registerer_1a758f476da1265e23e37d42253be73b07" kindref="member">CreateByName</ref>(</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>observer_name,</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_game" kindref="compound">Game</ref>&amp;<sp/>game,</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>absl::optional&lt;IIGObservationType&gt;<sp/>iig_obs_type,</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1aac43798f2a15711572119a41e8a91466" kindref="member">ObservationParams</ref>&amp;<sp/>params);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>&quot;global&quot;<sp/>map<sp/>of<sp/>registrations<sp/>(i.e.<sp/>an<sp/>object<sp/>that<sp/>lives<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>initialization<sp/>to<sp/>the<sp/>end<sp/>of<sp/>the<sp/>program).<sp/>Note<sp/>that<sp/>we<sp/>do<sp/>not<sp/>just<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>static<sp/>data<sp/>member,<sp/>as<sp/>we<sp/>want<sp/>the<sp/>map<sp/>to<sp/>be<sp/>initialized<sp/>before<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>use.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::map&lt;std::pair&lt;std::string,<sp/>std::string&gt;,<sp/><ref refid="classopen__spiel_1_1_observer_registerer_1a3efb02dcd6e75be774796b4e2ebdbf38" kindref="member">CreateFunc</ref>&gt;&amp;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>observers()<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::map&lt;std::pair&lt;std::string,<sp/>std::string&gt;,<sp/><ref refid="classopen__spiel_1_1_observer_registerer_1a3efb02dcd6e75be774796b4e2ebdbf38" kindref="member">CreateFunc</ref>&gt;<sp/>impl;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal">};</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Registers<sp/>an<sp/>observer<sp/>named<sp/>&quot;single_tensor&quot;<sp/>which<sp/>falls<sp/>back<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="comment">//<sp/>state.observation_tensor<sp/>or<sp/>state.information_state_tensor<sp/>(which<sp/>generate<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="comment">//<sp/>single<sp/>tensor).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>one<sp/>cannot<sp/>pass<sp/>empty<sp/>ObservationParams<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="comment">//<sp/>game-&gt;MakeObserver(...)<sp/>to<sp/>achieve<sp/>the<sp/>same<sp/>behavior<sp/>in<sp/>general:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="comment">//<sp/>leduc,<sp/>goofspiel<sp/>and<sp/>many<sp/>other<sp/>games<sp/>will<sp/>generate<sp/>multiple<sp/>tensors<sp/>in<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="comment">//<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RegisterSingleTensorObserver<sp/>single_tensor(kGameType.short_name);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458" refid="classopen__spiel_1_1_register_single_tensor_observer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classopen__spiel_1_1_register_single_tensor_observer" kindref="compound">RegisterSingleTensorObserver</ref><sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><ref refid="classopen__spiel_1_1_register_single_tensor_observer_1a5a2ceba6b6ae1086bf3e8c3836802069" kindref="member">RegisterSingleTensorObserver</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>game_name);</highlight></codeline>
<codeline lineno="461"><highlight class="normal">};</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Pure<sp/>function<sp/>that<sp/>creates<sp/>a<sp/>tensor<sp/>from<sp/>an<sp/>observer.<sp/>Slower<sp/>than<sp/>using<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Observation,<sp/>but<sp/>threadsafe.<sp/>This<sp/>is<sp/>useful<sp/>when<sp/>you<sp/>cannot<sp/>keep<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Observation<sp/>around<sp/>to<sp/>use<sp/>multiple<sp/>times.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal">ABSL_DEPRECATED(</highlight><highlight class="stringliteral">&quot;Use<sp/>&apos;Observation::tensors()`.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="467"><highlight class="normal">std::vector&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;<sp/><ref refid="namespaceopen__spiel_1a91fe25f1b974060eec9ada51abe43b78" kindref="member">TensorFromObserver</ref>(const<sp/><ref refid="classopen__spiel_1_1_state" kindref="compound">State</ref>&amp;<sp/>state,</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/><ref refid="classopen__spiel_1_1_observer" kindref="compound">Observer</ref>&amp;<sp/>observer);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Pure<sp/>function<sp/>that<sp/>gets<sp/>the<sp/>tensor<sp/>shape<sp/>from<sp/>an<sp/>observer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Any<sp/>valid<sp/>state<sp/>may<sp/>be<sp/>supplied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal">ABSL_DEPRECATED(&quot;Use<sp/>&apos;<ref refid="classopen__spiel_1_1_observation" kindref="compound">Observation</ref>::tensors_info()`.&quot;)</highlight></codeline>
<codeline lineno="473"><highlight class="normal">std::vector&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/><ref refid="namespaceopen__spiel_1a03fc20c0c2c07f8c196ebe7dd9f0c251" kindref="member">ObserverTensorShape</ref>(const<sp/><ref refid="classopen__spiel_1_1_state" kindref="compound">State</ref>&amp;<sp/>state,</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/><ref refid="classopen__spiel_1_1_observer" kindref="compound">Observer</ref>&amp;<sp/>observer);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>open_spiel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>OPEN_SPIEL_OBSERVER_H_</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="open_spiel/observer.h"/>
  </compounddef>
</doxygen>
