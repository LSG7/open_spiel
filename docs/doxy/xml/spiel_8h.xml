<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="spiel_8h" kind="file" language="C++">
    <compoundname>spiel.h</compoundname>
    <includes local="no">functional</includes>
    <includes local="no">iostream</includes>
    <includes local="no">map</includes>
    <includes local="no">memory</includes>
    <includes local="no">numeric</includes>
    <includes local="no">random</includes>
    <includes local="no">sstream</includes>
    <includes local="no">string</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includes local="yes">open_spiel/abseil-cpp/absl/random/bit_gen_ref.h</includes>
    <includes local="yes">open_spiel/abseil-cpp/absl/strings/str_join.h</includes>
    <includes local="yes">open_spiel/abseil-cpp/absl/synchronization/mutex.h</includes>
    <includes local="yes">open_spiel/abseil-cpp/absl/types/optional.h</includes>
    <includes local="yes">open_spiel/abseil-cpp/absl/types/span.h</includes>
    <includes refid="game__parameters_8h" local="yes">open_spiel/game_parameters.h</includes>
    <includes refid="observer_8h" local="yes">open_spiel/observer.h</includes>
    <includes refid="spiel__globals_8h" local="yes">open_spiel/spiel_globals.h</includes>
    <includes refid="spiel__utils_8h" local="yes">open_spiel/spiel_utils.h</includes>
    <includedby refid="action__view_8cc" local="yes">open_spiel/action_view.cc</includedby>
    <includedby refid="action__view_8h" local="yes">open_spiel/action_view.h</includedby>
    <includedby refid="base_t_8h" local="yes">open_spiel/games/SG/baseT.h</includedby>
    <includedby refid="base_type_8h" local="yes">open_spiel/games/SG/baseType.h</includedby>
    <includedby refid="kbg__test_8cc" local="yes">open_spiel/games/SG/kbg_test.cc</includedby>
    <includedby refid="ki__bo__gung_8h" local="yes">open_spiel/games/SG/ki_bo_gung.h</includedby>
    <includedby refid="matrix__game_8cc" local="yes">open_spiel/matrix_game.cc</includedby>
    <includedby refid="matrix__game_8h" local="yes">open_spiel/matrix_game.h</includedby>
    <includedby refid="normal__form__game_8h" local="yes">open_spiel/normal_form_game.h</includedby>
    <includedby refid="observer_8cc" local="yes">open_spiel/observer.cc</includedby>
    <includedby refid="policy_8cc" local="yes">open_spiel/policy.cc</includedby>
    <includedby refid="policy_8h" local="yes">open_spiel/policy.h</includedby>
    <includedby refid="simultaneous__move__game_8cc" local="yes">open_spiel/simultaneous_move_game.cc</includedby>
    <includedby refid="simultaneous__move__game_8h" local="yes">open_spiel/simultaneous_move_game.h</includedby>
    <includedby refid="spiel_8cc" local="yes">open_spiel/spiel.cc</includedby>
    <includedby refid="spiel__bots_8cc" local="yes">open_spiel/spiel_bots.cc</includedby>
    <includedby refid="spiel__bots_8h" local="yes">open_spiel/spiel_bots.h</includedby>
    <includedby refid="tensor__game_8cc" local="yes">open_spiel/tensor_game.cc</includedby>
    <includedby refid="tensor__game_8h" local="yes">open_spiel/tensor_game.h</includedby>
    <incdepgraph>
      <node id="18">
        <label>open_spiel/game_parameters.h</label>
        <link refid="game__parameters_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>open_spiel/observer.h</label>
        <link refid="observer_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>open_spiel/spiel.h</label>
        <link refid="spiel_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>open_spiel/spiel_globals.h</label>
        <link refid="spiel__globals_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>open_spiel/spiel_utils.h</label>
        <link refid="spiel__utils_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>algorithm</label>
      </node>
      <node id="21">
        <label>array</label>
      </node>
      <node id="22">
        <label>cmath</label>
      </node>
      <node id="23">
        <label>cstddef</label>
      </node>
      <node id="24">
        <label>cstdint</label>
      </node>
      <node id="2">
        <label>functional</label>
      </node>
      <node id="3">
        <label>iostream</label>
      </node>
      <node id="4">
        <label>map</label>
      </node>
      <node id="5">
        <label>memory</label>
      </node>
      <node id="6">
        <label>numeric</label>
      </node>
      <node id="31">
        <label>open_spiel/abseil-cpp/absl/algorithm/container.h</label>
      </node>
      <node id="32">
        <label>open_spiel/abseil-cpp/absl/base/attributes.h</label>
      </node>
      <node id="33">
        <label>open_spiel/abseil-cpp/absl/container/flat_hash_set.h</label>
      </node>
      <node id="34">
        <label>open_spiel/abseil-cpp/absl/container/inlined_vector.h</label>
      </node>
      <node id="13">
        <label>open_spiel/abseil-cpp/absl/random/bit_gen_ref.h</label>
      </node>
      <node id="26">
        <label>open_spiel/abseil-cpp/absl/random/uniform_real_distribution.h</label>
      </node>
      <node id="27">
        <label>open_spiel/abseil-cpp/absl/strings/str_cat.h</label>
      </node>
      <node id="14">
        <label>open_spiel/abseil-cpp/absl/strings/str_join.h</label>
      </node>
      <node id="35">
        <label>open_spiel/abseil-cpp/absl/strings/string_view.h</label>
      </node>
      <node id="15">
        <label>open_spiel/abseil-cpp/absl/synchronization/mutex.h</label>
      </node>
      <node id="28">
        <label>open_spiel/abseil-cpp/absl/time/clock.h</label>
      </node>
      <node id="29">
        <label>open_spiel/abseil-cpp/absl/time/time.h</label>
      </node>
      <node id="16">
        <label>open_spiel/abseil-cpp/absl/types/optional.h</label>
      </node>
      <node id="17">
        <label>open_spiel/abseil-cpp/absl/types/span.h</label>
      </node>
      <node id="7">
        <label>random</label>
      </node>
      <node id="8">
        <label>sstream</label>
      </node>
      <node id="9">
        <label>string</label>
      </node>
      <node id="25">
        <label>type_traits</label>
      </node>
      <node id="10">
        <label>unordered_map</label>
      </node>
      <node id="11">
        <label>utility</label>
      </node>
      <node id="12">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>open_spiel/action_view.cc</label>
        <link refid="action__view_8cc"/>
      </node>
      <node id="3">
        <label>open_spiel/action_view.h</label>
        <link refid="action__view_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>open_spiel/games/SG/baseT.cc</label>
        <link refid="base_t_8cc"/>
      </node>
      <node id="5">
        <label>open_spiel/games/SG/baseT.h</label>
        <link refid="base_t_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>open_spiel/games/SG/baseT_utils.cc</label>
        <link refid="base_t__utils_8cc"/>
      </node>
      <node id="11">
        <label>open_spiel/games/SG/baseType.h</label>
        <link refid="base_type_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>open_spiel/games/SG/kbg_test.cc</label>
        <link refid="kbg__test_8cc"/>
      </node>
      <node id="10">
        <label>open_spiel/games/SG/ki_bo_gung.cc</label>
        <link refid="ki__bo__gung_8cc"/>
      </node>
      <node id="8">
        <label>open_spiel/games/SG/ki_bo_gung.h</label>
        <link refid="ki__bo__gung_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>open_spiel/matrix_game.cc</label>
        <link refid="matrix__game_8cc"/>
      </node>
      <node id="13">
        <label>open_spiel/matrix_game.h</label>
        <link refid="matrix__game_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>open_spiel/normal_form_game.h</label>
        <link refid="normal__form__game_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>open_spiel/observer.cc</label>
        <link refid="observer_8cc"/>
      </node>
      <node id="18">
        <label>open_spiel/policy.cc</label>
        <link refid="policy_8cc"/>
      </node>
      <node id="19">
        <label>open_spiel/policy.h</label>
        <link refid="policy_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>open_spiel/simultaneous_move_game.cc</label>
        <link refid="simultaneous__move__game_8cc"/>
      </node>
      <node id="22">
        <label>open_spiel/simultaneous_move_game.h</label>
        <link refid="simultaneous__move__game_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>open_spiel/spiel.cc</label>
        <link refid="spiel_8cc"/>
      </node>
      <node id="1">
        <label>open_spiel/spiel.h</label>
        <link refid="spiel_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>open_spiel/spiel_bots.cc</label>
        <link refid="spiel__bots_8cc"/>
      </node>
      <node id="21">
        <label>open_spiel/spiel_bots.h</label>
        <link refid="spiel__bots_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>open_spiel/tensor_game.cc</label>
        <link refid="tensor__game_8cc"/>
      </node>
      <node id="14">
        <label>open_spiel/tensor_game.h</label>
        <link refid="tensor__game_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structopen__spiel_1_1_game_type" prot="public">open_spiel::GameType</innerclass>
    <innerclass refid="structopen__spiel_1_1_game_info" prot="public">open_spiel::GameInfo</innerclass>
    <innerclass refid="classopen__spiel_1_1_state" prot="public">open_spiel::State</innerclass>
    <innerclass refid="structopen__spiel_1_1_state_1_1_player_action" prot="public">open_spiel::State::PlayerAction</innerclass>
    <innerclass refid="classopen__spiel_1_1_game" prot="public">open_spiel::Game</innerclass>
    <innerclass refid="classopen__spiel_1_1_game_registerer" prot="public">open_spiel::GameRegisterer</innerclass>
    <innernamespace refid="namespaceopen__spiel">open_spiel</innernamespace>
    <sectiondef kind="define">
      <memberdef kind="define" id="spiel_8h_1acad9130bd1bd236f5baf83c07d4f537b" prot="public" static="no">
        <name>CONCAT_</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>x##y</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="open_spiel/spiel.h" line="1044" column="9" bodyfile="open_spiel/spiel.h" bodystart="1044" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="spiel_8h_1a2f18db18bca26cafa95e9719de4a41ef" prot="public" static="no">
        <name>CONCAT</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer><ref refid="spiel_8h_1acad9130bd1bd236f5baf83c07d4f537b" kindref="member">CONCAT_</ref>(x, y)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="open_spiel/spiel.h" line="1045" column="9" bodyfile="open_spiel/spiel.h" bodystart="1045" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="spiel_8h_1aae9a841974d542786bac201bced64a5f" prot="public" static="no">
        <name>REGISTER_SPIEL_GAME</name>
        <param><defname>info</defname></param>
        <param><defname>factory</defname></param>
        <initializer>  GameRegisterer <ref refid="spiel_8h_1a2f18db18bca26cafa95e9719de4a41ef" kindref="member">CONCAT</ref>(game, __COUNTER__)(info, factory);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="open_spiel/spiel.h" line="1046" column="9" bodyfile="open_spiel/spiel.h" bodystart="1046" bodyend="1047"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2021<sp/>DeepMind<sp/>Technologies<sp/>Limited</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OPEN_SPIEL_SPIEL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>OPEN_SPIEL_SPIEL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;numeric&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;random&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;open_spiel/abseil-cpp/absl/random/bit_gen_ref.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;open_spiel/abseil-cpp/absl/strings/str_join.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;open_spiel/abseil-cpp/absl/synchronization/mutex.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;open_spiel/abseil-cpp/absl/types/optional.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;open_spiel/abseil-cpp/absl/types/span.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="game__parameters_8h" kindref="compound">open_spiel/game_parameters.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="observer_8h" kindref="compound">open_spiel/observer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="spiel__globals_8h" kindref="compound">open_spiel/spiel_globals.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="spiel__utils_8h" kindref="compound">open_spiel/spiel_utils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceopen__spiel" kindref="compound">open_spiel</ref><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Static<sp/>information<sp/>for<sp/>a<sp/>game.<sp/>This<sp/>will<sp/>determine<sp/>what<sp/>algorithms<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>applicable.<sp/>For<sp/>example,<sp/>minimax<sp/>search<sp/>is<sp/>only<sp/>applicable<sp/>to<sp/>two-player,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/>zero-sum<sp/>games<sp/>with<sp/>perfect<sp/>information.<sp/>(Though<sp/>can<sp/>be<sp/>made<sp/>applicable<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/>games<sp/>that<sp/>are<sp/>constant-sum.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>number<sp/>of<sp/>players<sp/>is<sp/>not<sp/>considered<sp/>part<sp/>of<sp/>this<sp/>static<sp/>game<sp/>type,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>because<sp/>this<sp/>depends<sp/>on<sp/>the<sp/>parameterization.<sp/>See<sp/>Game::NumPlayers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="structopen__spiel_1_1_game_type" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structopen__spiel_1_1_game_type" kindref="compound">GameType</ref><sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>short<sp/>name<sp/>with<sp/>no<sp/>spaces<sp/>that<sp/>uniquely<sp/>identifies<sp/>the<sp/>game,<sp/>e.g.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;msoccer&quot;.<sp/>This<sp/>is<sp/>the<sp/>key<sp/>used<sp/>to<sp/>distinguish<sp/>games.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="structopen__spiel_1_1_game_type_1a7dc97c2b88971ea7c5180d3c2fe29cf1" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="structopen__spiel_1_1_game_type_1a7dc97c2b88971ea7c5180d3c2fe29cf1" kindref="member">short_name</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>long<sp/>human-readable<sp/>name,<sp/>e.g.<sp/>&quot;Markov<sp/>Soccer&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="structopen__spiel_1_1_game_type_1a89c154ac202bd4a659b9e4ea3d28ebbb" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="structopen__spiel_1_1_game_type_1a89c154ac202bd4a659b9e4ea3d28ebbb" kindref="member">long_name</ref>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>the<sp/>game<sp/>one-player-at-a-time<sp/>or<sp/>do<sp/>players<sp/>act<sp/>simultaneously?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="structopen__spiel_1_1_game_type_1a624349737f34cc67d0cf81fd7138c17b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_type_1a624349737f34cc67d0cf81fd7138c17b" kindref="member">Dynamics</ref><sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structopen__spiel_1_1_game_type_1a624349737f34cc67d0cf81fd7138c17ba0ffc281e20028439b1995e0fa983ffcb" kindref="member">kSimultaneous</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>some<sp/>or<sp/>all<sp/>nodes<sp/>every<sp/>player<sp/>acts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structopen__spiel_1_1_game_type_1a624349737f34cc67d0cf81fd7138c17baeb609b99f542b955302693c0f445ba0c" kindref="member">kSequential</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Turn-based<sp/>games.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mean<sp/>field<sp/>game.<sp/>In<sp/>particular,<sp/>this<sp/>adds<sp/>mean<sp/>field<sp/>nodes.<sp/>Support<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mean<sp/>field<sp/>games<sp/>is<sp/>experimental.<sp/>See<sp/>details<sp/>in<sp/>games/mfg/README.md.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structopen__spiel_1_1_game_type_1a624349737f34cc67d0cf81fd7138c17ba6a40bb1d52ea6251e5ce3b9e7d3577bd" kindref="member">kMeanField</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>a<sp/>Mean<sp/>Field<sp/>Game</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="65" refid="structopen__spiel_1_1_game_type_1ac1176bf5ed045dc24fb4b113af2750b8" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structopen__spiel_1_1_game_type_1a624349737f34cc67d0cf81fd7138c17b" kindref="member">Dynamics</ref><sp/><ref refid="structopen__spiel_1_1_game_type_1ac1176bf5ed045dc24fb4b113af2750b8" kindref="member">dynamics</ref>;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Are<sp/>there<sp/>any<sp/>chance<sp/>nodes?<sp/>If<sp/>so,<sp/>how<sp/>is<sp/>chance<sp/>treated?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Either<sp/>all<sp/>possible<sp/>chance<sp/>outcomes<sp/>are<sp/>explicitly<sp/>returned<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ChanceOutcomes(),<sp/>and<sp/>the<sp/>result<sp/>of<sp/>ApplyAction()<sp/>is<sp/>deterministic.<sp/>Or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>just<sp/>one<sp/>ChanceOutcome<sp/>is<sp/>returned,<sp/>and<sp/>the<sp/>result<sp/>of<sp/>ApplyAction()<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>stochastic.<sp/>If<sp/>in<sp/>doubt,<sp/>it<sp/>is<sp/>better<sp/>to<sp/>implement<sp/>stochastic<sp/>games<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>kExplicitStochastic,<sp/>as<sp/>this<sp/>makes<sp/>more<sp/>information<sp/>available<sp/>to<sp/>any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>learning<sp/>algorithms<sp/>you<sp/>choose<sp/>to<sp/>use<sp/>(i.e.<sp/>the<sp/>whole<sp/>chance<sp/>outcome</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>distribution<sp/>is<sp/>visible<sp/>to<sp/>the<sp/>algorithm,<sp/>rather<sp/>than<sp/>just<sp/>the<sp/>sampled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>outcome).<sp/>For<sp/>more<sp/>discussion<sp/>of<sp/>this<sp/>field,<sp/>see<sp/>the<sp/>github<sp/>issue:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>https://github.com/deepmind/open_spiel/issues/792.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="structopen__spiel_1_1_game_type_1a1f22342e8a8c066323b49c0340a06d8e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_type_1a1f22342e8a8c066323b49c0340a06d8e" kindref="member">ChanceMode</ref><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structopen__spiel_1_1_game_type_1a1f22342e8a8c066323b49c0340a06d8eab1ebb5017b01aead05321c8dd2107ab0" kindref="member">kDeterministic</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>chance<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structopen__spiel_1_1_game_type_1a1f22342e8a8c066323b49c0340a06d8ea10b2b50f4692475e7972d0dd6b73694b" kindref="member">kExplicitStochastic</ref>,<sp/><sp/></highlight><highlight class="comment">//<sp/>Has<sp/>at<sp/>least<sp/>one<sp/>chance<sp/>node,<sp/>all<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>deterministic<sp/>ApplyAction()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structopen__spiel_1_1_game_type_1a1f22342e8a8c066323b49c0340a06d8ea39686673a19498ee90ed998e494c5bc7" kindref="member">kSampledStochastic</ref>,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>At<sp/>least<sp/>one<sp/>chance<sp/>node<sp/>with<sp/>non-deterministic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ApplyAction()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="84" refid="structopen__spiel_1_1_game_type_1a7a1a6c9e079e58933da6b62c4d04279e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structopen__spiel_1_1_game_type_1a1f22342e8a8c066323b49c0340a06d8e" kindref="member">ChanceMode</ref><sp/><ref refid="structopen__spiel_1_1_game_type_1a7a1a6c9e079e58933da6b62c4d04279e" kindref="member">chance_mode</ref>;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>information<sp/>type<sp/>of<sp/>the<sp/>game.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="structopen__spiel_1_1_game_type_1a0b4230b668f857b0815bd55f11b522ae" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_type_1a0b4230b668f857b0815bd55f11b522ae" kindref="member">Information</ref><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structopen__spiel_1_1_game_type_1a0b4230b668f857b0815bd55f11b522aea21e6a5b3710e0b13334d892e2b8a4be3" kindref="member">kOneShot</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>aka<sp/>Normal-form<sp/>games<sp/>(single<sp/>simultaneous<sp/>turn).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structopen__spiel_1_1_game_type_1a0b4230b668f857b0815bd55f11b522aeacd60620d6401b630c39d1af12e6d701a" kindref="member">kPerfectInformation</ref>,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>players<sp/>know<sp/>the<sp/>state<sp/>of<sp/>the<sp/>game.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structopen__spiel_1_1_game_type_1a0b4230b668f857b0815bd55f11b522aeac9856f08bbc3ba2427a640b6bfdcb9f1" kindref="member">kImperfectInformation</ref>,<sp/><sp/></highlight><highlight class="comment">//<sp/>Some<sp/>information<sp/>is<sp/>hidden<sp/>from<sp/>some<sp/>players.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="92" refid="structopen__spiel_1_1_game_type_1a99e4ce5d58635d108e99367a5d12f589" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structopen__spiel_1_1_game_type_1a0b4230b668f857b0815bd55f11b522ae" kindref="member">Information</ref><sp/><ref refid="structopen__spiel_1_1_game_type_1a99e4ce5d58635d108e99367a5d12f589" kindref="member">information</ref>;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Whether<sp/>the<sp/>game<sp/>has<sp/>any<sp/>constraints<sp/>on<sp/>the<sp/>player<sp/>utilities.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="structopen__spiel_1_1_game_type_1a1ac5c4948c36c41709023b391bb58ef3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_type_1a1ac5c4948c36c41709023b391bb58ef3" kindref="member">Utility</ref><sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structopen__spiel_1_1_game_type_1a1ac5c4948c36c41709023b391bb58ef3a1cf995c896f7178e2472254ada88096f" kindref="member">kZeroSum</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Utilities<sp/>of<sp/>all<sp/>players<sp/>sum<sp/>to<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structopen__spiel_1_1_game_type_1a1ac5c4948c36c41709023b391bb58ef3a6a09f3b5a2bec5deeb985ff0c06067b5" kindref="member">kConstantSum</ref>,<sp/><sp/></highlight><highlight class="comment">//<sp/>Utilities<sp/>of<sp/>all<sp/>players<sp/>sum<sp/>to<sp/>a<sp/>constant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structopen__spiel_1_1_game_type_1a1ac5c4948c36c41709023b391bb58ef3a986cbc0a359db75471832f86381b190e" kindref="member">kGeneralSum</ref>,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Total<sp/>utility<sp/>of<sp/>all<sp/>players<sp/>differs<sp/>in<sp/>different<sp/>outcomes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structopen__spiel_1_1_game_type_1a1ac5c4948c36c41709023b391bb58ef3a2addd5cc0adb04673609d0c5475e022e" kindref="member">kIdentical</ref>,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Every<sp/>player<sp/>gets<sp/>an<sp/>identical<sp/>value<sp/>(cooperative<sp/>game).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="101" refid="structopen__spiel_1_1_game_type_1a97241a4820868fc48068e6585ab142a6" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structopen__spiel_1_1_game_type_1a1ac5c4948c36c41709023b391bb58ef3" kindref="member">Utility</ref><sp/><ref refid="structopen__spiel_1_1_game_type_1a97241a4820868fc48068e6585ab142a6" kindref="member">utility</ref>;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>are<sp/>rewards<sp/>handed<sp/>out?<sp/>Note<sp/>that<sp/>even<sp/>if<sp/>the<sp/>game<sp/>only<sp/>specifies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>utilities<sp/>at<sp/>terminal<sp/>states,<sp/>the<sp/>default<sp/>implementation<sp/>of<sp/>State::Rewards</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>work<sp/>for<sp/>RL<sp/>uses<sp/>(giving<sp/>0<sp/>everywhere<sp/>except<sp/>terminal<sp/>states).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="structopen__spiel_1_1_game_type_1a5a5f739de73ade6cfe6961fd4a2f41a5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_type_1a5a5f739de73ade6cfe6961fd4a2f41a5" kindref="member">RewardModel</ref><sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structopen__spiel_1_1_game_type_1a5a5f739de73ade6cfe6961fd4a2f41a5a5feb2f9f9be894b60ede74a61a0f27f5" kindref="member">kRewards</ref>,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>RL-style<sp/>func<sp/>r(s,<sp/>a,<sp/>s&apos;)<sp/>via<sp/>State::Rewards()<sp/>call<sp/>at<sp/>s&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structopen__spiel_1_1_game_type_1a5a5f739de73ade6cfe6961fd4a2f41a5a217dd2f6ef26065693bb5043fce241ea" kindref="member">kTerminal</ref>,<sp/><sp/></highlight><highlight class="comment">//<sp/>Games-style,<sp/>only<sp/>at<sp/>terminals.<sp/>Call<sp/>(State::Returns()).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="110" refid="structopen__spiel_1_1_game_type_1aa72d7337710404c4a4c85cad77ad9992" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structopen__spiel_1_1_game_type_1a5a5f739de73ade6cfe6961fd4a2f41a5" kindref="member">RewardModel</ref><sp/><ref refid="structopen__spiel_1_1_game_type_1aa72d7337710404c4a4c85cad77ad9992" kindref="member">reward_model</ref>;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>How<sp/>many<sp/>players<sp/>can<sp/>play<sp/>the<sp/>game.<sp/>If<sp/>the<sp/>number<sp/>can<sp/>vary,<sp/>the<sp/>actual</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>instantiation<sp/>of<sp/>the<sp/>game<sp/>should<sp/>specify<sp/>how<sp/>many<sp/>players<sp/>there<sp/>are.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="structopen__spiel_1_1_game_type_1acb7c9c12c353ccb42a4273e026bd61cf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_type_1acb7c9c12c353ccb42a4273e026bd61cf" kindref="member">max_num_players</ref>;</highlight></codeline>
<codeline lineno="115" refid="structopen__spiel_1_1_game_type_1a8156a1d7578c71dd5425d6b22c171611" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_type_1a8156a1d7578c71dd5425d6b22c171611" kindref="member">min_num_players</ref>;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Which<sp/>type<sp/>of<sp/>information<sp/>state<sp/>representations<sp/>are<sp/>supported?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>information<sp/>state<sp/>is<sp/>a<sp/>perfect-recall<sp/>state-of-the-game<sp/>from<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>perspective<sp/>of<sp/>one<sp/>player.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="structopen__spiel_1_1_game_type_1a909f5d7264115920cd4e63527fa80bc3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_type_1a909f5d7264115920cd4e63527fa80bc3" kindref="member">provides_information_state_string</ref>;</highlight></codeline>
<codeline lineno="121" refid="structopen__spiel_1_1_game_type_1a0e75001913b46cb55660c87ff67ec72b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_type_1a0e75001913b46cb55660c87ff67ec72b" kindref="member">provides_information_state_tensor</ref>;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Which<sp/>type<sp/>of<sp/>observation<sp/>representations<sp/>are<sp/>supported?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>observation<sp/>is<sp/>some<sp/>subset<sp/>of<sp/>the<sp/>information<sp/>state<sp/>with<sp/>the<sp/>property</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>remembering<sp/>all<sp/>the<sp/>player&apos;s<sp/>observations<sp/>and<sp/>actions<sp/>is<sp/>sufficient</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>reconstruct<sp/>the<sp/>information<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127" refid="structopen__spiel_1_1_game_type_1aefe22999e3f3866dfac4512fefa09259" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_type_1aefe22999e3f3866dfac4512fefa09259" kindref="member">provides_observation_string</ref>;</highlight></codeline>
<codeline lineno="128" refid="structopen__spiel_1_1_game_type_1aa7926b4919729c6aba36bcb5cd55895c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_type_1aa7926b4919729c6aba36bcb5cd55895c" kindref="member">provides_observation_tensor</ref>;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="structopen__spiel_1_1_game_type_1a2d265bb0c5d0be4d64222ac322bf3510" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespaceopen__spiel_1ad7c4d931669b5e357cb5c7f84a6de094" kindref="member">GameParameters</ref><sp/><ref refid="structopen__spiel_1_1_game_type_1a2d265bb0c5d0be4d64222ac322bf3510" kindref="member">parameter_specification</ref>;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_type_1a3478a4e3b97e7b14ac147d3d996a0e35" kindref="member">ContainsRequiredParameters</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>number<sp/>of<sp/>optional<sp/>values<sp/>that<sp/>have<sp/>defaults,<sp/>whose<sp/>values<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>overridden<sp/>in<sp/>each<sp/>game.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Can<sp/>the<sp/>game<sp/>be<sp/>loaded<sp/>with<sp/>no<sp/>parameters?<sp/>It<sp/>is<sp/>strongly<sp/>recommended<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>games<sp/>be<sp/>loadable<sp/>with<sp/>default<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138" refid="structopen__spiel_1_1_game_type_1a58d658cf0ae6c7a104b621ed20d65c52" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_type_1a58d658cf0ae6c7a104b621ed20d65c52" kindref="member">default_loadable</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Can<sp/>we<sp/>factorize<sp/>observations<sp/>into<sp/>public<sp/>and<sp/>private<sp/>parts?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>similar<sp/>to<sp/>observation<sp/>fields<sp/>before,<sp/>but<sp/>adds<sp/>additional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>distinction<sp/>between<sp/>public<sp/>and<sp/>private<sp/>observations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143" refid="structopen__spiel_1_1_game_type_1ad0f911229d1f5b893dc2225069703c36" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_type_1ad0f911229d1f5b893dc2225069703c36" kindref="member">provides_factored_observation_string</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145" refid="structopen__spiel_1_1_game_type_1a20640f61e3d0524691ec952281d2eccd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_type_1a20640f61e3d0524691ec952281d2eccd" kindref="member">provides_information_state</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_type_1a0e75001913b46cb55660c87ff67ec72b" kindref="member">provides_information_state_tensor</ref></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/><ref refid="structopen__spiel_1_1_game_type_1a909f5d7264115920cd4e63527fa80bc3" kindref="member">provides_information_state_string</ref>;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="149" refid="structopen__spiel_1_1_game_type_1a2759dc85a4cd799fdcb247b0c9c870cf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_type_1a2759dc85a4cd799fdcb247b0c9c870cf" kindref="member">provides_observation</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_type_1aa7926b4919729c6aba36bcb5cd55895c" kindref="member">provides_observation_tensor</ref></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/><ref refid="structopen__spiel_1_1_game_type_1aefe22999e3f3866dfac4512fefa09259" kindref="member">provides_observation_string</ref>;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal">};</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Information<sp/>about<sp/>a<sp/>concrete<sp/>Game<sp/>instantiation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>information<sp/>may<sp/>depend<sp/>on<sp/>the<sp/>game<sp/>parameters,<sp/>and<sp/>hence<sp/>cannot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//<sp/>be<sp/>part<sp/>of<sp/>`GameType`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158" refid="structopen__spiel_1_1_game_info" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structopen__spiel_1_1_game_info" kindref="compound">GameInfo</ref><sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>size<sp/>of<sp/>the<sp/>action<sp/>space.<sp/>See<sp/>`Game`<sp/>for<sp/>a<sp/>full<sp/>description.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160" refid="structopen__spiel_1_1_game_info_1ab71b1bc4a00b908d989742fef51b8951" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_info_1ab71b1bc4a00b908d989742fef51b8951" kindref="member">num_distinct_actions</ref>;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Maximum<sp/>number<sp/>of<sp/>distinct<sp/>chance<sp/>outcomes<sp/>for<sp/>chance<sp/>nodes<sp/>in<sp/>the<sp/>game.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="structopen__spiel_1_1_game_info_1a17f2d847319cc6c9065792a2710f71eb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_info_1a17f2d847319cc6c9065792a2710f71eb" kindref="member">max_chance_outcomes</ref>;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>number<sp/>of<sp/>players<sp/>in<sp/>this<sp/>instantiation<sp/>of<sp/>the<sp/>game.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Does<sp/>not<sp/>include<sp/>the<sp/>chance-player.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="structopen__spiel_1_1_game_info_1a08b82d096c652f4b0d129c0fc317e1ee" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_info_1a08b82d096c652f4b0d129c0fc317e1ee" kindref="member">num_players</ref>;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Utility<sp/>range.<sp/>These<sp/>functions<sp/>define<sp/>the<sp/>lower<sp/>and<sp/>upper<sp/>bounds<sp/>on<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>values<sp/>returned<sp/>by<sp/>State::PlayerReturn(Player<sp/>player)<sp/>over<sp/>all<sp/>valid<sp/>player</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>numbers.<sp/>This<sp/>range<sp/>should<sp/>be<sp/>as<sp/>tight<sp/>as<sp/>possible;<sp/>the<sp/>intention<sp/>is<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>give<sp/>some<sp/>information<sp/>to<sp/>algorithms<sp/>that<sp/>require<sp/>it,<sp/>and<sp/>so<sp/>their</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>performance<sp/>may<sp/>suffer<sp/>if<sp/>the<sp/>range<sp/>is<sp/>not<sp/>tight.<sp/>Loss/draw/win<sp/>outcomes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>common<sp/>among<sp/>games<sp/>and<sp/>should<sp/>use<sp/>the<sp/>standard<sp/>values<sp/>of<sp/>{-1,0,1}.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175" refid="structopen__spiel_1_1_game_info_1aa8895dd5770b18c2ef9729c350b9b860" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_info_1aa8895dd5770b18c2ef9729c350b9b860" kindref="member">min_utility</ref>;</highlight></codeline>
<codeline lineno="176" refid="structopen__spiel_1_1_game_info_1a33017bef673c65ec68fee61112f5495a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_info_1a33017bef673c65ec68fee61112f5495a" kindref="member">max_utility</ref>;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>total<sp/>utility<sp/>for<sp/>all<sp/>players,<sp/>if<sp/>this<sp/>is<sp/>a<sp/>constant-sum-utility<sp/>game.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Should<sp/>be<sp/>zero<sp/>if<sp/>the<sp/>game<sp/>is<sp/>zero-sum.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180" refid="structopen__spiel_1_1_game_info_1a652589fe7e29dbaeb500d5049e0c4a34" refkind="member"><highlight class="normal"><sp/><sp/>absl::optional&lt;double&gt;<sp/><ref refid="structopen__spiel_1_1_game_info_1a652589fe7e29dbaeb500d5049e0c4a34" kindref="member">utility_sum</ref>;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>maximum<sp/>number<sp/>of<sp/>player<sp/>decisions<sp/>in<sp/>a<sp/>game.<sp/>Does<sp/>not<sp/>include<sp/>chance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>events.<sp/>For<sp/>a<sp/>simultaneous<sp/>action<sp/>game,<sp/>this<sp/>is<sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>joint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>decisions.<sp/>In<sp/>a<sp/>turn-based<sp/>game,<sp/>this<sp/>is<sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>individual</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>decisions<sp/>summed<sp/>over<sp/>all<sp/>players.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186" refid="structopen__spiel_1_1_game_info_1aa4c66e7c9328996ff07500f422cfaea3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_info_1aa4c66e7c9328996ff07500f422cfaea3" kindref="member">max_game_length</ref>;</highlight></codeline>
<codeline lineno="187"><highlight class="normal">};</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal">std::ostream&amp;<sp/><ref refid="namespaceopen__spiel_1a7a4f3573ff9d467ce5c64eecbe5ea8b9" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1a236dc05d070fca4a27a4344aea799332" kindref="member">StateType</ref>&amp;<sp/>type);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal">std::ostream&amp;<sp/><ref refid="namespaceopen__spiel_1a7a4f3573ff9d467ce5c64eecbe5ea8b9" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>stream,<sp/><ref refid="structopen__spiel_1_1_game_type_1a624349737f34cc67d0cf81fd7138c17b" kindref="member">GameType::Dynamics</ref><sp/>value);</highlight></codeline>
<codeline lineno="192"><highlight class="normal">std::ostream&amp;<sp/><ref refid="namespaceopen__spiel_1a7a4f3573ff9d467ce5c64eecbe5ea8b9" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>stream,<sp/><ref refid="structopen__spiel_1_1_game_type_1a1f22342e8a8c066323b49c0340a06d8e" kindref="member">GameType::ChanceMode</ref><sp/>value);</highlight></codeline>
<codeline lineno="193"><highlight class="normal">std::ostream&amp;<sp/><ref refid="namespaceopen__spiel_1a7a4f3573ff9d467ce5c64eecbe5ea8b9" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>stream,<sp/><ref refid="structopen__spiel_1_1_game_type_1a0b4230b668f857b0815bd55f11b522ae" kindref="member">GameType::Information</ref><sp/>value);</highlight></codeline>
<codeline lineno="194"><highlight class="normal">std::ostream&amp;<sp/><ref refid="namespaceopen__spiel_1a7a4f3573ff9d467ce5c64eecbe5ea8b9" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>stream,<sp/><ref refid="structopen__spiel_1_1_game_type_1a1ac5c4948c36c41709023b391bb58ef3" kindref="member">GameType::Utility</ref><sp/>value);</highlight></codeline>
<codeline lineno="195"><highlight class="normal">std::ostream&amp;<sp/><ref refid="namespaceopen__spiel_1a7a4f3573ff9d467ce5c64eecbe5ea8b9" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>stream,<sp/><ref refid="structopen__spiel_1_1_game_type_1a5a5f739de73ade6cfe6961fd4a2f41a5" kindref="member">GameType::RewardModel</ref><sp/>value);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>probability<sp/>of<sp/>taking<sp/>each<sp/>possible<sp/>action<sp/>in<sp/>a<sp/>particular<sp/>info<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198" refid="namespaceopen__spiel_1ac4ea6d9d7193ac74f6f333b954e3810f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespaceopen__spiel_1ac4ea6d9d7193ac74f6f333b954e3810f" kindref="member">ActionsAndProbs</ref><sp/>=<sp/>std::vector&lt;std::pair&lt;Action,<sp/>double&gt;&gt;;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>alias<sp/>this<sp/>here<sp/>as<sp/>we<sp/>can&apos;t<sp/>import<sp/>state_distribution.h<sp/>or<sp/>we&apos;d<sp/>have<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="comment">//<sp/>circular<sp/>dependency.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202" refid="namespaceopen__spiel_1ad03e31d0186baba8fb60b04965c48e86" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespaceopen__spiel_1ad03e31d0186baba8fb60b04965c48e86" kindref="member">HistoryDistribution</ref><sp/>=</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>std::pair&lt;std::vector&lt;std::unique_ptr&lt;State&gt;&gt;,<sp/>std::vector&lt;double&gt;&gt;;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Forward<sp/>declarations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classopen__spiel_1_1_game" kindref="compound">Game</ref>;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classopen__spiel_1_1_observer" kindref="compound">Observer</ref>;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>abstract<sp/>class<sp/>that<sp/>represents<sp/>a<sp/>state<sp/>of<sp/>the<sp/>game.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210" refid="classopen__spiel_1_1_state" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classopen__spiel_1_1_state" kindref="compound">State</ref><sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="212" refid="classopen__spiel_1_1_state_1abef057180744ea28a0cd85289ce0761e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1abef057180744ea28a0cd85289ce0761e" kindref="member">~State</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Derived<sp/>classes<sp/>must<sp/>call<sp/>one<sp/>of<sp/>these<sp/>constructors.<sp/>Note<sp/>that<sp/>a<sp/>state<sp/>must</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>passed<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>game<sp/>which<sp/>created<sp/>it.<sp/>Some<sp/>methods<sp/>in<sp/>some</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>games<sp/>rely<sp/>on<sp/>this<sp/>and<sp/>so<sp/>it<sp/>must<sp/>correspond<sp/>to<sp/>a<sp/>valid<sp/>game<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>easiest<sp/>way<sp/>to<sp/>ensure<sp/>this<sp/>is<sp/>to<sp/>use<sp/>Game::NewInitialState<sp/>to<sp/>create</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>new<sp/>states,<sp/>which<sp/>will<sp/>pass<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>parent<sp/>game<sp/>object.<sp/>Also,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>since<sp/>this<sp/>shared<sp/>pointer<sp/>to<sp/>the<sp/>parent<sp/>is<sp/>required,<sp/>Game<sp/>objects<sp/>cannot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>used<sp/>as<sp/>value<sp/>types<sp/>and<sp/>should<sp/>always<sp/>be<sp/>created<sp/>via<sp/>a<sp/>shared<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>documentation<sp/>of<sp/>the<sp/>Game<sp/>object<sp/>for<sp/>further<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><ref refid="classopen__spiel_1_1_state_1a246bd5cf1da14d3ab69d479aea0edc03" kindref="member">State</ref>(std::shared_ptr&lt;const<sp/>Game&gt;<sp/>game);</highlight></codeline>
<codeline lineno="223" refid="classopen__spiel_1_1_state_1a4c77fe7bf4738cb8bd3bbd6dfadddf9c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classopen__spiel_1_1_state_1a4c77fe7bf4738cb8bd3bbd6dfadddf9c" kindref="member">State</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state" kindref="compound">State</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>current<sp/>player.<sp/>Player<sp/>numbers<sp/>start<sp/>from<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Negative<sp/>numbers<sp/>are<sp/>for<sp/>chance<sp/>(-1)<sp/>or<sp/>simultaneous<sp/>(-2).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>kTerminalPlayerId<sp/>should<sp/>be<sp/>returned<sp/>on<sp/>a<sp/>TerminalNode().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228" refid="classopen__spiel_1_1_state_1a229614eafbf9978cbc4109347e5f9efa" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1a8e9bf6a040c687a9f0c8393728dc0121" kindref="member">Player</ref><sp/><ref refid="classopen__spiel_1_1_state_1a229614eafbf9978cbc4109347e5f9efa" kindref="member">CurrentPlayer</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Change<sp/>the<sp/>state<sp/>of<sp/>the<sp/>game<sp/>by<sp/>applying<sp/>the<sp/>specified<sp/>action<sp/>in<sp/>turn-based</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>games<sp/>or<sp/>in<sp/>non-simultaneous<sp/>nodes<sp/>of<sp/>simultaneous<sp/>move<sp/>games.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>encodes<sp/>the<sp/>logic<sp/>of<sp/>the<sp/>game<sp/>rules.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>the<sp/>case<sp/>of<sp/>chance<sp/>nodes,<sp/>the<sp/>behavior<sp/>of<sp/>this<sp/>function<sp/>depends<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>GameType::chance_mode.<sp/>If<sp/>kExplicit,<sp/>then<sp/>the<sp/>outcome<sp/>should<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>directly<sp/>applied.<sp/>If<sp/>kSampled,<sp/>then<sp/>a<sp/>dummy<sp/>outcome<sp/>is<sp/>passed<sp/>and<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sampling<sp/>of<sp/>and<sp/>outcome<sp/>should<sp/>be<sp/>done<sp/>in<sp/>this<sp/>function<sp/>and<sp/>then<sp/>applied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Games<sp/>should<sp/>implement<sp/>DoApplyAction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1aafbfbb43035eddbb2d7aa2aeffeed825" kindref="member">ApplyAction</ref>(<ref refid="namespaceopen__spiel_1a8aa5fc5cff0ef466697b1df5cbfcbd3a" kindref="member">Action</ref><sp/>action_id);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Helper<sp/>versions<sp/>of<sp/>ApplyAction<sp/>that<sp/>first<sp/>does<sp/>a<sp/>legality<sp/>check.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1a6fcd275fa47ab9d26a473321c60e0a95" kindref="member">ApplyActionWithLegalityCheck</ref>(<ref refid="namespaceopen__spiel_1a8aa5fc5cff0ef466697b1df5cbfcbd3a" kindref="member">Action</ref><sp/>action_id);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>`LegalActions(Player<sp/>player)`<sp/>is<sp/>valid<sp/>for<sp/>all<sp/>nodes<sp/>in<sp/>all<sp/>games,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>returning<sp/>an<sp/>empty<sp/>list<sp/>for<sp/>players<sp/>who<sp/>don&apos;t<sp/>act<sp/>at<sp/>this<sp/>state.<sp/>The</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>actions<sp/>should<sp/>be<sp/>returned<sp/>in<sp/>ascending<sp/>order.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>default<sp/>implementation<sp/>is<sp/>fine<sp/>for<sp/>turn-based<sp/>games,<sp/>but<sp/>should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>overridden<sp/>by<sp/>simultaneous-move<sp/>games.<sp/>At<sp/>least<sp/>one<sp/>player<sp/>should<sp/>have<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>legal<sp/>action<sp/>or<sp/>the<sp/>game<sp/>should<sp/>be<sp/>terminal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>games<sp/>mostly<sp/>override<sp/>LegalActions(),<sp/>this<sp/>method<sp/>will<sp/>not<sp/>be<sp/>visible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>derived<sp/>classes<sp/>unless<sp/>a<sp/>using<sp/>directive<sp/>is<sp/>added.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255" refid="classopen__spiel_1_1_state_1af177c3229ec75caec0b41d5c799b35e1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::vector&lt;Action&gt;<sp/><ref refid="classopen__spiel_1_1_state_1af177c3229ec75caec0b41d5c799b35e1" kindref="member">LegalActions</ref>(<ref refid="namespaceopen__spiel_1a8e9bf6a040c687a9f0c8393728dc0121" kindref="member">Player</ref><sp/>player)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classopen__spiel_1_1_state_1ab5b84abeb1ec44715b11690b8acc284c" kindref="member">IsTerminal</ref>()<sp/>&amp;&amp;<sp/>player<sp/>==<sp/><ref refid="classopen__spiel_1_1_state_1a229614eafbf9978cbc4109347e5f9efa" kindref="member">CurrentPlayer</ref>())<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1a8289468cf01f3a8c53b3848957905ec8" kindref="member">IsChanceNode</ref>()<sp/>?<sp/><ref refid="classopen__spiel_1_1_state_1a610b46ccda2eefd984a3716a5219f78a" kindref="member">LegalChanceOutcomes</ref>()<sp/>:<sp/><ref refid="classopen__spiel_1_1_state_1ae876a9b5f00331d660031568c4af13df" kindref="member">LegalActions</ref>();</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>`LegalActions()`<sp/>returns<sp/>the<sp/>actions<sp/>for<sp/>the<sp/>current<sp/>player<sp/>(including<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>chance<sp/>nodes).<sp/>All<sp/>games<sp/>should<sp/>implement<sp/>this<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>At<sp/>a<sp/>player<sp/>node,<sp/>all<sp/>returned<sp/>actions<sp/>should<sp/>be<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[0,<sp/>NumDistinctActions()).<sp/>For<sp/>a<sp/>chance<sp/>node,<sp/>they<sp/>should<sp/>all<sp/>be<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[0,<sp/>MaxChanceOutcomes()).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>actions<sp/>should<sp/>be<sp/>returned<sp/>in<sp/>ascending<sp/>order.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>state<sp/>is<sp/>non-terminal<sp/>(and<sp/>not<sp/>a<sp/>mean<sp/>field<sp/>node),<sp/>there<sp/>must<sp/>be<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>least<sp/>one<sp/>legal<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>simultaneous-move<sp/>games,<sp/>the<sp/>abstract<sp/>base<sp/>class<sp/>implements<sp/>it<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>terms<sp/>of<sp/>LegalActions(player)<sp/>and<sp/>LegalChanceOutcomes(),<sp/>and<sp/>so<sp/>derived</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>classes<sp/>only<sp/>need<sp/>to<sp/>implement<sp/>`LegalActions(Player<sp/>player)`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>result<sp/>in<sp/>LegalActions()<sp/>being<sp/>hidden<sp/>unless<sp/>a<sp/>using<sp/>directive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>added.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277" refid="classopen__spiel_1_1_state_1ae876a9b5f00331d660031568c4af13df" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::vector&lt;Action&gt;<sp/><ref refid="classopen__spiel_1_1_state_1ae876a9b5f00331d660031568c4af13df" kindref="member">LegalActions</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>vector<sp/>containing<sp/>1<sp/>for<sp/>legal<sp/>actions<sp/>and<sp/>0<sp/>for<sp/>illegal<sp/>actions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>length<sp/>is<sp/>`game.NumDistinctActions()`<sp/>for<sp/>player<sp/>nodes,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>`game.MaxChanceOutcomes()`<sp/>for<sp/>chance<sp/>nodes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/><ref refid="classopen__spiel_1_1_state_1a4f481e63a08d15a060bc35d8ad6e448c" kindref="member">LegalActionsMask</ref>(<ref refid="namespaceopen__spiel_1a8e9bf6a040c687a9f0c8393728dc0121" kindref="member">Player</ref><sp/>player)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Convenience<sp/>function<sp/>for<sp/>turn-based<sp/>games.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285" refid="classopen__spiel_1_1_state_1a4f481e63a08d15a060bc35d8ad6e448c" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/><ref refid="classopen__spiel_1_1_state_1a4f481e63a08d15a060bc35d8ad6e448c" kindref="member">LegalActionsMask</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1a4f481e63a08d15a060bc35d8ad6e448c" kindref="member">LegalActionsMask</ref>(<ref refid="classopen__spiel_1_1_state_1a229614eafbf9978cbc4109347e5f9efa" kindref="member">CurrentPlayer</ref>());</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>string<sp/>representation<sp/>of<sp/>the<sp/>specified<sp/>action<sp/>for<sp/>the<sp/>player.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>representation<sp/>may<sp/>depend<sp/>on<sp/>the<sp/>current<sp/>state<sp/>of<sp/>the<sp/>game,<sp/>e.g.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>chess<sp/>the<sp/>string<sp/>&quot;Nf3&quot;<sp/>would<sp/>correspond<sp/>to<sp/>different<sp/>starting<sp/>squares</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>different<sp/>states<sp/>(and<sp/>hence<sp/>probably<sp/>different<sp/>action<sp/>ids).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>method<sp/>will<sp/>format<sp/>chance<sp/>outcomes<sp/>if<sp/>player<sp/>==<sp/>kChancePlayerId</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294" refid="classopen__spiel_1_1_state_1a1eb002ef7abdaf3633d3438c59cc9477" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="classopen__spiel_1_1_state_1a1eb002ef7abdaf3633d3438c59cc9477" kindref="member">ActionToString</ref>(<ref refid="namespaceopen__spiel_1a8e9bf6a040c687a9f0c8393728dc0121" kindref="member">Player</ref><sp/>player,<sp/><ref refid="namespaceopen__spiel_1a8aa5fc5cff0ef466697b1df5cbfcbd3a" kindref="member">Action</ref><sp/>action_id)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="295" refid="classopen__spiel_1_1_state_1a0467f66e4c157eab1aa4140bcb856e3f" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classopen__spiel_1_1_state_1a0467f66e4c157eab1aa4140bcb856e3f" kindref="member">ActionToString</ref>(<ref refid="namespaceopen__spiel_1a8aa5fc5cff0ef466697b1df5cbfcbd3a" kindref="member">Action</ref><sp/>action_id)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1a1eb002ef7abdaf3633d3438c59cc9477" kindref="member">ActionToString</ref>(<ref refid="classopen__spiel_1_1_state_1a229614eafbf9978cbc4109347e5f9efa" kindref="member">CurrentPlayer</ref>(),<sp/>action_id);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reverses<sp/>the<sp/>mapping<sp/>done<sp/>by<sp/>ActionToString.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>This<sp/>currently<sp/>just<sp/>loops<sp/>over<sp/>all<sp/>legal<sp/>actions,<sp/>converts<sp/>them<sp/>into</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>string,<sp/>and<sp/>checks<sp/>equality,<sp/>so<sp/>it<sp/>can<sp/>be<sp/>very<sp/>slow.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1a8aa5fc5cff0ef466697b1df5cbfcbd3a" kindref="member">Action</ref><sp/><ref refid="classopen__spiel_1_1_state_1acbd1f66c9496f350693594ad38fc7907" kindref="member">StringToAction</ref>(<ref refid="namespaceopen__spiel_1a8e9bf6a040c687a9f0c8393728dc0121" kindref="member">Player</ref><sp/>player,</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>action_str)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="304" refid="classopen__spiel_1_1_state_1abd0bac25b0d9ced7f5f1009fd56ec1ae" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespaceopen__spiel_1a8aa5fc5cff0ef466697b1df5cbfcbd3a" kindref="member">Action</ref><sp/><ref refid="classopen__spiel_1_1_state_1abd0bac25b0d9ced7f5f1009fd56ec1ae" kindref="member">StringToAction</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>action_str)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1acbd1f66c9496f350693594ad38fc7907" kindref="member">StringToAction</ref>(<ref refid="classopen__spiel_1_1_state_1a229614eafbf9978cbc4109347e5f9efa" kindref="member">CurrentPlayer</ref>(),<sp/>action_str);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>string<sp/>representation<sp/>of<sp/>the<sp/>state.<sp/>Also<sp/>used<sp/>as<sp/>in<sp/>the<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implementation<sp/>of<sp/>operator==.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310" refid="classopen__spiel_1_1_state_1a0c1bce556da5c9d7314152a2e764198e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="classopen__spiel_1_1_state_1a0c1bce556da5c9d7314152a2e764198e" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>these<sp/>states<sp/>are<sp/>equal,<sp/>false<sp/>otherwise.<sp/>Two<sp/>states<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>equal<sp/>if<sp/>they<sp/>are<sp/>the<sp/>same<sp/>world<sp/>state;<sp/>the<sp/>interpretation<sp/>might<sp/>differ</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>across<sp/>games.<sp/>For<sp/>instance,<sp/>in<sp/>an<sp/>imperfect<sp/>information<sp/>game,<sp/>the<sp/>full</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>history<sp/>might<sp/>be<sp/>relevant<sp/>for<sp/>distinguishing<sp/>states<sp/>whereas<sp/>it<sp/>might<sp/>not<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>relevant<sp/>for<sp/>single-player<sp/>games<sp/>or<sp/>perfect<sp/>information<sp/>games<sp/>such<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tic-Tac-Toe,<sp/>where<sp/>only<sp/>the<sp/>current<sp/>board<sp/>state<sp/>is<sp/>necessary.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318" refid="classopen__spiel_1_1_state_1a3e336272587c1c62a8455412b7105ebf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1a3e336272587c1c62a8455412b7105ebf" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state" kindref="compound">State</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1a0c1bce556da5c9d7314152a2e764198e" kindref="member">ToString</ref>()<sp/>==<sp/>other.<ref refid="classopen__spiel_1_1_state_1a0c1bce556da5c9d7314152a2e764198e" kindref="member">ToString</ref>();</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>this<sp/>a<sp/>terminal<sp/>state?<sp/>(i.e.<sp/>has<sp/>the<sp/>game<sp/>ended?)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323" refid="classopen__spiel_1_1_state_1ab5b84abeb1ec44715b11690b8acc284c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1ab5b84abeb1ec44715b11690b8acc284c" kindref="member">IsTerminal</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>reward<sp/>from<sp/>the<sp/>most<sp/>recent<sp/>state<sp/>transition<sp/>(s,<sp/>a,<sp/>s&apos;)<sp/>for<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>players.<sp/>This<sp/>is<sp/>provided<sp/>so<sp/>that<sp/>RL-style<sp/>games<sp/>with<sp/>intermediate<sp/>rewards</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(along<sp/>the<sp/>episode,<sp/>rather<sp/>than<sp/>just<sp/>one<sp/>value<sp/>at<sp/>the<sp/>end)<sp/>can<sp/>be<sp/>properly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implemented.<sp/>The<sp/>default<sp/>is<sp/>to<sp/>return<sp/>0<sp/>except<sp/>at<sp/>terminal<sp/>states,<sp/>where</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>terminal<sp/>returns<sp/>are<sp/>returned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>1:<sp/>should<sp/>not<sp/>be<sp/>called<sp/>at<sp/>chance<sp/>nodes<sp/>(undefined<sp/>and<sp/>crashes).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>2:<sp/>This<sp/>must<sp/>agree<sp/>with<sp/>Returns().<sp/>That<sp/>is,<sp/>for<sp/>any<sp/>state<sp/>S_t,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns(St)<sp/>=<sp/>Sum(Rewards(S_0),<sp/>Rewards(S_1)...<sp/>Rewards(S_t)).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>default<sp/>implementation<sp/>is<sp/>only<sp/>correct<sp/>for<sp/>games<sp/>that<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>have<sp/>a<sp/>final<sp/>reward.<sp/>Games<sp/>with<sp/>intermediate<sp/>rewards<sp/>must<sp/>override</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>both<sp/>this<sp/>method<sp/>and<sp/>Returns().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337" refid="classopen__spiel_1_1_state_1a4be3f52bb42fdf9db3c90a40dd1a60d2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;<sp/><ref refid="classopen__spiel_1_1_state_1a4be3f52bb42fdf9db3c90a40dd1a60d2" kindref="member">Rewards</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classopen__spiel_1_1_state_1ab5b84abeb1ec44715b11690b8acc284c" kindref="member">IsTerminal</ref>())<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1a0de4bf25d3763fd7ad920fb4eced5219" kindref="member">Returns</ref>();</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="spiel__utils_8h_1aff340fc0f81ce83d807cc1aa674db999" kindref="member">SPIEL_CHECK_FALSE</ref>(<ref refid="classopen__spiel_1_1_state_1a8289468cf01f3a8c53b3848957905ec8" kindref="member">IsChanceNode</ref>());</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;(<ref refid="classopen__spiel_1_1_state_1aa907ffe3dd80025bd074d95cc87fb7a4" kindref="member">num_players_</ref>,<sp/>0.0);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>sums<sp/>of<sp/>all<sp/>rewards<sp/>for<sp/>each<sp/>player<sp/>up<sp/>to<sp/>the<sp/>current<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>games<sp/>that<sp/>only<sp/>have<sp/>a<sp/>final<sp/>reward,<sp/>it<sp/>should<sp/>be<sp/>0<sp/>for<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>non-terminal<sp/>states,<sp/>and<sp/>the<sp/>terminal<sp/>utility<sp/>for<sp/>the<sp/>final<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349" refid="classopen__spiel_1_1_state_1a0de4bf25d3763fd7ad920fb4eced5219" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;<sp/><ref refid="classopen__spiel_1_1_state_1a0de4bf25d3763fd7ad920fb4eced5219" kindref="member">Returns</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>Reward<sp/>for<sp/>one<sp/>player<sp/>(see<sp/>above<sp/>for<sp/>definition).<sp/>If<sp/>Rewards<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>multiple<sp/>players<sp/>are<sp/>required<sp/>it<sp/>is<sp/>more<sp/>efficient<sp/>to<sp/>use<sp/>Rewards()<sp/>above.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353" refid="classopen__spiel_1_1_state_1a510f85123de13949d34186755753e742" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1a510f85123de13949d34186755753e742" kindref="member">PlayerReward</ref>(<ref refid="namespaceopen__spiel_1a8e9bf6a040c687a9f0c8393728dc0121" kindref="member">Player</ref><sp/>player)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rewards<sp/>=<sp/><ref refid="classopen__spiel_1_1_state_1a4be3f52bb42fdf9db3c90a40dd1a60d2" kindref="member">Rewards</ref>();</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="spiel__utils_8h_1ad9b10d8a52955f75371525c0f9f21b69" kindref="member">SPIEL_CHECK_LT</ref>(player,<sp/>rewards.size());</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rewards[player];</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>Return<sp/>for<sp/>one<sp/>player<sp/>(see<sp/>above<sp/>for<sp/>definition).<sp/>If<sp/>Returns<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>multiple<sp/>players<sp/>are<sp/>required<sp/>it<sp/>is<sp/>more<sp/>efficient<sp/>to<sp/>use<sp/>Returns()<sp/>above.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361" refid="classopen__spiel_1_1_state_1ab32ea9872b81db0383b9d7206d1ae3f9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1ab32ea9872b81db0383b9d7206d1ae3f9" kindref="member">PlayerReturn</ref>(<ref refid="namespaceopen__spiel_1a8e9bf6a040c687a9f0c8393728dc0121" kindref="member">Player</ref><sp/>player)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>returns<sp/>=<sp/><ref refid="classopen__spiel_1_1_state_1a0de4bf25d3763fd7ad920fb4eced5219" kindref="member">Returns</ref>();</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="spiel__utils_8h_1a5fa701f61bd5416434d72f3628e093b7" kindref="member">SPIEL_CHECK_GE</ref>(player,<sp/>0);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="spiel__utils_8h_1ad9b10d8a52955f75371525c0f9f21b69" kindref="member">SPIEL_CHECK_LT</ref>(player,<sp/>returns.size());</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>returns[player];</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>this<sp/>state<sp/>a<sp/>chance<sp/>node?<sp/>Chance<sp/>nodes<sp/>are<sp/>&quot;states&quot;<sp/>whose<sp/>actions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>represent<sp/>stochastic<sp/>outcomes.<sp/>&quot;Chance&quot;<sp/>or<sp/>&quot;Nature&quot;<sp/>is<sp/>thought<sp/>of<sp/>as<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>player<sp/>with<sp/>a<sp/>fixed<sp/>(randomized)<sp/>policy.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371" refid="classopen__spiel_1_1_state_1a8289468cf01f3a8c53b3848957905ec8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1a8289468cf01f3a8c53b3848957905ec8" kindref="member">IsChanceNode</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1a229614eafbf9978cbc4109347e5f9efa" kindref="member">CurrentPlayer</ref>()<sp/>==<sp/><ref refid="namespaceopen__spiel_1a5677cc0bb3f0c3d54e59c5df948718d6a4519a0153efaba2f86929f7e018082fb" kindref="member">kChancePlayerId</ref>;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>this<sp/>a<sp/>mean<sp/>field<sp/>node?<sp/>In<sp/>that<sp/>case,<sp/>no<sp/>action<sp/>should<sp/>be<sp/>performed,<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>instead<sp/>the<sp/>global<sp/>state<sp/>distribution<sp/>should<sp/>be<sp/>updated<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>UpdateDistribution().<sp/>See<sp/>more<sp/>details<sp/>in<sp/>games/mfg/README.md.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378" refid="classopen__spiel_1_1_state_1a9fd53f8e7abb3d779b1a3a135ec306f5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1a9fd53f8e7abb3d779b1a3a135ec306f5" kindref="member">IsMeanFieldNode</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1a229614eafbf9978cbc4109347e5f9efa" kindref="member">CurrentPlayer</ref>()<sp/>==<sp/><ref refid="namespaceopen__spiel_1a5677cc0bb3f0c3d54e59c5df948718d6a53f92239d341173f9b7a13d6eb2776f9" kindref="member">kMeanFieldPlayerId</ref>;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>this<sp/>state<sp/>a<sp/>player<sp/>node,<sp/>with<sp/>a<sp/>single<sp/>player<sp/>acting?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383" refid="classopen__spiel_1_1_state_1a53434c13daf176733c44502734acf320" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1a53434c13daf176733c44502734acf320" kindref="member">IsPlayerNode</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1a229614eafbf9978cbc4109347e5f9efa" kindref="member">CurrentPlayer</ref>()<sp/>&gt;=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>this<sp/>state<sp/>a<sp/>node<sp/>that<sp/>requires<sp/>simultaneous<sp/>action<sp/>choices<sp/>from<sp/>more</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>than<sp/>one<sp/>player?<sp/>If<sp/>this<sp/>is<sp/>ever<sp/>true,<sp/>then<sp/>the<sp/>game<sp/>should<sp/>be<sp/>marked<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>simultaneous<sp/>game.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388" refid="classopen__spiel_1_1_state_1a0d4853e33975ff760264dcd2c8399dd7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1a0d4853e33975ff760264dcd2c8399dd7" kindref="member">IsSimultaneousNode</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1a229614eafbf9978cbc4109347e5f9efa" kindref="member">CurrentPlayer</ref>()<sp/>==<sp/><ref refid="namespaceopen__spiel_1a5677cc0bb3f0c3d54e59c5df948718d6a98b448895a60295bcb57104abae3e302" kindref="member">kSimultaneousPlayerId</ref>;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>the<sp/>specified<sp/>player<sp/>acting<sp/>at<sp/>this<sp/>state?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393" refid="classopen__spiel_1_1_state_1a501c7bded99ae4fff9e34dd340e5edd8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1a501c7bded99ae4fff9e34dd340e5edd8" kindref="member">IsPlayerActing</ref>(<ref refid="namespaceopen__spiel_1a8e9bf6a040c687a9f0c8393728dc0121" kindref="member">Player</ref><sp/>player)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="spiel__utils_8h_1a5fa701f61bd5416434d72f3628e093b7" kindref="member">SPIEL_CHECK_GE</ref>(player,<sp/>0);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="spiel__utils_8h_1ad9b10d8a52955f75371525c0f9f21b69" kindref="member">SPIEL_CHECK_LT</ref>(player,<sp/><ref refid="classopen__spiel_1_1_state_1a43f01fe8bdbb6292407feb51bc535d4f" kindref="member">NumPlayers</ref>());</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1a229614eafbf9978cbc4109347e5f9efa" kindref="member">CurrentPlayer</ref>()<sp/>==<sp/>player<sp/>||<sp/><ref refid="classopen__spiel_1_1_state_1a0d4853e33975ff760264dcd2c8399dd7" kindref="member">IsSimultaneousNode</ref>();</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>store<sp/>(player,<sp/>action)<sp/>pairs<sp/>in<sp/>the<sp/>history.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400" refid="structopen__spiel_1_1_state_1_1_player_action" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structopen__spiel_1_1_state_1_1_player_action" kindref="compound">PlayerAction</ref><sp/>{</highlight></codeline>
<codeline lineno="401" refid="structopen__spiel_1_1_state_1_1_player_action_1a38760e9677be3b392aa0d0cd6eb8bc30" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a8e9bf6a040c687a9f0c8393728dc0121" kindref="member">Player</ref><sp/><ref refid="structopen__spiel_1_1_state_1_1_player_action_1a38760e9677be3b392aa0d0cd6eb8bc30" kindref="member">player</ref>;</highlight></codeline>
<codeline lineno="402" refid="structopen__spiel_1_1_state_1_1_player_action_1a0a1fcb179ed63120c1aa4a694bc97a1e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a8aa5fc5cff0ef466697b1df5cbfcbd3a" kindref="member">Action</ref><sp/><ref refid="structopen__spiel_1_1_state_1_1_player_action_1a0a1fcb179ed63120c1aa4a694bc97a1e" kindref="member">action</ref>;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_state_1_1_player_action_1a18f79b3d078ff706edbd1795c1924dcb" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_state_1_1_player_action" kindref="compound">PlayerAction</ref>&amp;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>backward-compatibility<sp/>reasons,<sp/>this<sp/>is<sp/>the<sp/>history<sp/>of<sp/>actions<sp/>only.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>get<sp/>the<sp/>(player,<sp/>action)<sp/>pairs,<sp/>use<sp/>`FullHistory`<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408" refid="classopen__spiel_1_1_state_1ad128b0fe37fa9439328ad27a7ba11cbd" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;Action&gt;<sp/><ref refid="classopen__spiel_1_1_state_1ad128b0fe37fa9439328ad27a7ba11cbd" kindref="member">History</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Action&gt;<sp/>history;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>history.reserve(<ref refid="classopen__spiel_1_1_state_1aa121d1e77bb8a6219aeaec0b764a2e22" kindref="member">history_</ref>.size());</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>h<sp/>:<sp/><ref refid="classopen__spiel_1_1_state_1aa121d1e77bb8a6219aeaec0b764a2e22" kindref="member">history_</ref>)<sp/>history.push_back(h.action);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>history;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>full<sp/>(player,<sp/>action)<sp/>history.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416" refid="classopen__spiel_1_1_state_1a61d84cb66edc9a12fa6d6f46873411d5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;PlayerAction&gt;&amp;<sp/><ref refid="classopen__spiel_1_1_state_1a61d84cb66edc9a12fa6d6f46873411d5" kindref="member">FullHistory</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1aa121d1e77bb8a6219aeaec0b764a2e22" kindref="member">history_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>string<sp/>representation<sp/>for<sp/>the<sp/>history.<sp/>There<sp/>should<sp/>be<sp/>a<sp/>one<sp/>to<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>mapping<sp/>between<sp/>histories<sp/>(i.e.<sp/>sequences<sp/>of<sp/>actions<sp/>for<sp/>all<sp/>players,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>including<sp/>chance)<sp/>and<sp/>the<sp/>`State`<sp/>objects.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421" refid="classopen__spiel_1_1_state_1a148bf75c2afdad5489b684d2d7014aab" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classopen__spiel_1_1_state_1a148bf75c2afdad5489b684d2d7014aab" kindref="member">HistoryString</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>absl::StrJoin(<ref refid="classopen__spiel_1_1_state_1ad128b0fe37fa9439328ad27a7ba11cbd" kindref="member">History</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>how<sp/>many<sp/>moves<sp/>have<sp/>been<sp/>done<sp/>so<sp/>far<sp/>in<sp/>the<sp/>game.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>players<sp/>make<sp/>simultaneous<sp/>moves,<sp/>this<sp/>counts<sp/>only<sp/>as<sp/>a<sp/>one<sp/>move.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Chance<sp/>transitions<sp/>count<sp/>also<sp/>as<sp/>one<sp/>move.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>game<sp/>transformations<sp/>are<sp/>not<sp/>required<sp/>to<sp/>preserve<sp/>the<sp/>move</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>number<sp/>in<sp/>the<sp/>transformed<sp/>game.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428" refid="classopen__spiel_1_1_state_1aea56c32f2cbd62b2a6a280010ddd54ee" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1aea56c32f2cbd62b2a6a280010ddd54ee" kindref="member">MoveNumber</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1a127ada084056b47d96839440dbbe3a2f" kindref="member">move_number_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>this<sp/>a<sp/>first<sp/>state<sp/>in<sp/>the<sp/>game,<sp/>i.e.<sp/>the<sp/>initial<sp/>state<sp/>(root<sp/>node)?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431" refid="classopen__spiel_1_1_state_1acb22b26b3e8134b4380ff329562cf4b2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1acb22b26b3e8134b4380ff329562cf4b2" kindref="member">IsInitialState</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1aa121d1e77bb8a6219aeaec0b764a2e22" kindref="member">history_</ref>.empty();<sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>imperfect<sp/>information<sp/>games.<sp/>Returns<sp/>an<sp/>identifier<sp/>for<sp/>the<sp/>current</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>information<sp/>state<sp/>for<sp/>the<sp/>specified<sp/>player.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Different<sp/>ground<sp/>states<sp/>can<sp/>yield<sp/>the<sp/>same<sp/>information<sp/>state<sp/>for<sp/>a<sp/>player</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>the<sp/>only<sp/>part<sp/>of<sp/>the<sp/>state<sp/>that<sp/>differs<sp/>is<sp/>not<sp/>observable<sp/>by<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>player<sp/>(e.g.<sp/>opponents&apos;<sp/>cards<sp/>in<sp/>Poker.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>identifiers<sp/>must<sp/>be<sp/>unique<sp/>across<sp/>all<sp/>players.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>allows<sp/>an<sp/>algorithm<sp/>to<sp/>maintain<sp/>a<sp/>single<sp/>table<sp/>of<sp/>identifiers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>instead<sp/>of<sp/>maintaining<sp/>a<sp/>table<sp/>per<sp/>player<sp/>to<sp/>avoid<sp/>name<sp/>collisions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>simple<sp/>way<sp/>to<sp/>do<sp/>so<sp/>is<sp/>for<sp/>example,<sp/>in<sp/>a<sp/>card<sp/>game,<sp/>if<sp/>both<sp/>players<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>hold<sp/>the<sp/>card<sp/>Jack,<sp/>the<sp/>identifier<sp/>can<sp/>contain<sp/>player<sp/>identification<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>well,<sp/>like<sp/>P1Jack<sp/>and<sp/>P2Jack.<sp/>However<sp/>prefixing<sp/>by<sp/>player<sp/>number<sp/>is<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>requirement.<sp/>The<sp/>only<sp/>thing<sp/>that<sp/>is<sp/>necessary<sp/>is<sp/>that<sp/>it<sp/>is<sp/>unambiguous</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>who<sp/>is<sp/>the<sp/>observer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Games<sp/>that<sp/>do<sp/>not<sp/>have<sp/>imperfect<sp/>information<sp/>do<sp/>not<sp/>need<sp/>to<sp/>implement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>these<sp/>methods,<sp/>but<sp/>most<sp/>algorithms<sp/>intended<sp/>for<sp/>imperfect<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>games<sp/>will<sp/>work<sp/>on<sp/>perfect<sp/>information<sp/>games<sp/>provided<sp/>the<sp/>InformationState</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>returned<sp/>in<sp/>a<sp/>form<sp/>they<sp/>support.<sp/>For<sp/>example,<sp/>InformationState()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>could<sp/>simply<sp/>return<sp/>the<sp/>history<sp/>for<sp/>a<sp/>perfect<sp/>information<sp/>game.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>valid<sp/>InformationStateString<sp/>must<sp/>be<sp/>returned<sp/>at<sp/>terminal<sp/>states,<sp/>since</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>required<sp/>in<sp/>some<sp/>applications<sp/>(e.g.<sp/>final<sp/>observation<sp/>in<sp/>an<sp/>RL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>environment).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>information<sp/>state<sp/>should<sp/>be<sp/>perfect-recall,<sp/>i.e.<sp/>if<sp/>two<sp/>states</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>a<sp/>different<sp/>InformationState,<sp/>then<sp/>all<sp/>successors<sp/>of<sp/>one<sp/>must<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>different<sp/>InformationState<sp/>to<sp/>all<sp/>successors<sp/>of<sp/>the<sp/>other.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>example,<sp/>in<sp/>tic-tac-toe,<sp/>the<sp/>current<sp/>state<sp/>of<sp/>the<sp/>board<sp/>would<sp/>not<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>perfect-recall<sp/>representation,<sp/>but<sp/>the<sp/>sequence<sp/>of<sp/>moves<sp/>played<sp/>would</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>be.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>you<sp/>implement<sp/>both<sp/>InformationState<sp/>and<sp/>Observation,<sp/>the<sp/>two<sp/>must<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>consistent<sp/>for<sp/>all<sp/>the<sp/>players<sp/>(even<sp/>the<sp/>non-acting<sp/>player(s)).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>By<sp/>consistency<sp/>we<sp/>mean<sp/>that<sp/>when<sp/>you<sp/>maintain<sp/>an<sp/>Action-Observation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>history<sp/>(AOH)<sp/>for<sp/>different<sp/>ground<sp/>states,<sp/>the<sp/>(in)equality<sp/>of<sp/>two<sp/>AOHs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implies<sp/>the<sp/>(in)equality<sp/>of<sp/>two<sp/>InformationStates.<sp/>In<sp/>other<sp/>words,<sp/>AOH<sp/>is<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>factored<sp/>representation<sp/>of<sp/>InformationState.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>details,<sp/>see<sp/>Section<sp/>3.1<sp/>of<sp/>https://arxiv.org/abs/1908.09453</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>Section<sp/>2.1<sp/>of<sp/>https://arxiv.org/abs/1906.11110</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>currently<sp/>no<sp/>use-case<sp/>for<sp/>calling<sp/>this<sp/>function<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>`kChancePlayerId`.<sp/>Thus,<sp/>games<sp/>are<sp/>expected<sp/>to<sp/>raise<sp/>an<sp/>error<sp/>in<sp/>those</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cases<sp/>using<sp/>(and<sp/>it&apos;s<sp/>tested<sp/>in<sp/>api_test.py).<sp/>Use<sp/>this:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>SPIEL_CHECK_GE(player,<sp/>0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>SPIEL_CHECK_LT(player,<sp/>num_players_);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481" refid="classopen__spiel_1_1_state_1a31bb588b60127656dbc189c9886e2155" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="classopen__spiel_1_1_state_1a31bb588b60127656dbc189c9886e2155" kindref="member">InformationStateString</ref>(<ref refid="namespaceopen__spiel_1a8e9bf6a040c687a9f0c8393728dc0121" kindref="member">Player</ref><sp/>player)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(</highlight><highlight class="stringliteral">&quot;InformationStateString<sp/>is<sp/>not<sp/>implemented.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="484" refid="classopen__spiel_1_1_state_1a75f81af7266685a7412960554e3d792e" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classopen__spiel_1_1_state_1a75f81af7266685a7412960554e3d792e" kindref="member">InformationStateString</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1a75f81af7266685a7412960554e3d792e" kindref="member">InformationStateString</ref>(<ref refid="classopen__spiel_1_1_state_1a229614eafbf9978cbc4109347e5f9efa" kindref="member">CurrentPlayer</ref>());</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Vector<sp/>form,<sp/>useful<sp/>for<sp/>neural-net<sp/>function<sp/>approximation<sp/>approaches.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>size<sp/>of<sp/>the<sp/>vector<sp/>must<sp/>match<sp/>Game::InformationStateShape()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>values<sp/>in<sp/>lexicographic<sp/>order.<sp/>E.g.<sp/>for<sp/>2x4x3,<sp/>order<sp/>would<sp/>be:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(0,0,0),<sp/>(0,0,1),<sp/>(0,0,2),<sp/>(0,1,0),<sp/>...<sp/>,<sp/>(1,3,2).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>should<sp/>resize<sp/>the<sp/>supplied<sp/>vector<sp/>if<sp/>required.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>valid<sp/>InformationStateTensor<sp/>must<sp/>be<sp/>returned<sp/>at<sp/>terminal<sp/>states,<sp/>since</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>required<sp/>in<sp/>some<sp/>applications<sp/>(e.g.<sp/>final<sp/>observation<sp/>in<sp/>an<sp/>RL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>environment).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>currently<sp/>no<sp/>use-case<sp/>for<sp/>calling<sp/>this<sp/>function<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>`kChancePlayerId`.<sp/>Thus,<sp/>games<sp/>are<sp/>expected<sp/>to<sp/>raise<sp/>an<sp/>error<sp/>in<sp/>those</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Implementations<sp/>should<sp/>start<sp/>with<sp/>(and<sp/>it&apos;s<sp/>tested<sp/>in<sp/>api_test.py):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>SPIEL_CHECK_GE(player,<sp/>0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>SPIEL_CHECK_LT(player,<sp/>num_players_);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505" refid="classopen__spiel_1_1_state_1ae3c75cd43d2bdc470399171d25bf3f1f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1ae3c75cd43d2bdc470399171d25bf3f1f" kindref="member">InformationStateTensor</ref>(<ref refid="namespaceopen__spiel_1a8e9bf6a040c687a9f0c8393728dc0121" kindref="member">Player</ref><sp/>player,</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>absl::Span&lt;float&gt;<sp/>values)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(</highlight><highlight class="stringliteral">&quot;InformationStateTensor<sp/>unimplemented!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/><ref refid="classopen__spiel_1_1_state_1a7971caff7b5a3506fa53a5e85c01253b" kindref="member">InformationStateTensor</ref>(<ref refid="namespaceopen__spiel_1a8e9bf6a040c687a9f0c8393728dc0121" kindref="member">Player</ref><sp/>player)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="510" refid="classopen__spiel_1_1_state_1a7971caff7b5a3506fa53a5e85c01253b" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/><ref refid="classopen__spiel_1_1_state_1a7971caff7b5a3506fa53a5e85c01253b" kindref="member">InformationStateTensor</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1a7971caff7b5a3506fa53a5e85c01253b" kindref="member">InformationStateTensor</ref>(<ref refid="classopen__spiel_1_1_state_1a229614eafbf9978cbc4109347e5f9efa" kindref="member">CurrentPlayer</ref>());</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1a7971caff7b5a3506fa53a5e85c01253b" kindref="member">InformationStateTensor</ref>(<ref refid="namespaceopen__spiel_1a8e9bf6a040c687a9f0c8393728dc0121" kindref="member">Player</ref><sp/>player,</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;float&gt;*<sp/>values)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>functions<sp/>for<sp/>observations<sp/>which<sp/>are<sp/>parallel<sp/>to<sp/>those<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>information<sp/>states.<sp/>An<sp/>observation<sp/>should<sp/>have<sp/>the<sp/>following<sp/>properties:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>-<sp/>It<sp/>has<sp/>at<sp/>most<sp/>the<sp/>same<sp/>information<sp/>content<sp/>as<sp/>the<sp/>information<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>-<sp/>The<sp/>complete<sp/>history<sp/>of<sp/>observations<sp/>and<sp/>our<sp/>actions<sp/>over<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>course<sp/>of<sp/>the<sp/>game<sp/>is<sp/>sufficient<sp/>to<sp/>reconstruct<sp/>the<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>state<sp/>for<sp/>any<sp/>players<sp/>at<sp/>any<sp/>point<sp/>in<sp/>the<sp/>game.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>example,<sp/>an<sp/>observation<sp/>is<sp/>the<sp/>cards<sp/>revealed<sp/>and<sp/>bets<sp/>made<sp/>in<sp/>Poker,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>the<sp/>current<sp/>state<sp/>of<sp/>the<sp/>board<sp/>in<sp/>Chess.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>neither<sp/>of<sp/>these<sp/>are<sp/>valid<sp/>information<sp/>states,<sp/>since<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>observation<sp/>may<sp/>arise<sp/>from<sp/>two<sp/>different<sp/>observation<sp/>histories<sp/>(i.e.<sp/>they</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>not<sp/>perfect<sp/>recall).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Observations<sp/>should<sp/>cover<sp/>all<sp/>observations:<sp/>a<sp/>combination<sp/>of<sp/>both<sp/>public</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>private<sp/>observations.<sp/>They<sp/>are<sp/>not<sp/>factored<sp/>into<sp/>these<sp/>individual</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>constituent<sp/>parts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>valid<sp/>observation<sp/>must<sp/>be<sp/>returned<sp/>at<sp/>terminal<sp/>states,<sp/>since<sp/>this<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>required<sp/>in<sp/>some<sp/>applications<sp/>(e.g.<sp/>final<sp/>observation<sp/>in<sp/>an<sp/>RL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>environment).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Implementations<sp/>should<sp/>start<sp/>with<sp/>(and<sp/>it&apos;s<sp/>tested<sp/>in<sp/>api_test.py):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>SPIEL_CHECK_GE(player,<sp/>0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>SPIEL_CHECK_LT(player,<sp/>num_players_);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540" refid="classopen__spiel_1_1_state_1ad2bbdb6b0d9513ea5f9fc4d8d16a2f8e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="classopen__spiel_1_1_state_1ad2bbdb6b0d9513ea5f9fc4d8d16a2f8e" kindref="member">ObservationString</ref>(<ref refid="namespaceopen__spiel_1a8e9bf6a040c687a9f0c8393728dc0121" kindref="member">Player</ref><sp/>player)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(</highlight><highlight class="stringliteral">&quot;ObservationString<sp/>is<sp/>not<sp/>implemented.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="543" refid="classopen__spiel_1_1_state_1ad628d2576aa064b332d813b91de44438" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classopen__spiel_1_1_state_1ad628d2576aa064b332d813b91de44438" kindref="member">ObservationString</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1ad628d2576aa064b332d813b91de44438" kindref="member">ObservationString</ref>(<ref refid="classopen__spiel_1_1_state_1a229614eafbf9978cbc4109347e5f9efa" kindref="member">CurrentPlayer</ref>());</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>view<sp/>of<sp/>the<sp/>game,<sp/>preferably<sp/>from<sp/>`player`&apos;s<sp/>perspective.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Implementations<sp/>should<sp/>start<sp/>with<sp/>(and<sp/>it&apos;s<sp/>tested<sp/>in<sp/>api_test.py):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>SPIEL_CHECK_GE(player,<sp/>0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>SPIEL_CHECK_LT(player,<sp/>num_players_);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552" refid="classopen__spiel_1_1_state_1a0d367e1c9121ecbf6c0467f200fd4b96" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1a0d367e1c9121ecbf6c0467f200fd4b96" kindref="member">ObservationTensor</ref>(<ref refid="namespaceopen__spiel_1a8e9bf6a040c687a9f0c8393728dc0121" kindref="member">Player</ref><sp/>player,</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>absl::Span&lt;float&gt;<sp/>values)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(</highlight><highlight class="stringliteral">&quot;ObservationTensor<sp/>unimplemented!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/><ref refid="classopen__spiel_1_1_state_1a2ffb39ff0f133e2cae27bf4bddf8e4ac" kindref="member">ObservationTensor</ref>(<ref refid="namespaceopen__spiel_1a8e9bf6a040c687a9f0c8393728dc0121" kindref="member">Player</ref><sp/>player)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="557" refid="classopen__spiel_1_1_state_1a2ffb39ff0f133e2cae27bf4bddf8e4ac" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/><ref refid="classopen__spiel_1_1_state_1a2ffb39ff0f133e2cae27bf4bddf8e4ac" kindref="member">ObservationTensor</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1a2ffb39ff0f133e2cae27bf4bddf8e4ac" kindref="member">ObservationTensor</ref>(<ref refid="classopen__spiel_1_1_state_1a229614eafbf9978cbc4109347e5f9efa" kindref="member">CurrentPlayer</ref>());</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1a2ffb39ff0f133e2cae27bf4bddf8e4ac" kindref="member">ObservationTensor</ref>(<ref refid="namespaceopen__spiel_1a8e9bf6a040c687a9f0c8393728dc0121" kindref="member">Player</ref><sp/>player,<sp/>std::vector&lt;float&gt;*<sp/>values)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>a<sp/>copy<sp/>of<sp/>this<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563" refid="classopen__spiel_1_1_state_1a252ac372f002809f41be1003e50f9ca4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;State&gt;<sp/><ref refid="classopen__spiel_1_1_state_1a252ac372f002809f41be1003e50f9ca4" kindref="member">Clone</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>the<sp/>child<sp/>from<sp/>State<sp/>corresponding<sp/>to<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566" refid="classopen__spiel_1_1_state_1ae86a2e3710382c2aa7383abe21934825" refkind="member"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;State&gt;<sp/><ref refid="classopen__spiel_1_1_state_1ae86a2e3710382c2aa7383abe21934825" kindref="member">Child</ref>(<ref refid="namespaceopen__spiel_1a8aa5fc5cff0ef466697b1df5cbfcbd3a" kindref="member">Action</ref><sp/>action)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;State&gt;<sp/>child<sp/>=<sp/><ref refid="classopen__spiel_1_1_state_1a252ac372f002809f41be1003e50f9ca4" kindref="member">Clone</ref>();</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>child-&gt;ApplyAction(action);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>child;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Undoes<sp/>the<sp/>last<sp/>action,<sp/>which<sp/>must<sp/>be<sp/>supplied.<sp/>This<sp/>is<sp/>a<sp/>fast<sp/>method<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>undo<sp/>an<sp/>action.<sp/>It<sp/>is<sp/>only<sp/>necessary<sp/>for<sp/>algorithms<sp/>that<sp/>need<sp/>a<sp/>fast<sp/>undo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(e.g.<sp/>minimax<sp/>search).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>One<sp/>must<sp/>call<sp/>history_.pop_back()<sp/>and<sp/>--move_number_<sp/>in<sp/>the<sp/>implementations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(and<sp/>do<sp/>these<sp/>appropriately<sp/>especially<sp/>in<sp/>simultaneous<sp/>games).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577" refid="classopen__spiel_1_1_state_1ab355df7c0595648cb657eb9aa1ab9a50" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1ab355df7c0595648cb657eb9aa1ab9a50" kindref="member">UndoAction</ref>(<ref refid="namespaceopen__spiel_1a8e9bf6a040c687a9f0c8393728dc0121" kindref="member">Player</ref><sp/>player,<sp/><ref refid="namespaceopen__spiel_1a8aa5fc5cff0ef466697b1df5cbfcbd3a" kindref="member">Action</ref><sp/>action)<sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(</highlight><highlight class="stringliteral">&quot;UndoAction<sp/>function<sp/>is<sp/>not<sp/>overridden;<sp/>not<sp/>undoing.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Change<sp/>the<sp/>state<sp/>of<sp/>the<sp/>game<sp/>by<sp/>applying<sp/>the<sp/>specified<sp/>actions,<sp/>one<sp/>per</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>player,<sp/>for<sp/>simultaneous<sp/>action<sp/>games.<sp/>This<sp/>function<sp/>encodes<sp/>the<sp/>logic<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>game<sp/>rules.<sp/>Element<sp/>i<sp/>of<sp/>the<sp/>vector<sp/>is<sp/>the<sp/>action<sp/>for<sp/>player<sp/>i.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Every<sp/>player<sp/>must<sp/>submit<sp/>a<sp/>action.<sp/>If<sp/>some<sp/>of<sp/>the<sp/>players<sp/>have<sp/>no<sp/>legal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>actions<sp/>at<sp/>this<sp/>node,<sp/>then<sp/>0<sp/>should<sp/>be<sp/>passed<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Simultaneous<sp/>games<sp/>should<sp/>implement<sp/>DoApplyActions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1a18246f9ef0085ec8c93791e8127f0be1" kindref="member">ApplyActions</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Action&gt;&amp;<sp/>actions);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>helper<sp/>version<sp/>of<sp/>ApplyActions<sp/>that<sp/>first<sp/>does<sp/>legality<sp/>checks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1a479150baad280f0f236d2cced41ddc13" kindref="member">ApplyActionsWithLegalityChecks</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Action&gt;&amp;<sp/>actions);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>size<sp/>of<sp/>the<sp/>action<sp/>space.<sp/>See<sp/>`Game`<sp/>for<sp/>a<sp/>full<sp/>description.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596" refid="classopen__spiel_1_1_state_1ada4c2b6afc305febbe7e52bc569e005e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1ada4c2b6afc305febbe7e52bc569e005e" kindref="member">NumDistinctActions</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1a3a374a3e9cbc2993efec3ae375fb1e93" kindref="member">num_distinct_actions_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>players<sp/>in<sp/>this<sp/>game.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599" refid="classopen__spiel_1_1_state_1a43f01fe8bdbb6292407feb51bc535d4f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1a43f01fe8bdbb6292407feb51bc535d4f" kindref="member">NumPlayers</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1aa907ffe3dd80025bd074d95cc87fb7a4" kindref="member">num_players_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>game<sp/>object<sp/>that<sp/>generated<sp/>this<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602" refid="classopen__spiel_1_1_state_1a7fff989fb01a5d93e849ed6fe406cc3f" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;const<sp/>Game&gt;<sp/><ref refid="classopen__spiel_1_1_state_1a7fff989fb01a5d93e849ed6fe406cc3f" kindref="member">GetGame</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1a4aed0817448ce100d3f76a7529263e93" kindref="member">game_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>chance<sp/>outcomes<sp/>and<sp/>their<sp/>probabilities.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Chance<sp/>actions<sp/>do<sp/>not<sp/>have<sp/>a<sp/>separate<sp/>UID<sp/>space<sp/>from<sp/>regular<sp/>actions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>what<sp/>is<sp/>returned<sp/>here<sp/>depending<sp/>on<sp/>the<sp/>game&apos;s<sp/>chance_mode<sp/>(in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>its<sp/>GameType):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>Option<sp/>1.<sp/>kExplicit.<sp/>All<sp/>chance<sp/>node<sp/>outcomes<sp/>are<sp/>returned<sp/>along<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>their<sp/>respective<sp/>probabilities.<sp/>Then<sp/>State::ApplyAction(...)<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>deterministic.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>Option<sp/>2.<sp/>kSampled.<sp/>Return<sp/>a<sp/>dummy<sp/>single<sp/>action<sp/>here<sp/>with<sp/>probability</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>1,<sp/>and<sp/>then<sp/>State::ApplyAction(...)<sp/>does<sp/>the<sp/>real<sp/>sampling.<sp/>In<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>case,<sp/>the<sp/>game<sp/>has<sp/>to<sp/>maintain<sp/>its<sp/>own<sp/>RNG.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616" refid="classopen__spiel_1_1_state_1aa177f864d35f39d38aaa7551e21b9b3b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1ac4ea6d9d7193ac74f6f333b954e3810f" kindref="member">ActionsAndProbs</ref><sp/><ref refid="classopen__spiel_1_1_state_1aa177f864d35f39d38aaa7551e21b9b3b" kindref="member">ChanceOutcomes</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(</highlight><highlight class="stringliteral">&quot;ChanceOutcomes<sp/>unimplemented!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Lists<sp/>the<sp/>valid<sp/>chance<sp/>outcomes<sp/>at<sp/>the<sp/>current<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Derived<sp/>classes<sp/>may<sp/>substitute<sp/>this<sp/>with<sp/>a<sp/>more<sp/>efficient<sp/>implementation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622" refid="classopen__spiel_1_1_state_1a610b46ccda2eefd984a3716a5219f78a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::vector&lt;Action&gt;<sp/><ref refid="classopen__spiel_1_1_state_1a610b46ccda2eefd984a3716a5219f78a" kindref="member">LegalChanceOutcomes</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1ac4ea6d9d7193ac74f6f333b954e3810f" kindref="member">ActionsAndProbs</ref><sp/>outcomes_with_probs<sp/>=<sp/><ref refid="classopen__spiel_1_1_state_1aa177f864d35f39d38aaa7551e21b9b3b" kindref="member">ChanceOutcomes</ref>();</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Action&gt;<sp/>outcome_list;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>outcome_list.reserve(outcomes_with_probs.size());</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>pair<sp/>:<sp/>outcomes_with_probs)<sp/>{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outcome_list.push_back(pair.first);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>outcome_list;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>type<sp/>of<sp/>the<sp/>state.<sp/>Either<sp/>Chance,<sp/>Terminal,<sp/>MeanField<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Decision.<sp/>See<sp/>StateType<sp/>definition<sp/>for<sp/>definitions<sp/>of<sp/>the<sp/>different<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><ref refid="namespaceopen__spiel_1a236dc05d070fca4a27a4344aea799332" kindref="member">StateType</ref><sp/><ref refid="classopen__spiel_1_1_state_1a85fe23e126a3c9f263b4e87922a01b0f" kindref="member">GetType</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Serializes<sp/>a<sp/>state<sp/>into<sp/>a<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>default<sp/>implementation<sp/>writes<sp/>out<sp/>a<sp/>sequence<sp/>of<sp/>actions,<sp/>one<sp/>per<sp/>line,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>taken<sp/>from<sp/>the<sp/>initial<sp/>state.<sp/>Note:<sp/>this<sp/>default<sp/>serialization<sp/>scheme<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>work<sp/>games<sp/>whose<sp/>chance<sp/>mode<sp/>is<sp/>kSampledStochastic,<sp/>as<sp/>there<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>currently<sp/>no<sp/>general<sp/>way<sp/>to<sp/>set<sp/>the<sp/>state&apos;s<sp/>seed<sp/>to<sp/>ensure<sp/>that<sp/>it<sp/>samples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>same<sp/>chance<sp/>event<sp/>at<sp/>chance<sp/>nodes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>overridden,<sp/>this<sp/>must<sp/>be<sp/>the<sp/>inverse<sp/>of<sp/>Game::DeserializeState.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="classopen__spiel_1_1_state_1a1a6bf403d6d8bcc41b36634a7fa8b1eb" kindref="member">Serialize</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Resamples<sp/>a<sp/>new<sp/>history<sp/>from<sp/>the<sp/>information<sp/>state<sp/>from<sp/>player_id&apos;s<sp/>view.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>resamples<sp/>a<sp/>private<sp/>for<sp/>the<sp/>other<sp/>players,<sp/>but<sp/>holds<sp/>player_id&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>privates<sp/>constant,<sp/>and<sp/>the<sp/>public<sp/>information<sp/>constant.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>privates<sp/>are<sp/>sampled<sp/>uniformly<sp/>at<sp/>each<sp/>chance<sp/>node.<sp/>For<sp/>games<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>partially-revealed<sp/>actions<sp/>that<sp/>require<sp/>some<sp/>policy,<sp/>we<sp/>sample<sp/>uniformly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>the<sp/>list<sp/>of<sp/>actions<sp/>that<sp/>are<sp/>consistent<sp/>with<sp/>what<sp/>player_id<sp/>observed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>rng,<sp/>we<sp/>need<sp/>something<sp/>that<sp/>returns<sp/>a<sp/>double<sp/>in<sp/>[0,<sp/>1).<sp/>This<sp/>value<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>interpreted<sp/>as<sp/>a<sp/>cumulative<sp/>distribution<sp/>function,<sp/>and<sp/>will<sp/>be<sp/>used<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sample<sp/>from<sp/>the<sp/>legal<sp/>chance<sp/>actions.<sp/>A<sp/>good<sp/>choice<sp/>would<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>absl/std::uniform_real_distribution&lt;double&gt;(0.,<sp/>1.).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657" refid="classopen__spiel_1_1_state_1a1bee92c295ffd0404712cd6004ab9df0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;State&gt;<sp/><ref refid="classopen__spiel_1_1_state_1a1bee92c295ffd0404712cd6004ab9df0" kindref="member">ResampleFromInfostate</ref>(</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>player_id,<sp/>std::function&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">()&gt;<sp/>rng)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(</highlight><highlight class="stringliteral">&quot;ResampleFromInfostate()<sp/>not<sp/>implemented.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>vector<sp/>of<sp/>states<sp/>&amp;<sp/>probabilities<sp/>that<sp/>are<sp/>consistent<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>infostate<sp/>from<sp/>the<sp/>view<sp/>of<sp/>the<sp/>current<sp/>player.<sp/>By<sp/>default,<sp/>this<sp/>is<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implemented<sp/>and<sp/>returns<sp/>an<sp/>empty<sp/>list.<sp/>This<sp/>doesn&apos;t<sp/>make<sp/>any<sp/>attempt<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>correct<sp/>for<sp/>the<sp/>opponent&apos;s<sp/>policy<sp/>in<sp/>the<sp/>probabilities,<sp/>and<sp/>so<sp/>this<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>wrong<sp/>for<sp/>any<sp/>state<sp/>that&apos;s<sp/>not<sp/>the<sp/>first<sp/>non-chance<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;HistoryDistribution&gt;</highlight></codeline>
<codeline lineno="668" refid="classopen__spiel_1_1_state_1a0a85ab6f45efdcf19d00531f7c59a3e0" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classopen__spiel_1_1_state_1a0a85ab6f45efdcf19d00531f7c59a3e0" kindref="member">GetHistoriesConsistentWithInfostate</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>player_id)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;HistoryDistribution&gt;</highlight></codeline>
<codeline lineno="673" refid="classopen__spiel_1_1_state_1aaf3da3c4030a5563d84ec198f089cd87" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classopen__spiel_1_1_state_1aaf3da3c4030a5563d84ec198f089cd87" kindref="member">GetHistoriesConsistentWithInfostate</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1aaf3da3c4030a5563d84ec198f089cd87" kindref="member">GetHistoriesConsistentWithInfostate</ref>(<ref refid="classopen__spiel_1_1_state_1a229614eafbf9978cbc4109347e5f9efa" kindref="member">CurrentPlayer</ref>());</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>vector<sp/>of<sp/>all<sp/>actions<sp/>that<sp/>are<sp/>consistent<sp/>with<sp/>the<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>revealed<sp/>by<sp/>taking<sp/>action.<sp/>E.g.<sp/>in<sp/>Poker,<sp/>this<sp/>does<sp/>nothing<sp/>but<sp/>return<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>current<sp/>action<sp/>as<sp/>poker<sp/>only<sp/>has<sp/>public<sp/>actions.<sp/>In<sp/>a<sp/>game<sp/>like<sp/>Battleship,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>where<sp/>the<sp/>placement<sp/>phase<sp/>is<sp/>hidden,<sp/>this<sp/>would<sp/>return<sp/>all<sp/>possible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>placements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682" refid="classopen__spiel_1_1_state_1af8cc963b423ec2a56e6b5292a8d9f6df" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::vector&lt;Action&gt;<sp/><ref refid="classopen__spiel_1_1_state_1af8cc963b423ec2a56e6b5292a8d9f6df" kindref="member">ActionsConsistentWithInformationFrom</ref>(</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a8aa5fc5cff0ef466697b1df5cbfcbd3a" kindref="member">Action</ref><sp/>action)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ActionsConsistentWithInformationFrom<sp/>has<sp/>not<sp/>been<sp/>implemented.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>functions<sp/>only<sp/>apply<sp/>to<sp/>mean<sp/>field<sp/>games.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mean<sp/>field<sp/>game<sp/>support<sp/>in<sp/>open_spiel<sp/>is<sp/>experimental,<sp/>and<sp/>these<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>subject<sp/>to<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>At<sp/>the<sp/>current<sp/>mean<sp/>field<sp/>node,<sp/>the<sp/>support<sp/>of<sp/>the<sp/>state<sp/>distribution<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>needs<sp/>to<sp/>be<sp/>updated.<sp/>States<sp/>are<sp/>identified<sp/>by<sp/>their<sp/>corresponding<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>representation.<sp/>In<sp/>multi-population<sp/>mean<sp/>field<sp/>nodes,<sp/>the<sp/>support<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>typically<sp/>include<sp/>states<sp/>for<sp/>all<sp/>the<sp/>populations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>should<sp/>only<sp/>be<sp/>called<sp/>when<sp/>when<sp/>CurrentPlayer()<sp/>==<sp/>kMeanFieldPlayerId.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>can<sp/>return<sp/>an<sp/>empty<sp/>list<sp/>in<sp/>case<sp/>the<sp/>distribution<sp/>is<sp/>not<sp/>needed<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700" refid="classopen__spiel_1_1_state_1a51e334578eba7ca7ce10518964021179" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/><ref refid="classopen__spiel_1_1_state_1a51e334578eba7ca7ce10518964021179" kindref="member">DistributionSupport</ref>()<sp/>{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(</highlight><highlight class="stringliteral">&quot;DistributionSupport<sp/>has<sp/>not<sp/>been<sp/>implemented&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>the<sp/>state<sp/>distribution.<sp/>`distribution[i]`<sp/>must<sp/>correspond<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>`DistributionSupport()[i]`.<sp/>After<sp/>this<sp/>is<sp/>called,<sp/>the<sp/>state<sp/>will<sp/>be<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Chance<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>should<sp/>only<sp/>be<sp/>called<sp/>when<sp/>when<sp/>CurrentPlayer()<sp/>==<sp/>kMeanFieldPlayerId.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707" refid="classopen__spiel_1_1_state_1a0e4105f5d7a425bc9d7393ae56f1f854" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1a0e4105f5d7a425bc9d7393ae56f1f854" kindref="member">UpdateDistribution</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;&amp;<sp/>distribution)<sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(</highlight><highlight class="stringliteral">&quot;UpdateDistribution<sp/>has<sp/>not<sp/>been<sp/>implemented&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>makes<sp/>sense<sp/>for<sp/>mean<sp/>field<sp/>games.<sp/>This<sp/>is<sp/>the<sp/>population<sp/>a<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>belongs<sp/>to.<sp/>It<sp/>returns<sp/>0<sp/>by<sp/>default,<sp/>so<sp/>multi-population<sp/>mean<sp/>field<sp/>games</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>override<sp/>this<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1ac721b1cb2b8dccaec4350278fc5cb724" kindref="member">MeanFieldPopulation</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>ApplyAction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718" refid="classopen__spiel_1_1_state_1af2b72b90cb27986377e1867bb713f07d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1af2b72b90cb27986377e1867bb713f07d" kindref="member">DoApplyAction</ref>(<ref refid="namespaceopen__spiel_1a8aa5fc5cff0ef466697b1df5cbfcbd3a" kindref="member">Action</ref><sp/>action_id)<sp/>{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(</highlight><highlight class="stringliteral">&quot;DoApplyAction<sp/>is<sp/>not<sp/>implemented.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>ApplyActions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722" refid="classopen__spiel_1_1_state_1aec9dc1eda262140e878bd4dcfedca13b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1aec9dc1eda262140e878bd4dcfedca13b" kindref="member">DoApplyActions</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Action&gt;&amp;<sp/>actions)<sp/>{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(</highlight><highlight class="stringliteral">&quot;DoApplyActions<sp/>is<sp/>not<sp/>implemented.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>game<sp/>that<sp/>created<sp/>this<sp/>state,<sp/>plus<sp/>some<sp/>static<sp/>information<sp/>about<sp/>it,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cached<sp/>here<sp/>for<sp/>efficient<sp/>access.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728" refid="classopen__spiel_1_1_state_1a4aed0817448ce100d3f76a7529263e93" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;const<sp/>Game&gt;<sp/><ref refid="classopen__spiel_1_1_state_1a4aed0817448ce100d3f76a7529263e93" kindref="member">game_</ref>;</highlight></codeline>
<codeline lineno="729" refid="classopen__spiel_1_1_state_1a3a374a3e9cbc2993efec3ae375fb1e93" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1a3a374a3e9cbc2993efec3ae375fb1e93" kindref="member">num_distinct_actions_</ref>;</highlight></codeline>
<codeline lineno="730" refid="classopen__spiel_1_1_state_1aa907ffe3dd80025bd074d95cc87fb7a4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1aa907ffe3dd80025bd074d95cc87fb7a4" kindref="member">num_players_</ref>;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Information<sp/>that<sp/>changes<sp/>over<sp/>the<sp/>course<sp/>of<sp/>the<sp/>game.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733" refid="classopen__spiel_1_1_state_1aa121d1e77bb8a6219aeaec0b764a2e22" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;PlayerAction&gt;<sp/><ref refid="classopen__spiel_1_1_state_1aa121d1e77bb8a6219aeaec0b764a2e22" kindref="member">history_</ref>;</highlight></codeline>
<codeline lineno="734" refid="classopen__spiel_1_1_state_1a127ada084056b47d96839440dbbe3a2f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state_1a127ada084056b47d96839440dbbe3a2f" kindref="member">move_number_</ref>;</highlight></codeline>
<codeline lineno="735"><highlight class="normal">};</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal">std::ostream&amp;<sp/><ref refid="namespaceopen__spiel_1a7a4f3573ff9d467ce5c64eecbe5ea8b9" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_state" kindref="compound">State</ref>&amp;<sp/>state);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>class<sp/>that<sp/>refers<sp/>to<sp/>a<sp/>particular<sp/>game<sp/>instantiation,<sp/>for<sp/>example</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Breakthrough(8x8).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Important<sp/>note:<sp/>Game<sp/>objects<sp/>cannot<sp/>be<sp/>instantiated<sp/>on<sp/>the<sp/>stack<sp/>or<sp/>via</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="comment">//<sp/>unique_ptr,<sp/>because<sp/>shared<sp/>pointers<sp/>to<sp/>the<sp/>game<sp/>object<sp/>must<sp/>be<sp/>sent<sp/>down<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>states<sp/>that<sp/>created<sp/>them.<sp/>So,<sp/>they<sp/>*must*<sp/>be<sp/>created<sp/>via</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="comment">//<sp/>shared_ptr&lt;const<sp/>Game&gt;<sp/>or<sp/>via<sp/>the<sp/>LoadGame<sp/>methods.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746" refid="classopen__spiel_1_1_game" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classopen__spiel_1_1_game" kindref="compound">Game</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::enable_shared_from_this&lt;Game&gt;<sp/>{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="748" refid="classopen__spiel_1_1_game_1a1854931cb033de9f16657172659943d3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_game_1a1854931cb033de9f16657172659943d3" kindref="member">~Game</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="749" refid="classopen__spiel_1_1_game_1a02f9a81ec83227c45b70c6daf6ac09c7" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classopen__spiel_1_1_game_1a02f9a81ec83227c45b70c6daf6ac09c7" kindref="member">Game</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_game" kindref="compound">Game</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="750" refid="classopen__spiel_1_1_game_1a24c7b0caccaf0fbaa1e3b5ee313a3720" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classopen__spiel_1_1_game" kindref="compound">Game</ref>&amp;<sp/><ref refid="classopen__spiel_1_1_game_1a24c7b0caccaf0fbaa1e3b5ee313a3720" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_game" kindref="compound">Game</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Maximum<sp/>number<sp/>of<sp/>distinct<sp/>actions<sp/>in<sp/>the<sp/>game<sp/>for<sp/>any<sp/>one<sp/>player.<sp/>This<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>the<sp/>same<sp/>as<sp/>max<sp/>number<sp/>of<sp/>legal<sp/>actions<sp/>in<sp/>any<sp/>state<sp/>as<sp/>distinct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>actions<sp/>are<sp/>independent<sp/>of<sp/>the<sp/>context<sp/>(state),<sp/>and<sp/>often<sp/>independent<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>player<sp/>as<sp/>well.<sp/>So,<sp/>for<sp/>instance<sp/>in<sp/>Tic-Tac-Toe<sp/>this<sp/>value<sp/>is<sp/>9,<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>square.<sp/>In<sp/>games<sp/>where<sp/>pieces<sp/>move,<sp/>like<sp/>e.g.<sp/>Breakthrough,<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>would<sp/>be<sp/>64*6*2,<sp/>since<sp/>from<sp/>an<sp/>8x8<sp/>board<sp/>a<sp/>single<sp/>piece<sp/>could<sp/>only<sp/>ever</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>move<sp/>to<sp/>at<sp/>most<sp/>6<sp/>places,<sp/>and<sp/>it<sp/>can<sp/>be<sp/>a<sp/>regular<sp/>move<sp/>or<sp/>a<sp/>capture<sp/>move.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>chance<sp/>node<sp/>outcomes<sp/>are<sp/>not<sp/>included<sp/>in<sp/>this<sp/>count.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>example,<sp/>this<sp/>would<sp/>correspond<sp/>to<sp/>the<sp/>size<sp/>of<sp/>the<sp/>policy<sp/>net<sp/>head</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>learning<sp/>which<sp/>move<sp/>to<sp/>play.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762" refid="classopen__spiel_1_1_game_1a01a5c08dfab0c2260a31c78be362476f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_game_1a01a5c08dfab0c2260a31c78be362476f" kindref="member">NumDistinctActions</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>newly<sp/>allocated<sp/>initial<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765" refid="classopen__spiel_1_1_game_1a5696835fab2961be5e2a0a08e36999a5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;State&gt;<sp/><ref refid="classopen__spiel_1_1_game_1a5696835fab2961be5e2a0a08e36999a5" kindref="member">NewInitialState</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>a<sp/>new<sp/>state<sp/>from<sp/>a<sp/>string<sp/>description.<sp/>This<sp/>is<sp/>an<sp/>unspecified<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>unrestricted<sp/>function<sp/>to<sp/>construct<sp/>a<sp/>new<sp/>state<sp/>from<sp/>a<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769" refid="classopen__spiel_1_1_game_1aa76d3480113257e022575019af601df1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;State&gt;<sp/><ref refid="classopen__spiel_1_1_game_1aa76d3480113257e022575019af601df1" kindref="member">NewInitialState</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>str)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(</highlight><highlight class="stringliteral">&quot;NewInitialState<sp/>from<sp/>string<sp/>is<sp/>not<sp/>implemented.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>newly<sp/>allocated<sp/>initial<sp/>states.<sp/>In<sp/>most<sp/>cases,<sp/>this<sp/>will<sp/>be<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>single<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Games<sp/>with<sp/>multi-population<sp/>mean<sp/>field<sp/>dynamics<sp/>have<sp/>multiple<sp/>initial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>states,<sp/>one<sp/>per<sp/>population.<sp/>In<sp/>that<sp/>case,<sp/>N<sp/>initial<sp/>states<sp/>will<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>returned,<sp/>from<sp/>population<sp/>0<sp/>to<sp/>population<sp/>N-1<sp/>(where<sp/>N<sp/>is<sp/>the<sp/>number<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>populations,<sp/>which<sp/>is<sp/>equal<sp/>to<sp/>the<sp/>number<sp/>of<sp/>players).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::vector&lt;std::unique_ptr&lt;State&gt;&gt;<sp/><ref refid="classopen__spiel_1_1_game_1acbc718240c9580d8dbfe5e8ef0282d92" kindref="member">NewInitialStates</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Maximum<sp/>number<sp/>of<sp/>distinct<sp/>chance<sp/>outcomes<sp/>for<sp/>chance<sp/>nodes<sp/>in<sp/>the<sp/>game.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782" refid="classopen__spiel_1_1_game_1a23c04050a938cc94e9fa68e285131ac6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_game_1a23c04050a938cc94e9fa68e285131ac6" kindref="member">MaxChanceOutcomes</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>game<sp/>is<sp/>parameterizable,<sp/>returns<sp/>an<sp/>object<sp/>with<sp/>the<sp/>current</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>parameter<sp/>values,<sp/>including<sp/>defaulted<sp/>values.<sp/>Returns<sp/>empty<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787" refid="classopen__spiel_1_1_game_1a7abf0c828e092399ca08e1881e0bbf54" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespaceopen__spiel_1ad7c4d931669b5e357cb5c7f84a6de094" kindref="member">GameParameters</ref><sp/><ref refid="classopen__spiel_1_1_game_1a7abf0c828e092399ca08e1881e0bbf54" kindref="member">GetParameters</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>absl::MutexLock<sp/>lock(&amp;<ref refid="classopen__spiel_1_1_game_1a9f8eed0c692e15bd1d9806647b575f91" kindref="member">mutex_defaulted_parameters_</ref>);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1ad7c4d931669b5e357cb5c7f84a6de094" kindref="member">GameParameters</ref><sp/>params<sp/>=<sp/><ref refid="classopen__spiel_1_1_game_1aa0256cac5f169b067d69c0b5cb82b8b4" kindref="member">game_parameters_</ref>;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>params.insert(defaulted_parameters_.begin(),<sp/>defaulted_parameters_.end());</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>params;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>number<sp/>of<sp/>players<sp/>in<sp/>this<sp/>instantiation<sp/>of<sp/>the<sp/>game.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Does<sp/>not<sp/>include<sp/>the<sp/>chance-player.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796" refid="classopen__spiel_1_1_game_1ade22718c6a0360525840cb7f7c68cab0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_game_1ade22718c6a0360525840cb7f7c68cab0" kindref="member">NumPlayers</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Utility<sp/>range.<sp/>These<sp/>functions<sp/>define<sp/>the<sp/>lower<sp/>and<sp/>upper<sp/>bounds<sp/>on<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>values<sp/>returned<sp/>by<sp/>State::PlayerReturn(Player<sp/>player)<sp/>over<sp/>all<sp/>valid<sp/>player</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>numbers.<sp/>This<sp/>range<sp/>should<sp/>be<sp/>as<sp/>tight<sp/>as<sp/>possible;<sp/>the<sp/>intention<sp/>is<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>give<sp/>some<sp/>information<sp/>to<sp/>algorithms<sp/>that<sp/>require<sp/>it,<sp/>and<sp/>so<sp/>their</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>performance<sp/>may<sp/>suffer<sp/>if<sp/>the<sp/>range<sp/>is<sp/>not<sp/>tight.<sp/>Loss/draw/win<sp/>outcomes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>common<sp/>among<sp/>games<sp/>and<sp/>should<sp/>use<sp/>the<sp/>standard<sp/>values<sp/>of<sp/>{-1,0,1}.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="804" refid="classopen__spiel_1_1_game_1ab9390e351cfe88541b1057d7b60c6fb5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_game_1ab9390e351cfe88541b1057d7b60c6fb5" kindref="member">MinUtility</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="805" refid="classopen__spiel_1_1_game_1a89bb13e2ab0da0f38c2c24072ac22b5d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_game_1a89bb13e2ab0da0f38c2c24072ac22b5d" kindref="member">MaxUtility</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Static<sp/>information<sp/>on<sp/>the<sp/>game<sp/>type.<sp/>This<sp/>should<sp/>match<sp/>the<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>provided<sp/>when<sp/>registering<sp/>the<sp/>game.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809" refid="classopen__spiel_1_1_game_1ab43a710b19e2cebf48ceaeccd3c8961f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_type" kindref="compound">GameType</ref>&amp;<sp/><ref refid="classopen__spiel_1_1_game_1ab43a710b19e2cebf48ceaeccd3c8961f" kindref="member">GetType</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_game_1a40968ba04914278a389265b7063aac3f" kindref="member">game_type_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>total<sp/>utility<sp/>for<sp/>all<sp/>players,<sp/>if<sp/>this<sp/>is<sp/>a<sp/>constant-sum-utility<sp/>game.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Should<sp/>return<sp/>0<sp/>if<sp/>the<sp/>game<sp/>is<sp/>zero-sum.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813" refid="classopen__spiel_1_1_game_1a735212bf068b8461236ccc596664e4da" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>absl::optional&lt;double&gt;<sp/><ref refid="classopen__spiel_1_1_game_1a735212bf068b8461236ccc596664e4da" kindref="member">UtilitySum</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>absl::nullopt;<sp/>}</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Describes<sp/>the<sp/>structure<sp/>of<sp/>the<sp/>information<sp/>state<sp/>representation<sp/>in<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>tensor-like<sp/>format.<sp/>This<sp/>is<sp/>especially<sp/>useful<sp/>for<sp/>experiments<sp/>involving</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>reinforcement<sp/>learning<sp/>and<sp/>neural<sp/>networks.<sp/>Note:<sp/>the<sp/>actual<sp/>information<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>returned<sp/>in<sp/>a<sp/>1-D<sp/>vector<sp/>by<sp/>State::InformationStateTensor<sp/>-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>the<sp/>documentation<sp/>of<sp/>that<sp/>function<sp/>for<sp/>details<sp/>of<sp/>the<sp/>data<sp/>layout.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820" refid="classopen__spiel_1_1_game_1a209f3549db02ccfd23e5f534f49c6b9c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/><ref refid="classopen__spiel_1_1_game_1a209f3549db02ccfd23e5f534f49c6b9c" kindref="member">InformationStateTensorShape</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(</highlight><highlight class="stringliteral">&quot;InformationStateTensorShape<sp/>unimplemented.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="823" refid="classopen__spiel_1_1_game_1a41c14e07fcb4939e8b283b1b8c623b23" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1a57f1e9721fa60d57e91a64796bdbcad0" kindref="member">TensorLayout</ref><sp/><ref refid="classopen__spiel_1_1_game_1a41c14e07fcb4939e8b283b1b8c623b23" kindref="member">InformationStateTensorLayout</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1a57f1e9721fa60d57e91a64796bdbcad0a3abb5fb021a7312e31bf05647cc4c148" kindref="member">TensorLayout::kCHW</ref>;</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>size<sp/>of<sp/>the<sp/>(flat)<sp/>vector<sp/>needed<sp/>for<sp/>the<sp/>information<sp/>state<sp/>tensor-like</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>format.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829" refid="classopen__spiel_1_1_game_1a4e260b8faf1879f3bbe8d0bcab31a437" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_game_1a4e260b8faf1879f3bbe8d0bcab31a437" kindref="member">InformationStateTensorSize</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>shape<sp/>=<sp/><ref refid="classopen__spiel_1_1_game_1a209f3549db02ccfd23e5f534f49c6b9c" kindref="member">InformationStateTensorShape</ref>();</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shape.empty()<sp/>?<sp/>0</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>absl::c_accumulate(shape,<sp/>1,<sp/>std::multiplies&lt;int&gt;());</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Describes<sp/>the<sp/>structure<sp/>of<sp/>the<sp/>observation<sp/>representation<sp/>in<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>tensor-like<sp/>format.<sp/>This<sp/>is<sp/>especially<sp/>useful<sp/>for<sp/>experiments<sp/>involving</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>reinforcement<sp/>learning<sp/>and<sp/>neural<sp/>networks.<sp/>Note:<sp/>the<sp/>actual<sp/>observation<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>returned<sp/>in<sp/>a<sp/>1-D<sp/>vector<sp/>by<sp/>State::ObservationTensor<sp/>-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>the<sp/>documentation<sp/>of<sp/>that<sp/>function<sp/>for<sp/>details<sp/>of<sp/>the<sp/>data<sp/>layout.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840" refid="classopen__spiel_1_1_game_1a36bc618e4f23f2b81cb479e68dadf310" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/><ref refid="classopen__spiel_1_1_game_1a36bc618e4f23f2b81cb479e68dadf310" kindref="member">ObservationTensorShape</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(</highlight><highlight class="stringliteral">&quot;ObservationTensorShape<sp/>unimplemented.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="843" refid="classopen__spiel_1_1_game_1a3ad925d3568e428a6c3e4d601ac0cea0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1a57f1e9721fa60d57e91a64796bdbcad0" kindref="member">TensorLayout</ref><sp/><ref refid="classopen__spiel_1_1_game_1a3ad925d3568e428a6c3e4d601ac0cea0" kindref="member">ObservationTensorLayout</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1a57f1e9721fa60d57e91a64796bdbcad0a3abb5fb021a7312e31bf05647cc4c148" kindref="member">TensorLayout::kCHW</ref>;</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>size<sp/>of<sp/>the<sp/>(flat)<sp/>vector<sp/>needed<sp/>for<sp/>the<sp/>observation<sp/>tensor-like</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>format.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849" refid="classopen__spiel_1_1_game_1a19ffc4fce853df1f6314fc341472e5c4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_game_1a19ffc4fce853df1f6314fc341472e5c4" kindref="member">ObservationTensorSize</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>shape<sp/>=<sp/><ref refid="classopen__spiel_1_1_game_1a36bc618e4f23f2b81cb479e68dadf310" kindref="member">ObservationTensorShape</ref>();</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shape.empty()<sp/>?<sp/>0</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>absl::c_accumulate(shape,<sp/>1,<sp/>std::multiplies&lt;int&gt;());</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Describes<sp/>the<sp/>structure<sp/>of<sp/>the<sp/>policy<sp/>representation<sp/>in<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>tensor-like<sp/>format.<sp/>This<sp/>is<sp/>especially<sp/>useful<sp/>for<sp/>experiments<sp/>involving</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>reinforcement<sp/>learning<sp/>and<sp/>neural<sp/>networks.<sp/>Note:<sp/>the<sp/>actual<sp/>policy<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>expected<sp/>to<sp/>be<sp/>in<sp/>the<sp/>shape<sp/>of<sp/>a<sp/>1-D<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859" refid="classopen__spiel_1_1_game_1a41ff35e433f78eabf4ff306257522fbd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/><ref refid="classopen__spiel_1_1_game_1a41ff35e433f78eabf4ff306257522fbd" kindref="member">PolicyTensorShape</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<ref refid="classopen__spiel_1_1_game_1a01a5c08dfab0c2260a31c78be362476f" kindref="member">NumDistinctActions</ref>()};</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>newly<sp/>allocated<sp/>state<sp/>built<sp/>from<sp/>a<sp/>string.<sp/>Caller<sp/>takes<sp/>ownership</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>default<sp/>implementation<sp/>assumes<sp/>a<sp/>sequence<sp/>of<sp/>actions,<sp/>one<sp/>per<sp/>line,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>is<sp/>taken<sp/>from<sp/>the<sp/>initial<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>method<sp/>is<sp/>overridden,<sp/>then<sp/>it<sp/>should<sp/>be<sp/>the<sp/>inverse<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>State::Serialize<sp/>(i.e.<sp/>that<sp/>method<sp/>should<sp/>also<sp/>be<sp/>overridden).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;State&gt;<sp/><ref refid="classopen__spiel_1_1_game_1a4a0e6b899dc09f73c4251f07a823f592" kindref="member">DeserializeState</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>str)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>maximum<sp/>length<sp/>of<sp/>any<sp/>one<sp/>game<sp/>(in<sp/>terms<sp/>of<sp/>number<sp/>of<sp/>decision<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>visited<sp/>in<sp/>the<sp/>game<sp/>tree).<sp/>For<sp/>a<sp/>simultaneous<sp/>action<sp/>game,<sp/>this<sp/>is<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>maximum<sp/>number<sp/>of<sp/>joint<sp/>decisions.<sp/>In<sp/>a<sp/>turn-based<sp/>game,<sp/>this<sp/>is<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>maximum<sp/>number<sp/>of<sp/>individual<sp/>decisions<sp/>summed<sp/>over<sp/>all<sp/>players.<sp/>Outcomes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>chance<sp/>nodes<sp/>are<sp/>not<sp/>included<sp/>in<sp/>this<sp/>length.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878" refid="classopen__spiel_1_1_game_1aa74315d4db85544a8835269b26ba2966" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_game_1aa74315d4db85544a8835269b26ba2966" kindref="member">MaxGameLength</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>maximum<sp/>number<sp/>of<sp/>chance<sp/>nodes<sp/>occurring<sp/>in<sp/>any<sp/>history<sp/>of<sp/>the<sp/>game.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>typically<sp/>something<sp/>like<sp/>the<sp/>number<sp/>of<sp/>times<sp/>dice<sp/>are<sp/>rolled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882" refid="classopen__spiel_1_1_game_1a817f5d34cf3d2bcf5e890357f9c2ef1f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_game_1a817f5d34cf3d2bcf5e890357f9c2ef1f" kindref="member">MaxChanceNodesInHistory</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classopen__spiel_1_1_game_1ab43a710b19e2cebf48ceaeccd3c8961f" kindref="member">GetType</ref>().chance_mode<sp/>==<sp/><ref refid="structopen__spiel_1_1_game_type_1a1f22342e8a8c066323b49c0340a06d8eab1ebb5017b01aead05321c8dd2107ab0" kindref="member">GameType::ChanceMode::kDeterministic</ref>)<sp/>{</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(</highlight><highlight class="stringliteral">&quot;MaxChanceNodesInHistory()<sp/>is<sp/>not<sp/>implemented&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>maximum<sp/>number<sp/>of<sp/>moves<sp/>in<sp/>the<sp/>game.<sp/>The<sp/>value<sp/>State::MoveNumber()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>must<sp/>never<sp/>be<sp/>higher<sp/>than<sp/>this<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891" refid="classopen__spiel_1_1_game_1a4b0c5bbf1361734cc6740fc6be893fda" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_game_1a4b0c5bbf1361734cc6740fc6be893fda" kindref="member">MaxMoveNumber</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_game_1aa74315d4db85544a8835269b26ba2966" kindref="member">MaxGameLength</ref>()<sp/>+<sp/><ref refid="classopen__spiel_1_1_game_1a817f5d34cf3d2bcf5e890357f9c2ef1f" kindref="member">MaxChanceNodesInHistory</ref>();</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>maximum<sp/>length<sp/>of<sp/>any<sp/>history<sp/>in<sp/>the<sp/>game.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>value<sp/>State::History().size()<sp/>must<sp/>never<sp/>be<sp/>higher<sp/>than<sp/>this<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897" refid="classopen__spiel_1_1_game_1af0bbcc085789b58460771b4277e5adb2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_game_1af0bbcc085789b58460771b4277e5adb2" kindref="member">MaxHistoryLength</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classopen__spiel_1_1_game_1ab43a710b19e2cebf48ceaeccd3c8961f" kindref="member">GetType</ref>().dynamics<sp/>==<sp/><ref refid="structopen__spiel_1_1_game_type_1a624349737f34cc67d0cf81fd7138c17ba0ffc281e20028439b1995e0fa983ffcb" kindref="member">GameType::Dynamics::kSimultaneous</ref>)<sp/>{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>history<sp/>of<sp/>simultaneous<sp/>move<sp/>games<sp/>is<sp/>flattened,<sp/>so<sp/>count<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>actions<sp/>of<sp/>each<sp/>player.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_game_1aa74315d4db85544a8835269b26ba2966" kindref="member">MaxGameLength</ref>()<sp/>*<sp/><ref refid="classopen__spiel_1_1_game_1ade22718c6a0360525840cb7f7c68cab0" kindref="member">NumPlayers</ref>()<sp/>+<sp/><ref refid="classopen__spiel_1_1_game_1a817f5d34cf3d2bcf5e890357f9c2ef1f" kindref="member">MaxChanceNodesInHistory</ref>();</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classopen__spiel_1_1_game_1ab43a710b19e2cebf48ceaeccd3c8961f" kindref="member">GetType</ref>().dynamics<sp/>==<sp/><ref refid="structopen__spiel_1_1_game_type_1a624349737f34cc67d0cf81fd7138c17baeb609b99f542b955302693c0f445ba0c" kindref="member">GameType::Dynamics::kSequential</ref>)<sp/>{</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_game_1aa74315d4db85544a8835269b26ba2966" kindref="member">MaxGameLength</ref>()<sp/>+<sp/><ref refid="classopen__spiel_1_1_game_1a817f5d34cf3d2bcf5e890357f9c2ef1f" kindref="member">MaxChanceNodesInHistory</ref>();</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(</highlight><highlight class="stringliteral">&quot;Unknown<sp/>game<sp/>dynamics.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>string<sp/>representation<sp/>of<sp/>the<sp/>game,<sp/>which<sp/>can<sp/>be<sp/>passed<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>DeserializeGame.<sp/>The<sp/>difference<sp/>with<sp/>Game::ToString<sp/>is<sp/>that<sp/>it<sp/>also</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>serializes<sp/>internal<sp/>RNG<sp/>state<sp/>used<sp/>with<sp/>sampled<sp/>stochastic<sp/>game</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implementations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classopen__spiel_1_1_game_1a21a64ae854cebf2185bbc7aa1c8348f1" kindref="member">Serialize</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>string<sp/>representation<sp/>of<sp/>the<sp/>game,<sp/>which<sp/>can<sp/>be<sp/>passed<sp/>to<sp/>LoadGame.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classopen__spiel_1_1_game_1a1961953c180729dc203b777850f07319" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>these<sp/>games<sp/>are<sp/>equal,<sp/>false<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919" refid="classopen__spiel_1_1_game_1afc137887a4ef3ab77988ecea40a8cc9c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_game_1afc137887a4ef3ab77988ecea40a8cc9c" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_game" kindref="compound">Game</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>GetParameters()<sp/>includes<sp/>default<sp/>values.<sp/>So<sp/>comparing<sp/>GetParameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>instead<sp/>of<sp/>game_parameters_<sp/>makes<sp/>sure<sp/>that<sp/>game<sp/>equality<sp/>is<sp/>independent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>presence<sp/>of<sp/>explicitly<sp/>passed<sp/>game<sp/>parameters<sp/>with<sp/>default<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_game_1a40968ba04914278a389265b7063aac3f" kindref="member">game_type_</ref>.<ref refid="structopen__spiel_1_1_game_type_1a7dc97c2b88971ea7c5180d3c2fe29cf1" kindref="member">short_name</ref><sp/>==<sp/>other.<ref refid="classopen__spiel_1_1_game_1a40968ba04914278a389265b7063aac3f" kindref="member">game_type_</ref>.<ref refid="structopen__spiel_1_1_game_type_1a7dc97c2b88971ea7c5180d3c2fe29cf1" kindref="member">short_name</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classopen__spiel_1_1_game_1a7abf0c828e092399ca08e1881e0bbf54" kindref="member">GetParameters</ref>()<sp/>==<sp/>other.<ref refid="classopen__spiel_1_1_game_1a7abf0c828e092399ca08e1881e0bbf54" kindref="member">GetParameters</ref>();</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>and<sp/>set<sp/>game&apos;s<sp/>internal<sp/>RNG<sp/>state<sp/>for<sp/>de/serialization<sp/>purposes.<sp/>These</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>two<sp/>methods<sp/>only<sp/>need<sp/>to<sp/>be<sp/>overridden<sp/>by<sp/>sampled<sp/>stochastic<sp/>games<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>hold<sp/>an<sp/>RNG<sp/>state.<sp/>Note<sp/>that<sp/>stateful<sp/>game<sp/>implementations<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>discouraged<sp/>in<sp/>general.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931" refid="classopen__spiel_1_1_game_1ad8e566fa7343c252e2895a46ef6cdd31" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="classopen__spiel_1_1_game_1ad8e566fa7343c252e2895a46ef6cdd31" kindref="member">GetRNGState</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(</highlight><highlight class="stringliteral">&quot;GetRNGState<sp/>unimplemented.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SetRNGState<sp/>is<sp/>const<sp/>despite<sp/>the<sp/>fact<sp/>that<sp/>it<sp/>changes<sp/>game&apos;s<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>state.<sp/>Sampled<sp/>stochastic<sp/>games<sp/>need<sp/>to<sp/>be<sp/>explicit<sp/>about<sp/>mutability<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>RNG,<sp/>i.e.<sp/>have<sp/>to<sp/>use<sp/>the<sp/>mutable<sp/>keyword.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937" refid="classopen__spiel_1_1_game_1a04741ccd0d5da41a454501dd2953af69" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_game_1a04741ccd0d5da41a454501dd2953af69" kindref="member">SetRNGState</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>rng_state)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(</highlight><highlight class="stringliteral">&quot;SetRNGState<sp/>unimplemented.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>an<sp/>Observer,<sp/>used<sp/>to<sp/>obtain<sp/>observations<sp/>of<sp/>the<sp/>game<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>requested<sp/>iig_obs_type<sp/>is<sp/>not<sp/>supported<sp/>by<sp/>the<sp/>game,<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implementation<sp/>must<sp/>return<sp/>a<sp/>nullptr.<sp/>If<sp/>params<sp/>are<sp/>provided<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>unsupported<sp/>this<sp/>can<sp/>result<sp/>in<sp/>an<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>observations<sp/>are<sp/>created<sp/>according<sp/>to<sp/>requested<sp/>observation<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Games<sp/>can<sp/>include<sp/>additional<sp/>observation<sp/>fields<sp/>when<sp/>requested<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>`params`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>`observer.h`<sp/>for<sp/>further<sp/>information.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Observer&gt;<sp/><ref refid="classopen__spiel_1_1_game_1a223d65cc15f5961951e2c685a77879d9" kindref="member">MakeObserver</ref>(</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>absl::optional&lt;IIGObservationType&gt;<sp/>iig_obs_type,</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1ad7c4d931669b5e357cb5c7f84a6de094" kindref="member">GameParameters</ref>&amp;<sp/>params)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>string<sp/>representation<sp/>of<sp/>the<sp/>specified<sp/>action<sp/>for<sp/>the<sp/>player,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>independent<sp/>of<sp/>the<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955" refid="classopen__spiel_1_1_game_1a3a53334739ff4d4b6b81269ea5518136" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="classopen__spiel_1_1_game_1a3a53334739ff4d4b6b81269ea5518136" kindref="member">ActionToString</ref>(<ref refid="namespaceopen__spiel_1a8e9bf6a040c687a9f0c8393728dc0121" kindref="member">Player</ref><sp/>player,<sp/><ref refid="namespaceopen__spiel_1a8aa5fc5cff0ef466697b1df5cbfcbd3a" kindref="member">Action</ref><sp/>action_id)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>absl::StrCat(</highlight><highlight class="stringliteral">&quot;Action(id=&quot;</highlight><highlight class="normal">,<sp/>action_id,<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>player=&quot;</highlight><highlight class="normal">,<sp/>player,<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>an<sp/>observer<sp/>that<sp/>was<sp/>registered,<sp/>based<sp/>on<sp/>its<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Observer&gt;<sp/><ref refid="classopen__spiel_1_1_game_1a28537d9c2a657634e611724e12d2f32f" kindref="member">MakeRegisteredObserver</ref>(</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>absl::optional&lt;IIGObservationType&gt;<sp/>iig_obs_type,</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1ad7c4d931669b5e357cb5c7f84a6de094" kindref="member">GameParameters</ref>&amp;<sp/>params)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>an<sp/>observer<sp/>that<sp/>uses<sp/>the<sp/>observation<sp/>or<sp/>informationstate<sp/>tensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>string<sp/>as<sp/>defined<sp/>directly<sp/>on<sp/>the<sp/>state.<sp/>Returns<sp/>a<sp/>nullptr<sp/>if<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>requested<sp/>iig_obs_type<sp/>is<sp/>not<sp/>supported.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Observer&gt;<sp/><ref refid="classopen__spiel_1_1_game_1aa99f0ac0aeb14c3a190ae9fa56f428c3" kindref="member">MakeBuiltInObserver</ref>(</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>absl::optional&lt;IIGObservationType&gt;<sp/>iig_obs_type)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Public<sp/>member<sp/>functions<sp/>below<sp/>only<sp/>apply<sp/>to<sp/>games<sp/>with<sp/>mean<sp/>field<sp/>dynamics.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>new<sp/>initial<sp/>state<sp/>for<sp/>the<sp/>given<sp/>population<sp/>(which<sp/>must<sp/>be<sp/>in<sp/>[0,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NumPlayers())).<sp/>This<sp/>must<sp/>be<sp/>implemented<sp/>for<sp/>multi-population<sp/>mean<sp/>field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>games.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="974" refid="classopen__spiel_1_1_game_1ac46c5cfeeb05478188b382fa4d182efd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;State&gt;<sp/><ref refid="classopen__spiel_1_1_game_1ac46c5cfeeb05478188b382fa4d182efd" kindref="member">NewInitialStateForPopulation</ref>(</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>population)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(</highlight><highlight class="stringliteral">&quot;NewInitialStateForPopulation<sp/>is<sp/>not<sp/>implemented.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="980" refid="classopen__spiel_1_1_game_1ae1b45088cc527add6874e85d4c3a6cc3" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classopen__spiel_1_1_game_1ae1b45088cc527add6874e85d4c3a6cc3" kindref="member">Game</ref>(<ref refid="structopen__spiel_1_1_game_type" kindref="compound">GameType</ref><sp/>game_type,<sp/><ref refid="namespaceopen__spiel_1ad7c4d931669b5e357cb5c7f84a6de094" kindref="member">GameParameters</ref><sp/>game_parameters)</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classopen__spiel_1_1_game_1a40968ba04914278a389265b7063aac3f" kindref="member">game_type_</ref>(game_type),<sp/><ref refid="classopen__spiel_1_1_game_1aa0256cac5f169b067d69c0b5cb82b8b4" kindref="member">game_parameters_</ref>(game_parameters)<sp/>{}</highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Access<sp/>to<sp/>game<sp/>parameters.<sp/>Returns<sp/>the<sp/>value<sp/>provided<sp/>by<sp/>the<sp/>user.<sp/>If<sp/>not:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>Defaults<sp/>to<sp/>the<sp/>value<sp/>stored<sp/>as<sp/>the<sp/>default<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>game_type.parameter_specification<sp/>if<sp/>the<sp/>`default_value`<sp/>is<sp/>absl::nullopt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>Returns<sp/>`default_value`<sp/>if<sp/>provided.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="988" refid="classopen__spiel_1_1_game_1ab6156eb0a128486d9de8a054ab7365a9" refkind="member"><highlight class="normal"><sp/><sp/>T<sp/><ref refid="classopen__spiel_1_1_game_1ab6156eb0a128486d9de8a054ab7365a9" kindref="member">ParameterValue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>key,</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>absl::optional&lt;T&gt;<sp/>default_value<sp/>=<sp/>absl::nullopt)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>value<sp/>if<sp/>found.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>iter<sp/>=<sp/><ref refid="classopen__spiel_1_1_game_1aa0256cac5f169b067d69c0b5cb82b8b4" kindref="member">game_parameters_</ref>.find(key);</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter<sp/>!=<sp/><ref refid="classopen__spiel_1_1_game_1aa0256cac5f169b067d69c0b5cb82b8b4" kindref="member">game_parameters_</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iter-&gt;second.value&lt;T&gt;();</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pick<sp/>the<sp/>defaulted<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classopen__spiel_1_1_game_parameter" kindref="compound">GameParameter</ref><sp/>default_game_parameter;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(default_value.has_value())<sp/>{</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>default_game_parameter<sp/>=<sp/><ref refid="classopen__spiel_1_1_game_parameter" kindref="compound">GameParameter</ref>(default_value.value());</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>default_iter<sp/>=<sp/><ref refid="classopen__spiel_1_1_game_1a40968ba04914278a389265b7063aac3f" kindref="member">game_type_</ref>.<ref refid="structopen__spiel_1_1_game_type_1a2d265bb0c5d0be4d64222ac322bf3510" kindref="member">parameter_specification</ref>.find(key);</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(default_iter<sp/>==<sp/><ref refid="classopen__spiel_1_1_game_1a40968ba04914278a389265b7063aac3f" kindref="member">game_type_</ref>.<ref refid="structopen__spiel_1_1_game_type_1a2d265bb0c5d0be4d64222ac322bf3510" kindref="member">parameter_specification</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(absl::StrCat(</highlight><highlight class="stringliteral">&quot;The<sp/>parameter<sp/>for<sp/>&quot;</highlight><highlight class="normal">,<sp/>key,</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>missing<sp/>in<sp/>game<sp/>&quot;</highlight><highlight class="normal">,<sp/><ref refid="classopen__spiel_1_1_game_1a1961953c180729dc203b777850f07319" kindref="member">ToString</ref>()));</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>default_game_parameter<sp/>=<sp/>default_iter-&gt;second;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>default<sp/>value,<sp/>storing<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/>absl::MutexLock<sp/>lock(&amp;<ref refid="classopen__spiel_1_1_game_1a9f8eed0c692e15bd1d9806647b575f91" kindref="member">mutex_defaulted_parameters_</ref>);</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/>iter<sp/>=<sp/>defaulted_parameters_.find(key);</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter<sp/>==<sp/>defaulted_parameters_.end())<sp/>{</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>haven&apos;t<sp/>previously<sp/>defaulted<sp/>this<sp/>value,<sp/>so<sp/>store<sp/>the<sp/>default<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>defaulted_parameters_[key]<sp/>=<sp/>default_game_parameter;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Already<sp/>defaulted,<sp/>so<sp/>check<sp/>we<sp/>are<sp/>being<sp/>consistent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>different<sp/>default<sp/>values<sp/>at<sp/>different<sp/>times<sp/>means<sp/>the<sp/>game<sp/>isn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>well-defined.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(default_game_parameter<sp/>!=<sp/>iter-&gt;second)<sp/>{</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopen__spiel_1a43513b6f8f3a26ce1a64a1a807df9011" kindref="member">SpielFatalError</ref>(absl::StrCat(</highlight><highlight class="stringliteral">&quot;Parameter<sp/>&quot;</highlight><highlight class="normal">,<sp/>key,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>defaulted<sp/>to<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default_game_parameter.<ref refid="classopen__spiel_1_1_game_parameter_1acb636ac727b441b3c9fba4782a4580cb" kindref="member">ToReprString</ref>(),</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>having<sp/>previously<sp/>been<sp/>defaulted<sp/>to<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter-&gt;second.ToReprString(),<sp/></highlight><highlight class="stringliteral">&quot;<sp/>in<sp/>game<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classopen__spiel_1_1_game_1a1961953c180729dc203b777850f07319" kindref="member">ToString</ref>()));</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>default_game_parameter.<ref refid="classopen__spiel_1_1_game_parameter_1a065cb4ce517ffd2f475485895c2a9fcf" kindref="member">value</ref>&lt;T&gt;();</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>game<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032" refid="classopen__spiel_1_1_game_1a40968ba04914278a389265b7063aac3f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structopen__spiel_1_1_game_type" kindref="compound">GameType</ref><sp/><ref refid="classopen__spiel_1_1_game_1a40968ba04914278a389265b7063aac3f" kindref="member">game_type_</ref>;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Any<sp/>parameters<sp/>supplied<sp/>when<sp/>constructing<sp/>the<sp/>game.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035" refid="classopen__spiel_1_1_game_1aa0256cac5f169b067d69c0b5cb82b8b4" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespaceopen__spiel_1ad7c4d931669b5e357cb5c7f84a6de094" kindref="member">GameParameters</ref><sp/><ref refid="classopen__spiel_1_1_game_1aa0256cac5f169b067d69c0b5cb82b8b4" kindref="member">game_parameters_</ref>;</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Track<sp/>the<sp/>parameters<sp/>for<sp/>which<sp/>a<sp/>default<sp/>value<sp/>has<sp/>been<sp/>used.<sp/>This</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>enables<sp/>us<sp/>to<sp/>report<sp/>the<sp/>actual<sp/>value<sp/>used<sp/>for<sp/>every<sp/>parameter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1ad7c4d931669b5e357cb5c7f84a6de094" kindref="member">GameParameters</ref><sp/>defaulted_parameters_</highlight></codeline>
<codeline lineno="1040" refid="classopen__spiel_1_1_game_1acd86016f8990a05ac6c68b7bb8ce3711" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classopen__spiel_1_1_game_1acd86016f8990a05ac6c68b7bb8ce3711" kindref="member">ABSL_GUARDED_BY</ref>(<ref refid="classopen__spiel_1_1_game_1a9f8eed0c692e15bd1d9806647b575f91" kindref="member">mutex_defaulted_parameters_</ref>);</highlight></codeline>
<codeline lineno="1041" refid="classopen__spiel_1_1_game_1a9f8eed0c692e15bd1d9806647b575f91" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>absl::Mutex<sp/><ref refid="classopen__spiel_1_1_game_1a9f8eed0c692e15bd1d9806647b575f91" kindref="member">mutex_defaulted_parameters_</ref>;</highlight></codeline>
<codeline lineno="1042"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044" refid="spiel_8h_1acad9130bd1bd236f5baf83c07d4f537b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CONCAT_(x,<sp/>y)<sp/>x##y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045" refid="spiel_8h_1a2f18db18bca26cafa95e9719de4a41ef" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CONCAT(x,<sp/>y)<sp/>CONCAT_(x,<sp/>y)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1046" refid="spiel_8h_1aae9a841974d542786bac201bced64a5f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REGISTER_SPIEL_GAME(info,<sp/>factory)<sp/>\</highlight></codeline>
<codeline lineno="1047"><highlight class="preprocessor"><sp/><sp/>GameRegisterer<sp/>CONCAT(game,<sp/>__COUNTER__)(info,<sp/>factory);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049" refid="classopen__spiel_1_1_game_registerer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classopen__spiel_1_1_game_registerer" kindref="compound">GameRegisterer</ref><sp/>{</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1051" refid="classopen__spiel_1_1_game_registerer_1ab80c0c1ef72439db9a7a5fbf28a03435" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classopen__spiel_1_1_game_registerer_1ab80c0c1ef72439db9a7a5fbf28a03435" kindref="member">CreateFunc</ref><sp/>=</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::function&lt;std::shared_ptr&lt;const<sp/>Game&gt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1ad7c4d931669b5e357cb5c7f84a6de094" kindref="member">GameParameters</ref>&amp;<sp/>params)&gt;;</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><ref refid="classopen__spiel_1_1_game_registerer_1ab27bd0cfcf8b9cd0425627751749c384" kindref="member">GameRegisterer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_type" kindref="compound">GameType</ref>&amp;<sp/>game_type,<sp/><ref refid="classopen__spiel_1_1_game_registerer_1ab80c0c1ef72439db9a7a5fbf28a03435" kindref="member">CreateFunc</ref><sp/>creator);</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;const<sp/>Game&gt;<sp/><ref refid="classopen__spiel_1_1_game_registerer_1a6e6f8091b1e3c521af50e71b0dce5717" kindref="member">CreateByName</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>short_name,</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1ad7c4d931669b5e357cb5c7f84a6de094" kindref="member">GameParameters</ref>&amp;<sp/>params);</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/><ref refid="classopen__spiel_1_1_game_registerer_1a6a640935af5f3b93cf4a3ed2168b81d6" kindref="member">GamesWithKnownIssues</ref>();</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/><ref refid="classopen__spiel_1_1_game_registerer_1a2dd29263f74ac828f1c9c4ee0161b04f" kindref="member">RegisteredNames</ref>();</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;GameType&gt;<sp/><ref refid="classopen__spiel_1_1_game_registerer_1ab0c87d50dfa049e12c70c2a665def26c" kindref="member">RegisteredGames</ref>();</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_game_registerer_1a656bdcb02ce81779bb05dda3fb2e7936" kindref="member">IsValidName</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>short_name);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classopen__spiel_1_1_game_registerer_1a9087e5af855f413241a8ff7fba0dadeb" kindref="member">RegisterGame</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structopen__spiel_1_1_game_type" kindref="compound">GameType</ref>&amp;<sp/>game_type,<sp/><ref refid="classopen__spiel_1_1_game_registerer_1ab80c0c1ef72439db9a7a5fbf28a03435" kindref="member">CreateFunc</ref><sp/>creator);</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>&quot;global&quot;<sp/>map<sp/>of<sp/>registrations<sp/>(i.e.<sp/>an<sp/>object<sp/>that<sp/>lives<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>initialization<sp/>to<sp/>the<sp/>end<sp/>of<sp/>the<sp/>program).<sp/>Note<sp/>that<sp/>we<sp/>do<sp/>not<sp/>just<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>static<sp/>data<sp/>member,<sp/>as<sp/>we<sp/>want<sp/>the<sp/>map<sp/>to<sp/>be<sp/>initialized<sp/>before<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>use.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::map&lt;std::string,<sp/>std::pair&lt;GameType,<sp/>CreateFunc&gt;&gt;&amp;<sp/>factories()<sp/>{</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::map&lt;std::string,<sp/>std::pair&lt;GameType,<sp/>CreateFunc&gt;&gt;<sp/>impl;</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl;</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1074"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>the<sp/>game<sp/>is<sp/>registered,<sp/>false<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1adbb556e9d12546dd17acfe8c3887b869" kindref="member">IsGameRegistered</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>short_name);</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>list<sp/>of<sp/>registered<sp/>games&apos;<sp/>short<sp/>names.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal">std::vector&lt;std::string&gt;<sp/><ref refid="namespaceopen__spiel_1a5fc96e037a90ad323529c4f55d7d2cce" kindref="member">RegisteredGames</ref>();</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>list<sp/>of<sp/>registered<sp/>game<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal">std::vector&lt;GameType&gt;<sp/><ref refid="namespaceopen__spiel_1a79f969c1807e578a2090d314ab71bf68" kindref="member">RegisteredGameTypes</ref>();</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal">std::shared_ptr&lt;const<sp/>Game&gt;<sp/><ref refid="namespaceopen__spiel_1a46be5ac78a1c87daeef36b4b8dd67c3c" kindref="member">DeserializeGame</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>serialized);</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>game<sp/>object<sp/>from<sp/>the<sp/>specified<sp/>string,<sp/>which<sp/>is<sp/>the<sp/>short</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight><highlight class="comment">//<sp/>name<sp/>plus<sp/>optional<sp/>parameters,<sp/>e.g.<sp/>&quot;go(komi=4.5,board_size=19)&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal">std::shared_ptr&lt;const<sp/>Game&gt;<sp/><ref refid="namespaceopen__spiel_1afd4ac299a038385def0ea56521067137" kindref="member">LoadGame</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>game_string);</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>game<sp/>object<sp/>with<sp/>the<sp/>specified<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal">std::shared_ptr&lt;const<sp/>Game&gt;<sp/><ref refid="namespaceopen__spiel_1afd4ac299a038385def0ea56521067137" kindref="member">LoadGame</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>short_name,</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1ad7c4d931669b5e357cb5c7f84a6de094" kindref="member">GameParameters</ref>&amp;<sp/>params);</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>game<sp/>object<sp/>with<sp/>the<sp/>specified<sp/>parameters;<sp/>reads<sp/>the<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>game<sp/>from<sp/>the<sp/>&apos;name&apos;<sp/>parameter<sp/>(which<sp/>is<sp/>not<sp/>passed<sp/>to<sp/>the<sp/>game</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implementation).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal">std::shared_ptr&lt;const<sp/>Game&gt;<sp/><ref refid="namespaceopen__spiel_1afd4ac299a038385def0ea56521067137" kindref="member">LoadGame</ref>(<ref refid="namespaceopen__spiel_1ad7c4d931669b5e357cb5c7f84a6de094" kindref="member">GameParameters</ref><sp/>params);</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Normalize<sp/>a<sp/>policy<sp/>into<sp/>a<sp/>proper<sp/>discrete<sp/>distribution<sp/>where<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight><highlight class="comment">//<sp/>probabilities<sp/>sum<sp/>to<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1af4e1a06b98575bc24c84e635a12efec4" kindref="member">NormalizePolicy</ref>(<ref refid="namespaceopen__spiel_1ac4ea6d9d7193ac74f6f333b954e3810f" kindref="member">ActionsAndProbs</ref>*<sp/>policy);</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Used<sp/>to<sp/>sample<sp/>a<sp/>policy<sp/>or<sp/>chance<sp/>outcome<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Probabilities<sp/>of<sp/>the<sp/>actions<sp/>must<sp/>sum<sp/>to<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>parameter<sp/>z<sp/>should<sp/>be<sp/>a<sp/>sample<sp/>from<sp/>a<sp/>uniform<sp/>distribution<sp/>on<sp/>the<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[0,<sp/>1).<sp/>Returns<sp/>the<sp/>sampled<sp/>action<sp/>and<sp/>its<sp/>probability.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal">std::pair&lt;Action,<sp/>double&gt;<sp/><ref refid="namespaceopen__spiel_1a5eb64a0ea2eb4de455fbb51e4824c65b" kindref="member">SampleAction</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1ac4ea6d9d7193ac74f6f333b954e3810f" kindref="member">ActionsAndProbs</ref>&amp;<sp/>outcomes,</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z);</highlight></codeline>
<codeline lineno="1110"><highlight class="normal">std::pair&lt;Action,<sp/>double&gt;<sp/><ref refid="namespaceopen__spiel_1a5eb64a0ea2eb4de455fbb51e4824c65b" kindref="member">SampleAction</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1ac4ea6d9d7193ac74f6f333b954e3810f" kindref="member">ActionsAndProbs</ref>&amp;<sp/>outcomes,</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>absl::BitGenRef<sp/>rng);</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Serialize<sp/>the<sp/>game<sp/>and<sp/>the<sp/>state<sp/>into<sp/>one<sp/>self-contained<sp/>string<sp/>that<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>be<sp/>reloaded<sp/>via<sp/>open_spiel::DeserializeGameAndState.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>format<sp/>of<sp/>the<sp/>string<sp/>is<sp/>the<sp/>following<sp/>(contains<sp/>three<sp/>sections,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>marked<sp/>by<sp/>single-line<sp/>headers<sp/>in<sp/>square<sp/>brackets<sp/>with<sp/>specific<sp/>keywords),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight><highlight class="comment">//<sp/>see<sp/>below.<sp/>The<sp/>meta<sp/>section<sp/>contains<sp/>general<sp/>info.<sp/>The<sp/>game<sp/>string<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parsed<sp/>using<sp/>LoadGame(string)<sp/>and<sp/>the<sp/>state<sp/>section<sp/>is<sp/>parsed<sp/>using</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Game::DeserializeState.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Example<sp/>file<sp/>contents:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>#<sp/>Comments<sp/>are<sp/>ok,<sp/>but<sp/>hash<sp/>&apos;#&apos;<sp/>must<sp/>be<sp/>first<sp/>chatacter<sp/>in<sp/>the<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>#<sp/>Blank<sp/>lines<sp/>and<sp/>lines<sp/>that<sp/>start<sp/>with<sp/>hash<sp/>&apos;#&apos;<sp/>are<sp/>ignored</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>[Meta]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Version:<sp/>&lt;version&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>[Game]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>&lt;serialized<sp/>game<sp/>string;<sp/>may<sp/>take<sp/>up<sp/>several<sp/>lines&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>[State]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>&lt;serialized<sp/>state;<sp/>may<sp/>take<sp/>up<sp/>several<sp/>lines&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal">std::string<sp/><ref refid="namespaceopen__spiel_1a8c5224bc6b99621bd7c32c04dc9ddafa" kindref="member">SerializeGameAndState</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Game&amp;<sp/>game,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>State&amp;<sp/>state);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>general<sp/>deserialization<sp/>which<sp/>reconstructs<sp/>both<sp/>the<sp/>game<sp/>and<sp/>the<sp/>state,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>have<sp/>been<sp/>saved<sp/>using<sp/>the<sp/>default<sp/>simple<sp/>implementation<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SerializeGameAndState.<sp/>The<sp/>game<sp/>must<sp/>be<sp/>registered<sp/>so<sp/>that<sp/>it<sp/>is<sp/>loadable<sp/>via</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LoadGame.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>state<sp/>string<sp/>must<sp/>have<sp/>a<sp/>specific<sp/>format.<sp/>See</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Game::SerializeGameAndState<sp/>for<sp/>a<sp/>description<sp/>of<sp/>the<sp/>saved<sp/>format.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note:<sp/>This<sp/>serialization<sp/>scheme<sp/>will<sp/>not<sp/>work<sp/>for<sp/>games<sp/>whose<sp/>chance<sp/>mode<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight><highlight class="comment">//<sp/>kSampledStochastic,<sp/>as<sp/>there<sp/>is<sp/>currently<sp/>no<sp/>general<sp/>way<sp/>to<sp/>set<sp/>the<sp/>state&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight><highlight class="comment">//<sp/>seed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal">std::pair&lt;std::shared_ptr&lt;const<sp/>Game&gt;,<sp/>std::unique_ptr&lt;State&gt;&gt;</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><ref refid="namespaceopen__spiel_1a523877157f33ec65d5c05fe6eb0cfb9e" kindref="member">DeserializeGameAndState</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>serialized_state);</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Convert<sp/>GameTypes<sp/>from<sp/>and<sp/>to<sp/>strings.<sp/>Used<sp/>for<sp/>serialization<sp/>of<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>contain<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note:<sp/>these<sp/>are<sp/>not<sp/>finished!<sp/>They<sp/>will<sp/>be<sp/>finished<sp/>by<sp/>an<sp/>external</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributor.<sp/>See<sp/>https://github.com/deepmind/open_spiel/issues/234<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight><highlight class="comment">//<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal">std::string<sp/><ref refid="namespaceopen__spiel_1ad0ffb6361129cb7a813fc9b9afbf8bac" kindref="member">GameTypeToString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GameType&amp;<sp/>game_type);</highlight></codeline>
<codeline lineno="1156"><highlight class="normal">GameType<sp/><ref refid="namespaceopen__spiel_1abdd13dce1b32767e9b820f7f63638215" kindref="member">GameTypeFromString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>game_type_str);</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal">std::ostream&amp;<sp/><ref refid="namespaceopen__spiel_1a7a4f3573ff9d467ce5c64eecbe5ea8b9" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>State::PlayerAction&amp;<sp/>action);</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Utility<sp/>functions<sp/>used<sp/>mostly<sp/>for<sp/>debugging.<sp/>This<sp/>calls<sp/>State::ActionToString</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>every<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal">std::vector&lt;std::string&gt;<sp/><ref refid="namespaceopen__spiel_1a273ef5cc5b21091a3c4f4c09b9af7713" kindref="member">ActionsToStrings</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>State&amp;<sp/>state,</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Action&gt;&amp;<sp/>actions);</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Calls<sp/>ActionsToStrings<sp/>and<sp/>then<sp/>calls<sp/>absl::StrJoin<sp/>to<sp/>concatenate<sp/>all<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight><highlight class="comment">//<sp/>strings<sp/>together.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal">std::string<sp/><ref refid="namespaceopen__spiel_1a4f436837944c34a3007b2722e77a2c09" kindref="member">ActionsToString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>State&amp;<sp/>state,</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Action&gt;&amp;<sp/>actions);</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>utility<sp/>to<sp/>broadcast<sp/>an<sp/>error<sp/>message<sp/>with<sp/>game<sp/>and<sp/>state<sp/>info.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>a<sp/>wrapper<sp/>around<sp/>SpielFatalError<sp/>and<sp/>meant<sp/>to<sp/>facilitate<sp/>debugging.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceopen__spiel_1aeb956daaab571492f9a18ed99000b016" kindref="member">SpielFatalErrorWithStateInfo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>error_msg,</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Game&amp;<sp/>game,</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>State&amp;<sp/>state);</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Builds<sp/>the<sp/>state<sp/>from<sp/>a<sp/>history<sp/>string.<sp/>Checks<sp/>legalities<sp/>of<sp/>every<sp/>action</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>the<sp/>way.<sp/>The<sp/>history<sp/>string<sp/>is<sp/>a<sp/>comma-separated<sp/>actions<sp/>with<sp/>whitespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight><highlight class="comment">//<sp/>allowed,<sp/>and<sp/>can<sp/>include<sp/>square<sp/>brackets<sp/>on<sp/>either<sp/>side:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>E.g.<sp/>&quot;[1,<sp/>3,<sp/>4,<sp/>5,<sp/>6]&quot;<sp/><sp/>and<sp/>&quot;57,12,72,85&quot;<sp/>are<sp/>both<sp/>valid.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Proceeds<sp/>up<sp/>to<sp/>a<sp/>maximum<sp/>of<sp/>max_steps,<sp/>unless<sp/>max_steps<sp/>is<sp/>negative,<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>case<sp/>it<sp/>proceeds<sp/>until<sp/>the<sp/>end<sp/>of<sp/>the<sp/>sequence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal">std::pair&lt;std::shared_ptr&lt;const<sp/>Game&gt;,</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;State&gt;&gt;<sp/><ref refid="namespaceopen__spiel_1a8e5ff0d85e37788198b7cc387a7e5780" kindref="member">BuildStateFromHistoryString</ref>(</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>game_string,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>history,</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_steps<sp/>=<sp/>-1);</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>open_spiel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>OPEN_SPIEL_SPIEL_H_</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="open_spiel/spiel.h"/>
  </compounddef>
</doxygen>
